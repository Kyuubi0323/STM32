/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for blynky */
osThreadId_t blynkyHandle;
const osThreadAttr_t blynky_attributes = {
  .name = "blynky",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for interrupt */
osThreadId_t interruptHandle;
const osThreadAttr_t interrupt_attributes = {
  .name = "interrupt",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for funny_queue */
osMessageQueueId_t funny_queueHandle;
const osMessageQueueAttr_t funny_queue_attributes = {
  .name = "funny_queue"
};
/* Definitions for SoftTimer1 */
osTimerId_t SoftTimer1Handle;
const osTimerAttr_t SoftTimer1_attributes = {
  .name = "SoftTimer1"
};
/* Definitions for Task_Sema */
osSemaphoreId_t Task_SemaHandle;
const osSemaphoreAttr_t Task_Sema_attributes = {
  .name = "Task_Sema"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void blink_handler(void *argument);
void Button_IRQ_Handler(void *argument);
void Timer1_callback(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Task_Sema */
  Task_SemaHandle = osSemaphoreNew(2, 2, &Task_Sema_attributes);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SoftTimer1 */
  SoftTimer1Handle = osTimerNew(Timer1_callback, osTimerPeriodic, NULL, &SoftTimer1_attributes);

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of funny_queue */
  funny_queueHandle = osMessageQueueNew (16, sizeof(uint16_t), &funny_queue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blynky */
  blynkyHandle = osThreadNew(blink_handler, NULL, &blynky_attributes);

  /* creation of interrupt */
  interruptHandle = osThreadNew(Button_IRQ_Handler, NULL, &interrupt_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_blink_handler */
/**
  * @brief  Function implementing the blynky thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blink_handler */
void blink_handler(void *argument)
{
  /* USER CODE BEGIN blink_handler */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    osDelay(1000);
  }
  /* USER CODE END blink_handler */
}

/* USER CODE BEGIN Header_Button_IRQ_Handler */
/**
* @brief Function implementing the interrupt thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_IRQ_Handler */
void Button_IRQ_Handler(void *argument)
{
  /* USER CODE BEGIN Button_IRQ_Handler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END Button_IRQ_Handler */
}

/* Timer1_callback function */
void Timer1_callback(void *argument)
{
  /* USER CODE BEGIN Timer1_callback */

  /* USER CODE END Timer1_callback */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

