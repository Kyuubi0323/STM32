
RTOS_EP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dcc  08006dcc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd4  08006dd4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  20000078  08006e54  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c5c  08006e54  00024c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001958d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003356  00000000  00000000  00039635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003c990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cfe  00000000  00000000  0003f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001657c  00000000  00000000  00042e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009829d  00000000  00000000  00059382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f161f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac0  00000000  00000000  000f1670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b60 	.word	0x08006b60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006b60 	.word	0x08006b60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb5a 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f846 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8d8 	bl	8000754 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a4:	f000 f8ac 	bl	8000700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)ringbuf, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4914      	ldr	r1, [pc, #80]	; (80005fc <main+0x68>)
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x6c>)
 80005ae:	f001 fe8c 	bl	80022ca <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b2:	f002 fe67 	bl	8003284 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SimpleQueue */
  SimpleQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &SimpleQueue_attributes);
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <main+0x70>)
 80005b8:	2102      	movs	r1, #2
 80005ba:	2010      	movs	r0, #16
 80005bc:	f002 ff59 	bl	8003472 <osMessageQueueNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a11      	ldr	r2, [pc, #68]	; (8000608 <main+0x74>)
 80005c4:	6013      	str	r3, [r2, #0]

  /* creation of AdvancedQueue */
  AdvancedQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &AdvancedQueue_attributes);
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0x78>)
 80005c8:	2102      	movs	r1, #2
 80005ca:	2010      	movs	r0, #16
 80005cc:	f002 ff51 	bl	8003472 <osMessageQueueNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <main+0x7c>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(Task01_Handler, NULL, &Task01_attributes);
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <main+0x80>)
 80005d8:	2100      	movs	r1, #0
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <main+0x84>)
 80005dc:	f002 fe9c 	bl	8003318 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <main+0x88>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task02_Handler, NULL, &Task02_attributes);
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <main+0x8c>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0x90>)
 80005ec:	f002 fe94 	bl	8003318 <osThreadNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <main+0x94>)
 80005f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f6:	f002 fe69 	bl	80032cc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x66>
 80005fc:	200000dc 	.word	0x200000dc
 8000600:	20000094 	.word	0x20000094
 8000604:	08006cf0 	.word	0x08006cf0
 8000608:	200001e4 	.word	0x200001e4
 800060c:	08006d08 	.word	0x08006d08
 8000610:	200001e8 	.word	0x200001e8
 8000614:	08006ca8 	.word	0x08006ca8
 8000618:	0800081d 	.word	0x0800081d
 800061c:	200001dc 	.word	0x200001dc
 8000620:	08006ccc 	.word	0x08006ccc
 8000624:	08000891 	.word	0x08000891
 8000628:	200001e0 	.word	0x200001e0

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fdc0 	bl	80061c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <SystemClock_Config+0xcc>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a20      	ldr	r2, [pc, #128]	; (80006fc <SystemClock_Config+0xd0>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006a4:	2354      	movs	r3, #84	; 0x54
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fe1f 	bl	80012f8 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 f936 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f881 	bl	80017e8 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ec:	f000 f920 	bl	8000930 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	; 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f001 fce8 	bl	800210c <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f8f5 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000094 	.word	0x20000094
 8000750:	40011000 	.word	0x40011000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_GPIO_Init+0x98>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_GPIO_Init+0x98>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0x98>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_GPIO_Init+0x98>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_GPIO_Init+0x98>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_GPIO_Init+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0x9c>)
 80007aa:	f000 fd8b 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	480a      	ldr	r0, [pc, #40]	; (80007f0 <MX_GPIO_Init+0x9c>)
 80007c8:	f000 fbf8 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80007cc:	2301      	movs	r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_GPIO_Init+0xa0>)
 80007e0:	f000 fbec 	bl	8000fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020000 	.word	0x40020000

080007f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1, (uint8_t *)ringbuf, 1, 10);
	HAL_UART_Receive_IT(&huart1, (uint8_t*)ringbuf, 1);
 8000800:	2201      	movs	r2, #1
 8000802:	4904      	ldr	r1, [pc, #16]	; (8000814 <HAL_UART_RxCpltCallback+0x1c>)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <HAL_UART_RxCpltCallback+0x20>)
 8000806:	f001 fd60 	bl	80022ca <HAL_UART_Receive_IT>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000dc 	.word	0x200000dc
 8000818:	20000094 	.word	0x20000094

0800081c <Task01_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01_Handler */
void Task01_Handler(void *argument)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//int i = 200;
	char *msg_str1 = "Take osPut \r\n";
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <Task01_Handler+0x60>)
 8000826:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    HAL_UART_Transmit(&huart1, (uint8_t *)send_buf, strlen(send_buf), 100);
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <Task01_Handler+0x64>)
 800082a:	681c      	ldr	r4, [r3, #0]
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <Task01_Handler+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fcd5 	bl	80001e0 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	4621      	mov	r1, r4
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <Task01_Handler+0x68>)
 8000840:	f001 fcb1 	bl	80021a6 <HAL_UART_Transmit>
    if(osMessageQueuePut(SimpleQueueHandle, (void*) msg_str1, 0, 100) == pdPASS)
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <Task01_Handler+0x6c>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2200      	movs	r2, #0
 800084c:	68f9      	ldr	r1, [r7, #12]
 800084e:	f002 fe83 	bl	8003558 <osMessageQueuePut>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d10b      	bne.n	8000870 <Task01_Handler+0x54>
    {
    	char *str2 = "Successfully sent the number to the queue\nLeaving SENDER_HPT Task\n\n\n";
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <Task01_Handler+0x70>)
 800085a:	60bb      	str	r3, [r7, #8]
    	HAL_UART_Transmit(&huart1, (uint8_t *)str2, strlen (str2), 100);
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	f7ff fcbf 	bl	80001e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <Task01_Handler+0x68>)
 800086c:	f001 fc9b 	bl	80021a6 <HAL_UART_Transmit>
    }
    osDelay(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f002 fde2 	bl	800343c <osDelay>
    HAL_UART_Transmit(&huart1, (uint8_t *)send_buf, strlen(send_buf), 100);
 8000878:	e7d6      	b.n	8000828 <Task01_Handler+0xc>
 800087a:	bf00      	nop
 800087c:	08006bcc 	.word	0x08006bcc
 8000880:	20000000 	.word	0x20000000
 8000884:	20000094 	.word	0x20000094
 8000888:	200001e4 	.word	0x200001e4
 800088c:	08006bdc 	.word	0x08006bdc

08000890 <Task02_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_Handler */
void Task02_Handler(void *argument)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_Handler */
	int received=0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(SimpleQueueHandle, &received, 0, portMAX_DELAY) != pdPASS)
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <Task02_Handler+0x68>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	f107 010c 	add.w	r1, r7, #12
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	2200      	movs	r2, #0
 80008aa:	f002 feb5 	bl	8003618 <osMessageQueueGet>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d006      	beq.n	80008c2 <Task02_Handler+0x32>
		{
			HAL_UART_Transmit(&huart1, (uint8_t *)"Error in Receiving from Queue\n\n", 31, 100);
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	221f      	movs	r2, #31
 80008b8:	4910      	ldr	r1, [pc, #64]	; (80008fc <Task02_Handler+0x6c>)
 80008ba:	4811      	ldr	r0, [pc, #68]	; (8000900 <Task02_Handler+0x70>)
 80008bc:	f001 fc73 	bl	80021a6 <HAL_UART_Transmit>
 80008c0:	e014      	b.n	80008ec <Task02_Handler+0x5c>
		}
		else
		{
			sprintf(str, " Successfully RECEIVED the number %d to the queue\nLeaving RECEIVER Task\n\n\n",received);
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <Task02_Handler+0x74>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	490f      	ldr	r1, [pc, #60]	; (8000908 <Task02_Handler+0x78>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fd8e 	bl	80063ec <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), 100);
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <Task02_Handler+0x74>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <Task02_Handler+0x74>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc81 	bl	80001e0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	4621      	mov	r1, r4
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <Task02_Handler+0x70>)
 80008e8:	f001 fc5d 	bl	80021a6 <HAL_UART_Transmit>
		}
		osDelay(2000);
 80008ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f0:	f002 fda4 	bl	800343c <osDelay>
	  if (osMessageQueueGet(SimpleQueueHandle, &received, 0, portMAX_DELAY) != pdPASS)
 80008f4:	e7d2      	b.n	800089c <Task02_Handler+0xc>
 80008f6:	bf00      	nop
 80008f8:	200001e4 	.word	0x200001e4
 80008fc:	08006c24 	.word	0x08006c24
 8000900:	20000094 	.word	0x20000094
 8000904:	200000d8 	.word	0x200000d8
 8000908:	08006c44 	.word	0x08006c44

0800090c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091e:	f000 f9b9 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40014400 	.word	0x40014400

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_MspInit+0x54>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_MspInit+0x54>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fa5f 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <HAL_UART_MspInit+0x94>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d134      	bne.n	8000a20 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0x98>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a00:	2307      	movs	r3, #7
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4809      	ldr	r0, [pc, #36]	; (8000a30 <HAL_UART_MspInit+0x9c>)
 8000a0c:	f000 fad6 	bl	8000fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2105      	movs	r1, #5
 8000a14:	2025      	movs	r0, #37	; 0x25
 8000a16:	f000 fa15 	bl	8000e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a1a:	2025      	movs	r0, #37	; 0x25
 8000a1c:	f000 fa2e 	bl	8000e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <HAL_InitTick+0xd0>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <HAL_InitTick+0xd0>)
 8000a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a52:	6453      	str	r3, [r2, #68]	; 0x44
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <HAL_InitTick+0xd0>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 020c 	add.w	r2, r7, #12
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f89c 	bl	8001ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a70:	f001 f886 	bl	8001b80 <HAL_RCC_GetPCLK2Freq>
 8000a74:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a78:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <HAL_InitTick+0xd4>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_InitTick+0xd8>)
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <HAL_InitTick+0xdc>)
 8000a88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_InitTick+0xd8>)
 8000a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <HAL_InitTick+0xd8>)
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <HAL_InitTick+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_InitTick+0xd8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_InitTick+0xd8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000aaa:	4818      	ldr	r0, [pc, #96]	; (8000b0c <HAL_InitTick+0xd8>)
 8000aac:	f001 f8ae 	bl	8001c0c <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d11b      	bne.n	8000af6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000abe:	4813      	ldr	r0, [pc, #76]	; (8000b0c <HAL_InitTick+0xd8>)
 8000ac0:	f001 f8fe 	bl	8001cc0 <HAL_TIM_Base_Start_IT>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d111      	bne.n	8000af6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ad2:	2019      	movs	r0, #25
 8000ad4:	f000 f9d2 	bl	8000e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	d808      	bhi.n	8000af0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f000 f9ae 	bl	8000e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_InitTick+0xe0>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e002      	b.n	8000af6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	431bde83 	.word	0x431bde83
 8000b0c:	200001ec 	.word	0x200001ec
 8000b10:	40014400 	.word	0x40014400
 8000b14:	20000008 	.word	0x20000008

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b4a:	f001 f91b 	bl	8001d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001ec 	.word	0x200001ec

08000b58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <USART1_IRQHandler+0x10>)
 8000b5e:	f001 fbe5 	bl	800232c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000094 	.word	0x20000094

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f005 fad6 	bl	800614c <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20010000 	.word	0x20010000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	20000234 	.word	0x20000234
 8000bd4:	20004c60 	.word	0x20004c60

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f005 fa95 	bl	8006158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fcb1 	bl	8000594 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c40:	08006ddc 	.word	0x08006ddc
  ldr r2, =_sbss
 8000c44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c48:	20004c5c 	.word	0x20004c5c

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f7ff fed8 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe5a 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	20000238 	.word	0x20000238

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000238 	.word	0x20000238

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ea6:	f7ff ff09 	bl	8000cbc <HAL_GetTick>
 8000eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d008      	beq.n	8000eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e052      	b.n	8000f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0216 	bic.w	r2, r2, #22
 8000ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	695a      	ldr	r2, [r3, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d103      	bne.n	8000efa <HAL_DMA_Abort+0x62>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0208 	bic.w	r2, r2, #8
 8000f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1a:	e013      	b.n	8000f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f1c:	f7ff fece 	bl	8000cbc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d90c      	bls.n	8000f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e015      	b.n	8000f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1e4      	bne.n	8000f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f56:	223f      	movs	r2, #63	; 0x3f
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d004      	beq.n	8000f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00c      	b.n	8000fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2205      	movs	r2, #5
 8000f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e159      	b.n	800128c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8148 	bne.w	8001286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a2 	beq.w	8001286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b54      	ldr	r3, [pc, #336]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a49      	ldr	r2, [pc, #292]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x202>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x1fe>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2f8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x1fa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x2fc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x1f6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x300>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x1f2>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x304>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f aea2 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e267      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d075      	beq.n	8001402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b04      	cmp	r3, #4
 8001320:	d00c      	beq.n	800133c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b85      	ldr	r3, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d112      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b82      	ldr	r3, [pc, #520]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800133a:	d10b      	bne.n	8001354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05b      	beq.n	8001400 <HAL_RCC_OscConfig+0x108>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d157      	bne.n	8001400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e242      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x74>
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a75      	ldr	r2, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x98>
 8001376:	4b70      	ldr	r3, [pc, #448]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6f      	ldr	r2, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0xb0>
 8001390:	4b69      	ldr	r3, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a68      	ldr	r2, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b66      	ldr	r3, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc84 	bl	8000cbc <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fc80 	bl	8000cbc <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e207      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xc0>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc70 	bl	8000cbc <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fc6c 	bl	8000cbc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1f3      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0xe8>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001422:	2b08      	cmp	r3, #8
 8001424:	d11c      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1c7      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4937      	ldr	r1, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001468:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_OscConfig+0x244>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fc25 	bl	8000cbc <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fc21 	bl	8000cbc <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e1a8      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4925      	ldr	r1, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_OscConfig+0x244>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc04 	bl	8000cbc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc00 	bl	8000cbc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e187      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d036      	beq.n	8001550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d016      	beq.n	8001518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_RCC_OscConfig+0x248>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fbe4 	bl	8000cbc <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fbe0 	bl	8000cbc <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e167      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x240>)
 800150c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x200>
 8001516:	e01b      	b.n	8001550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_OscConfig+0x248>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fbcd 	bl	8000cbc <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001524:	e00e      	b.n	8001544 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff fbc9 	bl	8000cbc <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d907      	bls.n	8001544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e150      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ea      	bne.n	8001526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8097 	beq.w	800168c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10f      	bne.n	800158e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a7c      	ldr	r2, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b7a      	ldr	r3, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b77      	ldr	r3, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b74      	ldr	r3, [pc, #464]	; (800176c <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a73      	ldr	r2, [pc, #460]	; (800176c <HAL_RCC_OscConfig+0x474>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb89 	bl	8000cbc <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fb85 	bl	8000cbc <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e10c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x474>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2ea>
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a63      	ldr	r2, [pc, #396]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x30c>
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a5b      	ldr	r2, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x324>
 8001604:	4b58      	ldr	r3, [pc, #352]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	4a57      	ldr	r2, [pc, #348]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6713      	str	r3, [r2, #112]	; 0x70
 8001610:	4b55      	ldr	r3, [pc, #340]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0304 	bic.w	r3, r3, #4
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d015      	beq.n	8001650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fb4a 	bl	8000cbc <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fb46 	bl	8000cbc <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0cb      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ee      	beq.n	800162c <HAL_RCC_OscConfig+0x334>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fb34 	bl	8000cbc <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff fb30 	bl	8000cbc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e0b5      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a1 	beq.w	80017d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d05c      	beq.n	800175c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d141      	bne.n	800172e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb04 	bl	8000cbc <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff fb00 	bl	8000cbc <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e087      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69da      	ldr	r2, [r3, #28]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	019b      	lsls	r3, r3, #6
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	085b      	lsrs	r3, r3, #1
 80016ee:	3b01      	subs	r3, #1
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	491b      	ldr	r1, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fad9 	bl	8000cbc <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fad5 	bl	8000cbc <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e05c      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x416>
 800172c:	e054      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_OscConfig+0x478>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fac2 	bl	8000cbc <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fabe 	bl	8000cbc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e045      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RCC_OscConfig+0x470>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x444>
 800175a:	e03d      	b.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e038      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000
 8001770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_RCC_OscConfig+0x4ec>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d121      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d11a      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d111      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0cc      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d90c      	bls.n	8001824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d044      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d119      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e06f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e067      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f023 0203 	bic.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4934      	ldr	r1, [pc, #208]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff f9f0 	bl	8000cbc <HAL_GetTick>
 80018dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e0:	f7ff f9ec 	bl	8000cbc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 020c 	and.w	r2, r3, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1eb      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d20c      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	490a      	ldr	r1, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	5ccb      	ldrb	r3, [r1, r3]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f850 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08006d20 	.word	0x08006d20
 80019ac:	20000004 	.word	0x20000004
 80019b0:	20000008 	.word	0x20000008

080019b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b8:	b090      	sub	sp, #64	; 0x40
 80019ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d00d      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019d8:	2b08      	cmp	r3, #8
 80019da:	f200 80a1 	bhi.w	8001b20 <HAL_RCC_GetSysClockFreq+0x16c>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x34>
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x3a>
 80019e6:	e09b      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x184>)
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019ec:	e09b      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x188>)
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019f2:	e098      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f4:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019fe:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d028      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	627a      	str	r2, [r7, #36]	; 0x24
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a20:	fb03 f201 	mul.w	r2, r3, r1
 8001a24:	2300      	movs	r3, #0
 8001a26:	fb00 f303 	mul.w	r3, r0, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a43      	ldr	r2, [pc, #268]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a2e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a34:	460a      	mov	r2, r1
 8001a36:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3a:	4413      	add	r3, r2
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a40:	2200      	movs	r2, #0
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	61fa      	str	r2, [r7, #28]
 8001a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a4e:	f7fe fc1f 	bl	8000290 <__aeabi_uldivmod>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4613      	mov	r3, r2
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a5a:	e053      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	2200      	movs	r2, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	617a      	str	r2, [r7, #20]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a6e:	f04f 0b00 	mov.w	fp, #0
 8001a72:	4652      	mov	r2, sl
 8001a74:	465b      	mov	r3, fp
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	0159      	lsls	r1, r3, #5
 8001a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a84:	0150      	lsls	r0, r2, #5
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a8e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001aa2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001aa6:	ebb2 0408 	subs.w	r4, r2, r8
 8001aaa:	eb63 0509 	sbc.w	r5, r3, r9
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	00eb      	lsls	r3, r5, #3
 8001ab8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001abc:	00e2      	lsls	r2, r4, #3
 8001abe:	4614      	mov	r4, r2
 8001ac0:	461d      	mov	r5, r3
 8001ac2:	eb14 030a 	adds.w	r3, r4, sl
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	eb45 030b 	adc.w	r3, r5, fp
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ada:	4629      	mov	r1, r5
 8001adc:	028b      	lsls	r3, r1, #10
 8001ade:	4621      	mov	r1, r4
 8001ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	028a      	lsls	r2, r1, #10
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	2200      	movs	r2, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	60fa      	str	r2, [r7, #12]
 8001af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af8:	f7fe fbca 	bl	8000290 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4613      	mov	r3, r2
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3740      	adds	r7, #64	; 0x40
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	017d7840 	.word	0x017d7840

08001b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b5c:	f7ff fff0 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08006d30 	.word	0x08006d30

08001b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b84:	f7ff ffdc 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0b5b      	lsrs	r3, r3, #13
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4903      	ldr	r1, [pc, #12]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	08006d30 	.word	0x08006d30

08001ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_RCC_GetClockConfig+0x60>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0207 	and.w	r2, r3, #7
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e041      	b.n	8001ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f839 	bl	8001caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 f9ca 	bl	8001fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e044      	b.n	8001d62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d018      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x6c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d02:	d013      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x6c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x6c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d009      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x6c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_TIM_Base_Start_IT+0xbc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x6c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d111      	bne.n	8001d50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d010      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4e:	e007      	b.n	8001d60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40000800 	.word	0x40000800
 8001d7c:	40000c00 	.word	0x40000c00
 8001d80:	40014000 	.word	0x40014000

08001d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0202 	mvn.w	r2, #2
 8001db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8ee 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8e0 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8f1 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0204 	mvn.w	r2, #4
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8c4 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8b6 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f8c7 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0208 	mvn.w	r2, #8
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f89a 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f88c 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f89d 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d122      	bne.n	8001edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d11b      	bne.n	8001edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0210 	mvn.w	r2, #16
 8001eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f870 	bl	8001fa8 <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f862 	bl	8001f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f873 	bl	8001fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0201 	mvn.w	r2, #1
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fd02 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	2b80      	cmp	r3, #128	; 0x80
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8e2 	bl	80020f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f838 	bl	8001fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0320 	and.w	r3, r3, #32
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0220 	mvn.w	r2, #32
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8ac 	bl	80020e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <TIM_Base_SetConfig+0xe4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00f      	beq.n	800201c <TIM_Base_SetConfig+0x38>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x38>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a31      	ldr	r2, [pc, #196]	; (80020cc <TIM_Base_SetConfig+0xe8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x38>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a30      	ldr	r2, [pc, #192]	; (80020d0 <TIM_Base_SetConfig+0xec>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x38>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <TIM_Base_SetConfig+0xf0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <TIM_Base_SetConfig+0xe4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01b      	beq.n	800206e <TIM_Base_SetConfig+0x8a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203c:	d017      	beq.n	800206e <TIM_Base_SetConfig+0x8a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a22      	ldr	r2, [pc, #136]	; (80020cc <TIM_Base_SetConfig+0xe8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <TIM_Base_SetConfig+0x8a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <TIM_Base_SetConfig+0xec>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00f      	beq.n	800206e <TIM_Base_SetConfig+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <TIM_Base_SetConfig+0xf0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00b      	beq.n	800206e <TIM_Base_SetConfig+0x8a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <TIM_Base_SetConfig+0xf4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <TIM_Base_SetConfig+0x8a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <TIM_Base_SetConfig+0xf8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <TIM_Base_SetConfig+0x8a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <TIM_Base_SetConfig+0xfc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <TIM_Base_SetConfig+0xe4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d103      	bne.n	80020b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	615a      	str	r2, [r3, #20]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800

080020e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e03f      	b.n	800219e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fc2e 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fddf 	bl	8002d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b08a      	sub	sp, #40	; 0x28
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d17c      	bne.n	80022c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_UART_Transmit+0x2c>
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e075      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Transmit+0x3e>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e06e      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fd5f 	bl	8000cbc <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002214:	d108      	bne.n	8002228 <HAL_UART_Transmit+0x82>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d104      	bne.n	8002228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e003      	b.n	8002230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002238:	e02a      	b.n	8002290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2200      	movs	r2, #0
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fb1f 	bl	8002888 <UART_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e036      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	3302      	adds	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e007      	b.n	8002282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3301      	adds	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1cf      	bne.n	800223a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 faef 	bl	8002888 <UART_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e006      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	4613      	mov	r3, r2
 80022d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d11d      	bne.n	8002320 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_UART_Receive_IT+0x26>
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e016      	b.n	8002322 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Receive_IT+0x38>
 80022fe:	2302      	movs	r3, #2
 8002300:	e00f      	b.n	8002322 <HAL_UART_Receive_IT+0x58>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	461a      	mov	r2, r3
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fb24 	bl	8002964 <UART_Start_Receive_IT>
 800231c:	4603      	mov	r3, r0
 800231e:	e000      	b.n	8002322 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0ba      	sub	sp, #232	; 0xe8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800236a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
 800237e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fc07 	bl	8002b9e <UART_Receive_IT>
      return;
 8002390:	e256      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80de 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
 800239c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80d1 	beq.w	8002558 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
 80023c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
 80023e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
 800240a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
 800242e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800243a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0208 	orr.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 81ed 	beq.w	8002836 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fb92 	bl	8002b9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002484:	2b40      	cmp	r3, #64	; 0x40
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_UART_IRQHandler+0x17a>
 800249e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04f      	beq.n	8002546 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa9a 	bl	80029e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d141      	bne.n	800253e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024f6:	e841 2300 	strex	r3, r2, [r1]
 80024fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1d9      	bne.n	80024ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	2b00      	cmp	r3, #0
 800250c:	d013      	beq.n	8002536 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4a7d      	ldr	r2, [pc, #500]	; (8002708 <HAL_UART_IRQHandler+0x3dc>)
 8002514:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fd2c 	bl	8000f78 <HAL_DMA_Abort_IT>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002530:	4610      	mov	r0, r2
 8002532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	e00e      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f990 	bl	800285c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	e00a      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f98c 	bl	800285c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	e006      	b.n	8002554 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f988 	bl	800285c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002552:	e170      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	bf00      	nop
    return;
 8002556:	e16e      	b.n	8002836 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	2b01      	cmp	r3, #1
 800255e:	f040 814a 	bne.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002566:	f003 0310 	and.w	r3, r3, #16
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8143 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 813c 	beq.w	80027f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	f040 80b4 	bne.w	800270c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8140 	beq.w	800283a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025c2:	429a      	cmp	r2, r3
 80025c4:	f080 8139 	bcs.w	800283a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025da:	f000 8088 	beq.w	80026ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	330c      	adds	r3, #12
 8002606:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800260a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800261a:	e841 2300 	strex	r3, r2, [r1]
 800261e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1d9      	bne.n	80025de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800263a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3314      	adds	r3, #20
 800264a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800264e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800265a:	e841 2300 	strex	r3, r2, [r1]
 800265e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1e1      	bne.n	800262a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800267c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800268a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800268c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e3      	bne.n	8002666 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	330c      	adds	r3, #12
 80026b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b6:	e853 3f00 	ldrex	r3, [r3]
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026be:	f023 0310 	bic.w	r3, r3, #16
 80026c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80026d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e3      	bne.n	80026ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fbd5 	bl	8000e98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8b6 	bl	8002870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002704:	e099      	b.n	800283a <HAL_UART_IRQHandler+0x50e>
 8002706:	bf00      	nop
 8002708:	08002aa7 	.word	0x08002aa7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002714:	b29b      	uxth	r3, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 808b 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002728:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8086 	beq.w	800283e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002756:	647a      	str	r2, [r7, #68]	; 0x44
 8002758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800275c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e3      	bne.n	8002732 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	623b      	str	r3, [r7, #32]
   return(result);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800278e:	633a      	str	r2, [r7, #48]	; 0x30
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e3      	bne.n	800276a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	60fb      	str	r3, [r7, #12]
   return(result);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0310 	bic.w	r3, r3, #16
 80027c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027d4:	61fa      	str	r2, [r7, #28]
 80027d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d8:	69b9      	ldr	r1, [r7, #24]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	617b      	str	r3, [r7, #20]
   return(result);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e3      	bne.n	80027b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f83e 	bl	8002870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f4:	e023      	b.n	800283e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
 8002802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f95d 	bl	8002ace <UART_Transmit_IT>
    return;
 8002814:	e014      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00e      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f99d 	bl	8002b6e <UART_EndTransmit_IT>
    return;
 8002834:	e004      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
    return;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <HAL_UART_IRQHandler+0x514>
      return;
 800283e:	bf00      	nop
  }
}
 8002840:	37e8      	adds	r7, #232	; 0xe8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop

08002848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b090      	sub	sp, #64	; 0x40
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002898:	e050      	b.n	800293c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d04c      	beq.n	800293c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028a8:	f7fe fa08 	bl	8000cbc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d241      	bcs.n	800293c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c2:	e853 3f00 	ldrex	r3, [r3]
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d8:	637a      	str	r2, [r7, #52]	; 0x34
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e0:	e841 2300 	strex	r3, r2, [r1]
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e5      	bne.n	80028b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3314      	adds	r3, #20
 80028f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	613b      	str	r3, [r7, #16]
   return(result);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3314      	adds	r3, #20
 800290a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290c:	623a      	str	r2, [r7, #32]
 800290e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	69f9      	ldr	r1, [r7, #28]
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	e841 2300 	strex	r3, r2, [r1]
 8002918:	61bb      	str	r3, [r7, #24]
   return(result);
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e5      	bne.n	80028ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e00f      	b.n	800295c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d09f      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3740      	adds	r7, #64	; 0x40
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	88fa      	ldrh	r2, [r7, #6]
 800297c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2222      	movs	r2, #34	; 0x22
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b095      	sub	sp, #84	; 0x54
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	e853 3f00 	ldrex	r3, [r3]
 80029f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a08:	643a      	str	r2, [r7, #64]	; 0x40
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e5      	bne.n	80029e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	e853 3f00 	ldrex	r3, [r3]
 8002a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e5      	bne.n	8002a1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d119      	bne.n	8002a8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 0310 	bic.w	r3, r3, #16
 8002a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a78:	61ba      	str	r2, [r7, #24]
 8002a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	6979      	ldr	r1, [r7, #20]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	e841 2300 	strex	r3, r2, [r1]
 8002a84:	613b      	str	r3, [r7, #16]
   return(result);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e5      	bne.n	8002a58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a9a:	bf00      	nop
 8002a9c:	3754      	adds	r7, #84	; 0x54
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7ff fecb 	bl	800285c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b21      	cmp	r3, #33	; 0x21
 8002ae0:	d13e      	bne.n	8002b60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d114      	bne.n	8002b16 <UART_Transmit_IT+0x48>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d110      	bne.n	8002b16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	1c9a      	adds	r2, r3, #2
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	621a      	str	r2, [r3, #32]
 8002b14:	e008      	b.n	8002b28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6211      	str	r1, [r2, #32]
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4619      	mov	r1, r3
 8002b36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e000      	b.n	8002b62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
  }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fe5a 	bl	8002848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b08c      	sub	sp, #48	; 0x30
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b22      	cmp	r3, #34	; 0x22
 8002bb0:	f040 80ab 	bne.w	8002d0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbc:	d117      	bne.n	8002bee <UART_Receive_IT+0x50>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d113      	bne.n	8002bee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	1c9a      	adds	r2, r3, #2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
 8002bec:	e026      	b.n	8002c3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c00:	d007      	beq.n	8002c12 <UART_Receive_IT+0x74>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <UART_Receive_IT+0x82>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e008      	b.n	8002c32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d15a      	bne.n	8002d06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0220 	bic.w	r2, r2, #32
 8002c5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d135      	bne.n	8002cfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f023 0310 	bic.w	r3, r3, #16
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	623a      	str	r2, [r7, #32]
 8002cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	69f9      	ldr	r1, [r7, #28]
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e5      	bne.n	8002c96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d10a      	bne.n	8002cee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff fdbb 	bl	8002870 <HAL_UARTEx_RxEventCallback>
 8002cfa:	e002      	b.n	8002d02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fd fd7b 	bl	80007f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e002      	b.n	8002d0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d0a:	2302      	movs	r3, #2
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3730      	adds	r7, #48	; 0x30
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d18:	b0c0      	sub	sp, #256	; 0x100
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	68d9      	ldr	r1, [r3, #12]
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	ea40 0301 	orr.w	r3, r0, r1
 8002d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d6c:	f021 010c 	bic.w	r1, r1, #12
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8e:	6999      	ldr	r1, [r3, #24]
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	ea40 0301 	orr.w	r3, r0, r1
 8002d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b8f      	ldr	r3, [pc, #572]	; (8002fe0 <UART_SetConfig+0x2cc>)
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d005      	beq.n	8002db4 <UART_SetConfig+0xa0>
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <UART_SetConfig+0x2d0>)
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d104      	bne.n	8002dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002db4:	f7fe fee4 	bl	8001b80 <HAL_RCC_GetPCLK2Freq>
 8002db8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dbc:	e003      	b.n	8002dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dbe:	f7fe fecb 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd0:	f040 810c 	bne.w	8002fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002de6:	4622      	mov	r2, r4
 8002de8:	462b      	mov	r3, r5
 8002dea:	1891      	adds	r1, r2, r2
 8002dec:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dee:	415b      	adcs	r3, r3
 8002df0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002df6:	4621      	mov	r1, r4
 8002df8:	eb12 0801 	adds.w	r8, r2, r1
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	eb43 0901 	adc.w	r9, r3, r1
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e16:	4690      	mov	r8, r2
 8002e18:	4699      	mov	r9, r3
 8002e1a:	4623      	mov	r3, r4
 8002e1c:	eb18 0303 	adds.w	r3, r8, r3
 8002e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e24:	462b      	mov	r3, r5
 8002e26:	eb49 0303 	adc.w	r3, r9, r3
 8002e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e42:	460b      	mov	r3, r1
 8002e44:	18db      	adds	r3, r3, r3
 8002e46:	653b      	str	r3, [r7, #80]	; 0x50
 8002e48:	4613      	mov	r3, r2
 8002e4a:	eb42 0303 	adc.w	r3, r2, r3
 8002e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e58:	f7fd fa1a 	bl	8000290 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <UART_SetConfig+0x2d4>)
 8002e62:	fba3 2302 	umull	r2, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	011c      	lsls	r4, r3, #4
 8002e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	464b      	mov	r3, r9
 8002e80:	1891      	adds	r1, r2, r2
 8002e82:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e84:	415b      	adcs	r3, r3
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e92:	4649      	mov	r1, r9
 8002e94:	eb43 0b01 	adc.w	fp, r3, r1
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eac:	4692      	mov	sl, r2
 8002eae:	469b      	mov	fp, r3
 8002eb0:	4643      	mov	r3, r8
 8002eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8002eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	18db      	adds	r3, r3, r3
 8002edc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ede:	4613      	mov	r3, r2
 8002ee0:	eb42 0303 	adc.w	r3, r2, r3
 8002ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002eee:	f7fd f9cf 	bl	8000290 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <UART_SetConfig+0x2d4>)
 8002efa:	fba3 2301 	umull	r2, r3, r3, r1
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2264      	movs	r2, #100	; 0x64
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	1acb      	subs	r3, r1, r3
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <UART_SetConfig+0x2d4>)
 8002f10:	fba3 2302 	umull	r2, r3, r3, r2
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f1c:	441c      	add	r4, r3
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f22:	2200      	movs	r2, #0
 8002f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	1891      	adds	r1, r2, r2
 8002f36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f40:	4641      	mov	r1, r8
 8002f42:	1851      	adds	r1, r2, r1
 8002f44:	6339      	str	r1, [r7, #48]	; 0x30
 8002f46:	4649      	mov	r1, r9
 8002f48:	414b      	adcs	r3, r1
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f58:	4659      	mov	r1, fp
 8002f5a:	00cb      	lsls	r3, r1, #3
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f62:	4651      	mov	r1, sl
 8002f64:	00ca      	lsls	r2, r1, #3
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f74:	464b      	mov	r3, r9
 8002f76:	460a      	mov	r2, r1
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f94:	460b      	mov	r3, r1
 8002f96:	18db      	adds	r3, r3, r3
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	eb42 0303 	adc.w	r3, r2, r3
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002faa:	f7fd f971 	bl	8000290 <__aeabi_uldivmod>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <UART_SetConfig+0x2d4>)
 8002fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	2164      	movs	r1, #100	; 0x64
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	3332      	adds	r3, #50	; 0x32
 8002fc6:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <UART_SetConfig+0x2d4>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	f003 0207 	and.w	r2, r3, #7
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4422      	add	r2, r4
 8002fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fdc:	e105      	b.n	80031ea <UART_SetConfig+0x4d6>
 8002fde:	bf00      	nop
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	40011400 	.word	0x40011400
 8002fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ffe:	4642      	mov	r2, r8
 8003000:	464b      	mov	r3, r9
 8003002:	1891      	adds	r1, r2, r2
 8003004:	6239      	str	r1, [r7, #32]
 8003006:	415b      	adcs	r3, r3
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
 800300a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800300e:	4641      	mov	r1, r8
 8003010:	1854      	adds	r4, r2, r1
 8003012:	4649      	mov	r1, r9
 8003014:	eb43 0501 	adc.w	r5, r3, r1
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	00eb      	lsls	r3, r5, #3
 8003022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003026:	00e2      	lsls	r2, r4, #3
 8003028:	4614      	mov	r4, r2
 800302a:	461d      	mov	r5, r3
 800302c:	4643      	mov	r3, r8
 800302e:	18e3      	adds	r3, r4, r3
 8003030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003034:	464b      	mov	r3, r9
 8003036:	eb45 0303 	adc.w	r3, r5, r3
 800303a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800303e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800304a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800305a:	4629      	mov	r1, r5
 800305c:	008b      	lsls	r3, r1, #2
 800305e:	4621      	mov	r1, r4
 8003060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003064:	4621      	mov	r1, r4
 8003066:	008a      	lsls	r2, r1, #2
 8003068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800306c:	f7fd f910 	bl	8000290 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4b60      	ldr	r3, [pc, #384]	; (80031f8 <UART_SetConfig+0x4e4>)
 8003076:	fba3 2302 	umull	r2, r3, r3, r2
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	011c      	lsls	r4, r3, #4
 800307e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003088:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800308c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003090:	4642      	mov	r2, r8
 8003092:	464b      	mov	r3, r9
 8003094:	1891      	adds	r1, r2, r2
 8003096:	61b9      	str	r1, [r7, #24]
 8003098:	415b      	adcs	r3, r3
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a0:	4641      	mov	r1, r8
 80030a2:	1851      	adds	r1, r2, r1
 80030a4:	6139      	str	r1, [r7, #16]
 80030a6:	4649      	mov	r1, r9
 80030a8:	414b      	adcs	r3, r1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030b8:	4659      	mov	r1, fp
 80030ba:	00cb      	lsls	r3, r1, #3
 80030bc:	4651      	mov	r1, sl
 80030be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c2:	4651      	mov	r1, sl
 80030c4:	00ca      	lsls	r2, r1, #3
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	4642      	mov	r2, r8
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030d4:	464b      	mov	r3, r9
 80030d6:	460a      	mov	r2, r1
 80030d8:	eb42 0303 	adc.w	r3, r2, r3
 80030dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030f8:	4649      	mov	r1, r9
 80030fa:	008b      	lsls	r3, r1, #2
 80030fc:	4641      	mov	r1, r8
 80030fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003102:	4641      	mov	r1, r8
 8003104:	008a      	lsls	r2, r1, #2
 8003106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800310a:	f7fd f8c1 	bl	8000290 <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <UART_SetConfig+0x4e4>)
 8003114:	fba3 1302 	umull	r1, r3, r3, r2
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	2164      	movs	r1, #100	; 0x64
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	3332      	adds	r3, #50	; 0x32
 8003126:	4a34      	ldr	r2, [pc, #208]	; (80031f8 <UART_SetConfig+0x4e4>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003132:	441c      	add	r4, r3
 8003134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003138:	2200      	movs	r2, #0
 800313a:	673b      	str	r3, [r7, #112]	; 0x70
 800313c:	677a      	str	r2, [r7, #116]	; 0x74
 800313e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003142:	4642      	mov	r2, r8
 8003144:	464b      	mov	r3, r9
 8003146:	1891      	adds	r1, r2, r2
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	415b      	adcs	r3, r3
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003152:	4641      	mov	r1, r8
 8003154:	1851      	adds	r1, r2, r1
 8003156:	6039      	str	r1, [r7, #0]
 8003158:	4649      	mov	r1, r9
 800315a:	414b      	adcs	r3, r1
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800316a:	4659      	mov	r1, fp
 800316c:	00cb      	lsls	r3, r1, #3
 800316e:	4651      	mov	r1, sl
 8003170:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003174:	4651      	mov	r1, sl
 8003176:	00ca      	lsls	r2, r1, #3
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	4603      	mov	r3, r0
 800317e:	4642      	mov	r2, r8
 8003180:	189b      	adds	r3, r3, r2
 8003182:	66bb      	str	r3, [r7, #104]	; 0x68
 8003184:	464b      	mov	r3, r9
 8003186:	460a      	mov	r2, r1
 8003188:	eb42 0303 	adc.w	r3, r2, r3
 800318c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	663b      	str	r3, [r7, #96]	; 0x60
 8003198:	667a      	str	r2, [r7, #100]	; 0x64
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031a6:	4649      	mov	r1, r9
 80031a8:	008b      	lsls	r3, r1, #2
 80031aa:	4641      	mov	r1, r8
 80031ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b0:	4641      	mov	r1, r8
 80031b2:	008a      	lsls	r2, r1, #2
 80031b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031b8:	f7fd f86a 	bl	8000290 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <UART_SetConfig+0x4e4>)
 80031c2:	fba3 1302 	umull	r1, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2164      	movs	r1, #100	; 0x64
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	3332      	adds	r3, #50	; 0x32
 80031d4:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <UART_SetConfig+0x4e4>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	f003 020f 	and.w	r2, r3, #15
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4422      	add	r2, r4
 80031e8:	609a      	str	r2, [r3, #8]
}
 80031ea:	bf00      	nop
 80031ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031f0:	46bd      	mov	sp, r7
 80031f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f6:	bf00      	nop
 80031f8:	51eb851f 	.word	0x51eb851f

080031fc <__NVIC_SetPriority>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320c:	2b00      	cmp	r3, #0
 800320e:	db0a      	blt.n	8003226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	490c      	ldr	r1, [pc, #48]	; (8003248 <__NVIC_SetPriority+0x4c>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	0112      	lsls	r2, r2, #4
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	440b      	add	r3, r1
 8003220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003224:	e00a      	b.n	800323c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4908      	ldr	r1, [pc, #32]	; (800324c <__NVIC_SetPriority+0x50>)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	3b04      	subs	r3, #4
 8003234:	0112      	lsls	r2, r2, #4
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	440b      	add	r3, r1
 800323a:	761a      	strb	r2, [r3, #24]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000e100 	.word	0xe000e100
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <SysTick_Handler+0x1c>)
 8003256:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003258:	f001 ff12 	bl	8005080 <xTaskGetSchedulerState>
 800325c:	4603      	mov	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003262:	f002 fcf9 	bl	8005c58 <xPortSysTickHandler>
  }
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	e000e010 	.word	0xe000e010

08003270 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003274:	2100      	movs	r1, #0
 8003276:	f06f 0004 	mvn.w	r0, #4
 800327a:	f7ff ffbf 	bl	80031fc <__NVIC_SetPriority>
#endif
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800328a:	f3ef 8305 	mrs	r3, IPSR
 800328e:	603b      	str	r3, [r7, #0]
  return(result);
 8003290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003296:	f06f 0305 	mvn.w	r3, #5
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	e00c      	b.n	80032b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <osKernelInitialize+0x44>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <osKernelInitialize+0x44>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	e002      	b.n	80032b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032b8:	687b      	ldr	r3, [r7, #4]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	2000023c 	.word	0x2000023c

080032cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032d2:	f3ef 8305 	mrs	r3, IPSR
 80032d6:	603b      	str	r3, [r7, #0]
  return(result);
 80032d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80032de:	f06f 0305 	mvn.w	r3, #5
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	e010      	b.n	8003308 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <osKernelStart+0x48>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d109      	bne.n	8003302 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80032ee:	f7ff ffbf 	bl	8003270 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <osKernelStart+0x48>)
 80032f4:	2202      	movs	r2, #2
 80032f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80032f8:	f001 fa66 	bl	80047c8 <vTaskStartScheduler>
      stat = osOK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	e002      	b.n	8003308 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003308:	687b      	ldr	r3, [r7, #4]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000023c 	.word	0x2000023c

08003318 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b08e      	sub	sp, #56	; 0x38
 800331c:	af04      	add	r7, sp, #16
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003328:	f3ef 8305 	mrs	r3, IPSR
 800332c:	617b      	str	r3, [r7, #20]
  return(result);
 800332e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003330:	2b00      	cmp	r3, #0
 8003332:	d17e      	bne.n	8003432 <osThreadNew+0x11a>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d07b      	beq.n	8003432 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800333e:	2318      	movs	r3, #24
 8003340:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003346:	f04f 33ff 	mov.w	r3, #4294967295
 800334a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d045      	beq.n	80033de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <osThreadNew+0x48>
        name = attr->name;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <osThreadNew+0x6e>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b38      	cmp	r3, #56	; 0x38
 8003378:	d805      	bhi.n	8003386 <osThreadNew+0x6e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <osThreadNew+0x72>
        return (NULL);
 8003386:	2300      	movs	r3, #0
 8003388:	e054      	b.n	8003434 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00e      	beq.n	80033c0 <osThreadNew+0xa8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2bbb      	cmp	r3, #187	; 0xbb
 80033a8:	d90a      	bls.n	80033c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <osThreadNew+0xa8>
        mem = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e010      	b.n	80033e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10c      	bne.n	80033e2 <osThreadNew+0xca>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d108      	bne.n	80033e2 <osThreadNew+0xca>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <osThreadNew+0xca>
          mem = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
 80033dc:	e001      	b.n	80033e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d110      	bne.n	800340a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033f0:	9202      	str	r2, [sp, #8]
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6a3a      	ldr	r2, [r7, #32]
 80033fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fff6 	bl	80043f0 <xTaskCreateStatic>
 8003404:	4603      	mov	r3, r0
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	e013      	b.n	8003432 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	b29a      	uxth	r2, r3
 8003414:	f107 0310 	add.w	r3, r7, #16
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f001 f841 	bl	80044aa <xTaskCreate>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d001      	beq.n	8003432 <osThreadNew+0x11a>
            hTask = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003432:	693b      	ldr	r3, [r7, #16]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3728      	adds	r7, #40	; 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003444:	f3ef 8305 	mrs	r3, IPSR
 8003448:	60bb      	str	r3, [r7, #8]
  return(result);
 800344a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <osDelay+0x1c>
    stat = osErrorISR;
 8003450:	f06f 0305 	mvn.w	r3, #5
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e007      	b.n	8003468 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f001 f97c 	bl	8004760 <vTaskDelay>
    }
  }

  return (stat);
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af02      	add	r7, sp, #8
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003482:	f3ef 8305 	mrs	r3, IPSR
 8003486:	613b      	str	r3, [r7, #16]
  return(result);
 8003488:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800348a:	2b00      	cmp	r3, #0
 800348c:	d15f      	bne.n	800354e <osMessageQueueNew+0xdc>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05c      	beq.n	800354e <osMessageQueueNew+0xdc>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d059      	beq.n	800354e <osMessageQueueNew+0xdc>
    mem = -1;
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d029      	beq.n	80034fa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <osMessageQueueNew+0x62>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b4f      	cmp	r3, #79	; 0x4f
 80034b4:	d90e      	bls.n	80034d4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <osMessageQueueNew+0x62>
        mem = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	e014      	b.n	80034fe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d110      	bne.n	80034fe <osMessageQueueNew+0x8c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10c      	bne.n	80034fe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <osMessageQueueNew+0x8c>
          mem = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e001      	b.n	80034fe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d10b      	bne.n	800351c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2100      	movs	r1, #0
 800350e:	9100      	str	r1, [sp, #0]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fa2e 	bl	8003974 <xQueueGenericCreateStatic>
 8003518:	61f8      	str	r0, [r7, #28]
 800351a:	e008      	b.n	800352e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003522:	2200      	movs	r2, #0
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fa9c 	bl	8003a64 <xQueueGenericCreate>
 800352c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00c      	beq.n	800354e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <osMessageQueueNew+0xd0>
        name = attr->name;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e001      	b.n	8003546 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003546:	6979      	ldr	r1, [r7, #20]
 8003548:	69f8      	ldr	r0, [r7, #28]
 800354a:	f000 fef3 	bl	8004334 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800354e:	69fb      	ldr	r3, [r7, #28]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003570:	f3ef 8305 	mrs	r3, IPSR
 8003574:	617b      	str	r3, [r7, #20]
  return(result);
 8003576:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003578:	2b00      	cmp	r3, #0
 800357a:	d028      	beq.n	80035ce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <osMessageQueuePut+0x36>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <osMessageQueuePut+0x36>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800358e:	f06f 0303 	mvn.w	r3, #3
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e038      	b.n	8003608 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800359a:	f107 0210 	add.w	r2, r7, #16
 800359e:	2300      	movs	r3, #0
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	69b8      	ldr	r0, [r7, #24]
 80035a4:	f000 fbba 	bl	8003d1c <xQueueGenericSendFromISR>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80035ae:	f06f 0302 	mvn.w	r3, #2
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	e028      	b.n	8003608 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d025      	beq.n	8003608 <osMessageQueuePut+0xb0>
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <osMessageQueuePut+0xbc>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	e01c      	b.n	8003608 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <osMessageQueuePut+0x82>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80035da:	f06f 0303 	mvn.w	r3, #3
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	e012      	b.n	8003608 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035e2:	2300      	movs	r3, #0
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	69b8      	ldr	r0, [r7, #24]
 80035ea:	f000 fa99 	bl	8003b20 <xQueueGenericSend>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d009      	beq.n	8003608 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80035fa:	f06f 0301 	mvn.w	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e002      	b.n	8003608 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003602:	f06f 0302 	mvn.w	r3, #2
 8003606:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003608:	69fb      	ldr	r3, [r7, #28]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	e000ed04 	.word	0xe000ed04

08003618 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800362e:	f3ef 8305 	mrs	r3, IPSR
 8003632:	617b      	str	r3, [r7, #20]
  return(result);
 8003634:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <osMessageQueueGet+0x34>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <osMessageQueueGet+0x34>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800364c:	f06f 0303 	mvn.w	r3, #3
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	e037      	b.n	80036c4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003654:	2300      	movs	r3, #0
 8003656:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003658:	f107 0310 	add.w	r3, r7, #16
 800365c:	461a      	mov	r2, r3
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	69b8      	ldr	r0, [r7, #24]
 8003662:	f000 fcd7 	bl	8004014 <xQueueReceiveFromISR>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	d003      	beq.n	8003674 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800366c:	f06f 0302 	mvn.w	r3, #2
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e027      	b.n	80036c4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d024      	beq.n	80036c4 <osMessageQueueGet+0xac>
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <osMessageQueueGet+0xb8>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	e01b      	b.n	80036c4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <osMessageQueueGet+0x80>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003698:	f06f 0303 	mvn.w	r3, #3
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e011      	b.n	80036c4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	69b8      	ldr	r0, [r7, #24]
 80036a6:	f000 fbd5 	bl	8003e54 <xQueueReceive>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d009      	beq.n	80036c4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80036b6:	f06f 0301 	mvn.w	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e002      	b.n	80036c4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80036be:	f06f 0302 	mvn.w	r3, #2
 80036c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80036c4:	69fb      	ldr	r3, [r7, #28]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	e000ed04 	.word	0xe000ed04

080036d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <vApplicationGetIdleTaskMemory+0x2c>)
 80036e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <vApplicationGetIdleTaskMemory+0x30>)
 80036ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000240 	.word	0x20000240
 8003704:	200002fc 	.word	0x200002fc

08003708 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a07      	ldr	r2, [pc, #28]	; (8003734 <vApplicationGetTimerTaskMemory+0x2c>)
 8003718:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4a06      	ldr	r2, [pc, #24]	; (8003738 <vApplicationGetTimerTaskMemory+0x30>)
 800371e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003726:	601a      	str	r2, [r3, #0]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	200004fc 	.word	0x200004fc
 8003738:	200005b8 	.word	0x200005b8

0800373c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0208 	add.w	r2, r3, #8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f04f 32ff 	mov.w	r2, #4294967295
 8003754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0208 	add.w	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0208 	add.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d103      	bne.n	80037fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e00c      	b.n	8003818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3308      	adds	r3, #8
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e002      	b.n	800380c <vListInsert+0x2e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d2f6      	bcs.n	8003806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6892      	ldr	r2, [r2, #8]
 8003866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6852      	ldr	r2, [r2, #4]
 8003870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d103      	bne.n	8003884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038ce:	f002 f931 	bl	8005b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	3b01      	subs	r3, #1
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	441a      	add	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d114      	bne.n	800394e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01a      	beq.n	8003962 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3310      	adds	r3, #16
 8003930:	4618      	mov	r0, r3
 8003932:	f001 f9e3 	bl	8004cfc <xTaskRemoveFromEventList>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <xQueueGenericReset+0xcc>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	e009      	b.n	8003962 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3310      	adds	r3, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fef2 	bl	800373c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3324      	adds	r3, #36	; 0x24
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff feed 	bl	800373c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003962:	f002 f917 	bl	8005b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <xQueueGenericCreateStatic+0x52>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <xQueueGenericCreateStatic+0x56>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericCreateStatic+0x58>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xQueueGenericCreateStatic+0x7e>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericCreateStatic+0x82>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericCreateStatic+0x84>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	61fb      	str	r3, [r7, #28]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a12:	2350      	movs	r3, #80	; 0x50
 8003a14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b50      	cmp	r3, #80	; 0x50
 8003a1a:	d00a      	beq.n	8003a32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	61bb      	str	r3, [r7, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	e7fe      	b.n	8003a30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f83f 	bl	8003ad8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	613b      	str	r3, [r7, #16]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3350      	adds	r3, #80	; 0x50
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 f96b 	bl	8005d78 <pvPortMalloc>
 8003aa2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d011      	beq.n	8003ace <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3350      	adds	r3, #80	; 0x50
 8003ab2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f805 	bl	8003ad8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ace:	69bb      	ldr	r3, [r7, #24]
	}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d103      	bne.n	8003af4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e002      	b.n	8003afa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b06:	2101      	movs	r1, #1
 8003b08:	69b8      	ldr	r0, [r7, #24]
 8003b0a:	f7ff fecb 	bl	80038a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08e      	sub	sp, #56	; 0x38
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <xQueueGenericSend+0x32>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d103      	bne.n	8003b60 <xQueueGenericSend+0x40>
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <xQueueGenericSend+0x44>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <xQueueGenericSend+0x46>
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <xQueueGenericSend+0x60>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b7c:	bf00      	nop
 8003b7e:	e7fe      	b.n	8003b7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d103      	bne.n	8003b8e <xQueueGenericSend+0x6e>
 8003b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <xQueueGenericSend+0x72>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <xQueueGenericSend+0x74>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xQueueGenericSend+0x8e>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	623b      	str	r3, [r7, #32]
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bae:	f001 fa67 	bl	8005080 <xTaskGetSchedulerState>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <xQueueGenericSend+0x9e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <xQueueGenericSend+0xa2>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <xQueueGenericSend+0xa4>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <xQueueGenericSend+0xbe>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	61fb      	str	r3, [r7, #28]
}
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bde:	f001 ffa9 	bl	8005b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <xQueueGenericSend+0xd4>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d129      	bne.n	8003c48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfa:	f000 fa8b 	bl	8004114 <prvCopyDataToQueue>
 8003bfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	3324      	adds	r3, #36	; 0x24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f875 	bl	8004cfc <xTaskRemoveFromEventList>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <xQueueGenericSend+0x1f8>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	e00a      	b.n	8003c40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <xQueueGenericSend+0x1f8>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c40:	f001 ffa8 	bl	8005b94 <vPortExitCritical>
				return pdPASS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e063      	b.n	8003d10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c4e:	f001 ffa1 	bl	8005b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e05c      	b.n	8003d10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f8af 	bl	8004dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c6a:	f001 ff93 	bl	8005b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c6e:	f000 fe1b 	bl	80048a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c72:	f001 ff5f 	bl	8005b34 <vPortEnterCritical>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d103      	bne.n	8003c8c <xQueueGenericSend+0x16c>
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d103      	bne.n	8003ca2 <xQueueGenericSend+0x182>
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca2:	f001 ff77 	bl	8005b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca6:	1d3a      	adds	r2, r7, #4
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 f89e 	bl	8004df0 <xTaskCheckForTimeOut>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d124      	bne.n	8003d04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cbc:	f000 fb22 	bl	8004304 <prvIsQueueFull>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	3310      	adds	r3, #16
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 ffc4 	bl	8004c5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cd6:	f000 faad 	bl	8004234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cda:	f000 fdf3 	bl	80048c4 <xTaskResumeAll>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f af7c 	bne.w	8003bde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <xQueueGenericSend+0x1f8>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	e772      	b.n	8003bde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cfa:	f000 fa9b 	bl	8004234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cfe:	f000 fde1 	bl	80048c4 <xTaskResumeAll>
 8003d02:	e76c      	b.n	8003bde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d06:	f000 fa95 	bl	8004234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d0a:	f000 fddb 	bl	80048c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3738      	adds	r7, #56	; 0x38
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b090      	sub	sp, #64	; 0x40
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <xQueueGenericSendFromISR+0x3c>
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <xQueueGenericSendFromISR+0x40>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <xQueueGenericSendFromISR+0x42>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d74:	bf00      	nop
 8003d76:	e7fe      	b.n	8003d76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d103      	bne.n	8003d86 <xQueueGenericSendFromISR+0x6a>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <xQueueGenericSendFromISR+0x6e>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <xQueueGenericSendFromISR+0x70>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	623b      	str	r3, [r7, #32]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003da6:	f001 ffa7 	bl	8005cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003daa:	f3ef 8211 	mrs	r2, BASEPRI
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61fa      	str	r2, [r7, #28]
 8003dc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d302      	bcc.n	8003dd8 <xQueueGenericSendFromISR+0xbc>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d12f      	bne.n	8003e38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dee:	f000 f991 	bl	8004114 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003df2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d112      	bne.n	8003e22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d016      	beq.n	8003e32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	3324      	adds	r3, #36	; 0x24
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 ff77 	bl	8004cfc <xTaskRemoveFromEventList>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e007      	b.n	8003e32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e26:	3301      	adds	r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	b25a      	sxtb	r2, r3
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e32:	2301      	movs	r3, #1
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003e36:	e001      	b.n	8003e3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3740      	adds	r7, #64	; 0x40
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08c      	sub	sp, #48	; 0x30
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <xQueueReceive+0x30>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	623b      	str	r3, [r7, #32]
}
 8003e80:	bf00      	nop
 8003e82:	e7fe      	b.n	8003e82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <xQueueReceive+0x3e>
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <xQueueReceive+0x42>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <xQueueReceive+0x44>
 8003e96:	2300      	movs	r3, #0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xQueueReceive+0x5e>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	61fb      	str	r3, [r7, #28]
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eb2:	f001 f8e5 	bl	8005080 <xTaskGetSchedulerState>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <xQueueReceive+0x6e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <xQueueReceive+0x72>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <xQueueReceive+0x74>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <xQueueReceive+0x8e>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	61bb      	str	r3, [r7, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ee2:	f001 fe27 	bl	8005b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01f      	beq.n	8003f32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef6:	f000 f977 	bl	80041e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00f      	beq.n	8003f2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fef4 	bl	8004cfc <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f1a:	4b3d      	ldr	r3, [pc, #244]	; (8004010 <xQueueReceive+0x1bc>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f2a:	f001 fe33 	bl	8005b94 <vPortExitCritical>
				return pdPASS;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e069      	b.n	8004006 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f38:	f001 fe2c 	bl	8005b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e062      	b.n	8004006 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 ff3a 	bl	8004dc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f54:	f001 fe1e 	bl	8005b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f58:	f000 fca6 	bl	80048a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f5c:	f001 fdea 	bl	8005b34 <vPortEnterCritical>
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f66:	b25b      	sxtb	r3, r3
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d103      	bne.n	8003f76 <xQueueReceive+0x122>
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d103      	bne.n	8003f8c <xQueueReceive+0x138>
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8c:	f001 fe02 	bl	8005b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f90:	1d3a      	adds	r2, r7, #4
 8003f92:	f107 0310 	add.w	r3, r7, #16
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 ff29 	bl	8004df0 <xTaskCheckForTimeOut>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d123      	bne.n	8003fec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa6:	f000 f997 	bl	80042d8 <prvIsQueueEmpty>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d017      	beq.n	8003fe0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	3324      	adds	r3, #36	; 0x24
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fe4f 	bl	8004c5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fc0:	f000 f938 	bl	8004234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fc4:	f000 fc7e 	bl	80048c4 <xTaskResumeAll>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d189      	bne.n	8003ee2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xQueueReceive+0x1bc>)
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	e780      	b.n	8003ee2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe2:	f000 f927 	bl	8004234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe6:	f000 fc6d 	bl	80048c4 <xTaskResumeAll>
 8003fea:	e77a      	b.n	8003ee2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fee:	f000 f921 	bl	8004234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff2:	f000 fc67 	bl	80048c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff8:	f000 f96e 	bl	80042d8 <prvIsQueueEmpty>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f43f af6f 	beq.w	8003ee2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004006:	4618      	mov	r0, r3
 8004008:	3730      	adds	r7, #48	; 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08e      	sub	sp, #56	; 0x38
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	623b      	str	r3, [r7, #32]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <xQueueReceiveFromISR+0x3a>
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <xQueueReceiveFromISR+0x3e>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueReceiveFromISR+0x40>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	61fb      	str	r3, [r7, #28]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800406e:	f001 fe43 	bl	8005cf8 <vPortValidateInterruptPriority>
	__asm volatile
 8004072:	f3ef 8211 	mrs	r2, BASEPRI
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	61ba      	str	r2, [r7, #24]
 8004088:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800408a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02f      	beq.n	80040fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040a8:	f000 f89e 	bl	80041e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	1e5a      	subs	r2, r3, #1
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d112      	bne.n	80040e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	3310      	adds	r3, #16
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fe16 	bl	8004cfc <xTaskRemoveFromEventList>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00e      	beq.n	80040f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e007      	b.n	80040f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e8:	3301      	adds	r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80040f4:	2301      	movs	r3, #1
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
 80040f8:	e001      	b.n	80040fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f383 8811 	msr	BASEPRI, r3
}
 8004108:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800410a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800410c:	4618      	mov	r0, r3
 800410e:	3738      	adds	r7, #56	; 0x38
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d14d      	bne.n	80041d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 ffbc 	bl	80050bc <xTaskPriorityDisinherit>
 8004144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e043      	b.n	80041d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d119      	bne.n	8004188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6858      	ldr	r0, [r3, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	461a      	mov	r2, r3
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	f002 f820 	bl	80061a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	441a      	add	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	d32b      	bcc.n	80041d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	e026      	b.n	80041d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68d8      	ldr	r0, [r3, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	461a      	mov	r2, r3
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	f002 f806 	bl	80061a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	425b      	negs	r3, r3
 80041a2:	441a      	add	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d207      	bcs.n	80041c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	425b      	negs	r3, r3
 80041be:	441a      	add	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d105      	bne.n	80041d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041de:	697b      	ldr	r3, [r7, #20]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d018      	beq.n	800422c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	441a      	add	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d303      	bcc.n	800421c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68d9      	ldr	r1, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	461a      	mov	r2, r3
 8004226:	6838      	ldr	r0, [r7, #0]
 8004228:	f001 ffbc 	bl	80061a4 <memcpy>
	}
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800423c:	f001 fc7a 	bl	8005b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004248:	e011      	b.n	800426e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3324      	adds	r3, #36	; 0x24
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fd50 	bl	8004cfc <xTaskRemoveFromEventList>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004262:	f000 fe27 	bl	8004eb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	3b01      	subs	r3, #1
 800426a:	b2db      	uxtb	r3, r3
 800426c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800426e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004272:	2b00      	cmp	r3, #0
 8004274:	dce9      	bgt.n	800424a <prvUnlockQueue+0x16>
 8004276:	e000      	b.n	800427a <prvUnlockQueue+0x46>
					break;
 8004278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004282:	f001 fc87 	bl	8005b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004286:	f001 fc55 	bl	8005b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004292:	e011      	b.n	80042b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d012      	beq.n	80042c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3310      	adds	r3, #16
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fd2b 	bl	8004cfc <xTaskRemoveFromEventList>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042ac:	f000 fe02 	bl	8004eb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042b0:	7bbb      	ldrb	r3, [r7, #14]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	dce9      	bgt.n	8004294 <prvUnlockQueue+0x60>
 80042c0:	e000      	b.n	80042c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042cc:	f001 fc62 	bl	8005b94 <vPortExitCritical>
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042e0:	f001 fc28 	bl	8005b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e001      	b.n	80042f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042f6:	f001 fc4d 	bl	8005b94 <vPortExitCritical>

	return xReturn;
 80042fa:	68fb      	ldr	r3, [r7, #12]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800430c:	f001 fc12 	bl	8005b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	429a      	cmp	r2, r3
 800431a:	d102      	bne.n	8004322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e001      	b.n	8004326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004326:	f001 fc35 	bl	8005b94 <vPortExitCritical>

	return xReturn;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e014      	b.n	800436e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004344:	4a0f      	ldr	r2, [pc, #60]	; (8004384 <vQueueAddToRegistry+0x50>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004350:	490c      	ldr	r1, [pc, #48]	; (8004384 <vQueueAddToRegistry+0x50>)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <vQueueAddToRegistry+0x50>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004366:	e006      	b.n	8004376 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b07      	cmp	r3, #7
 8004372:	d9e7      	bls.n	8004344 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	200009b8 	.word	0x200009b8

08004388 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004398:	f001 fbcc 	bl	8005b34 <vPortEnterCritical>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d103      	bne.n	80043b2 <vQueueWaitForMessageRestricted+0x2a>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d103      	bne.n	80043c8 <vQueueWaitForMessageRestricted+0x40>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c8:	f001 fbe4 	bl	8005b94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fc61 	bl	8004ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043e2:	6978      	ldr	r0, [r7, #20]
 80043e4:	f7ff ff26 	bl	8004234 <prvUnlockQueue>
	}
 80043e8:	bf00      	nop
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08e      	sub	sp, #56	; 0x38
 80043f4:	af04      	add	r7, sp, #16
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	623b      	str	r3, [r7, #32]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <xTaskCreateStatic+0x46>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	61fb      	str	r3, [r7, #28]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004436:	23bc      	movs	r3, #188	; 0xbc
 8004438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2bbc      	cmp	r3, #188	; 0xbc
 800443e:	d00a      	beq.n	8004456 <xTaskCreateStatic+0x66>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61bb      	str	r3, [r7, #24]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004456:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01e      	beq.n	800449c <xTaskCreateStatic+0xac>
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800446c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	2202      	movs	r2, #2
 8004472:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004476:	2300      	movs	r3, #0
 8004478:	9303      	str	r3, [sp, #12]
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	9302      	str	r3, [sp, #8]
 800447e:	f107 0314 	add.w	r3, r7, #20
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f850 	bl	8004534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004496:	f000 f8f3 	bl	8004680 <prvAddNewTaskToReadyList>
 800449a:	e001      	b.n	80044a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044a0:	697b      	ldr	r3, [r7, #20]
	}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3728      	adds	r7, #40	; 0x28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b08c      	sub	sp, #48	; 0x30
 80044ae:	af04      	add	r7, sp, #16
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fc5a 	bl	8005d78 <pvPortMalloc>
 80044c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00e      	beq.n	80044ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044cc:	20bc      	movs	r0, #188	; 0xbc
 80044ce:	f001 fc53 	bl	8005d78 <pvPortMalloc>
 80044d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
 80044e0:	e005      	b.n	80044ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f001 fd14 	bl	8005f10 <vPortFree>
 80044e8:	e001      	b.n	80044ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d017      	beq.n	8004524 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	2300      	movs	r3, #0
 8004500:	9303      	str	r3, [sp, #12]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	9302      	str	r3, [sp, #8]
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f80e 	bl	8004534 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004518:	69f8      	ldr	r0, [r7, #28]
 800451a:	f000 f8b1 	bl	8004680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e002      	b.n	800452a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800452a:	69bb      	ldr	r3, [r7, #24]
	}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	461a      	mov	r2, r3
 800454c:	21a5      	movs	r1, #165	; 0xa5
 800454e:	f001 fe37 	bl	80061c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800455c:	3b01      	subs	r3, #1
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	617b      	str	r3, [r7, #20]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01f      	beq.n	80045d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e012      	b.n	80045be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	4413      	add	r3, r2
 800459e:	7819      	ldrb	r1, [r3, #0]
 80045a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	3334      	adds	r3, #52	; 0x34
 80045a8:	460a      	mov	r2, r1
 80045aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b0f      	cmp	r3, #15
 80045c2:	d9e9      	bls.n	8004598 <prvInitialiseNewTask+0x64>
 80045c4:	e000      	b.n	80045c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80045c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d0:	e003      	b.n	80045da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	2b37      	cmp	r3, #55	; 0x37
 80045de:	d901      	bls.n	80045e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045e0:	2337      	movs	r3, #55	; 0x37
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	2200      	movs	r2, #0
 80045f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff f8be 	bl	800377c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	3318      	adds	r3, #24
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff f8b9 	bl	800377c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	2200      	movs	r2, #0
 8004624:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	2200      	movs	r2, #0
 800462c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	3354      	adds	r3, #84	; 0x54
 8004634:	2260      	movs	r2, #96	; 0x60
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f001 fdc1 	bl	80061c0 <memset>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	4a0c      	ldr	r2, [pc, #48]	; (8004674 <prvInitialiseNewTask+0x140>)
 8004642:	659a      	str	r2, [r3, #88]	; 0x58
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <prvInitialiseNewTask+0x144>)
 8004648:	65da      	str	r2, [r3, #92]	; 0x5c
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	4a0b      	ldr	r2, [pc, #44]	; (800467c <prvInitialiseNewTask+0x148>)
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	69b8      	ldr	r0, [r7, #24]
 8004656:	f001 f941 	bl	80058dc <pxPortInitialiseStack>
 800465a:	4602      	mov	r2, r0
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800466c:	bf00      	nop
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	08006d58 	.word	0x08006d58
 8004678:	08006d78 	.word	0x08006d78
 800467c:	08006d38 	.word	0x08006d38

08004680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004688:	f001 fa54 	bl	8005b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800468c:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <prvAddNewTaskToReadyList+0xc4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <prvAddNewTaskToReadyList+0xc4>)
 8004694:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004696:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <prvAddNewTaskToReadyList+0xc8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800469e:	4a2a      	ldr	r2, [pc, #168]	; (8004748 <prvAddNewTaskToReadyList+0xc8>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046a4:	4b27      	ldr	r3, [pc, #156]	; (8004744 <prvAddNewTaskToReadyList+0xc4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d110      	bne.n	80046ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046ac:	f000 fc26 	bl	8004efc <prvInitialiseTaskLists>
 80046b0:	e00d      	b.n	80046ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <prvAddNewTaskToReadyList+0xcc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <prvAddNewTaskToReadyList+0xc8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d802      	bhi.n	80046ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046c8:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <prvAddNewTaskToReadyList+0xc8>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046ce:	4b20      	ldr	r3, [pc, #128]	; (8004750 <prvAddNewTaskToReadyList+0xd0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <prvAddNewTaskToReadyList+0xd0>)
 80046d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <prvAddNewTaskToReadyList+0xd0>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e4:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <prvAddNewTaskToReadyList+0xd4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d903      	bls.n	80046f4 <prvAddNewTaskToReadyList+0x74>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4a18      	ldr	r2, [pc, #96]	; (8004754 <prvAddNewTaskToReadyList+0xd4>)
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4a15      	ldr	r2, [pc, #84]	; (8004758 <prvAddNewTaskToReadyList+0xd8>)
 8004702:	441a      	add	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7ff f843 	bl	8003796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004710:	f001 fa40 	bl	8005b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <prvAddNewTaskToReadyList+0xcc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00e      	beq.n	800473a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <prvAddNewTaskToReadyList+0xc8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	429a      	cmp	r2, r3
 8004728:	d207      	bcs.n	800473a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <prvAddNewTaskToReadyList+0xdc>)
 800472c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000ecc 	.word	0x20000ecc
 8004748:	200009f8 	.word	0x200009f8
 800474c:	20000ed8 	.word	0x20000ed8
 8004750:	20000ee8 	.word	0x20000ee8
 8004754:	20000ed4 	.word	0x20000ed4
 8004758:	200009fc 	.word	0x200009fc
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d017      	beq.n	80047a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <vTaskDelay+0x60>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <vTaskDelay+0x30>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60bb      	str	r3, [r7, #8]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004790:	f000 f88a 	bl	80048a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004794:	2100      	movs	r1, #0
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fcfe 	bl	8005198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800479c:	f000 f892 	bl	80048c4 <xTaskResumeAll>
 80047a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <vTaskDelay+0x64>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20000ef4 	.word	0x20000ef4
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047d6:	463a      	mov	r2, r7
 80047d8:	1d39      	adds	r1, r7, #4
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe ff78 	bl	80036d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	9202      	str	r2, [sp, #8]
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2300      	movs	r3, #0
 80047f4:	460a      	mov	r2, r1
 80047f6:	4924      	ldr	r1, [pc, #144]	; (8004888 <vTaskStartScheduler+0xc0>)
 80047f8:	4824      	ldr	r0, [pc, #144]	; (800488c <vTaskStartScheduler+0xc4>)
 80047fa:	f7ff fdf9 	bl	80043f0 <xTaskCreateStatic>
 80047fe:	4603      	mov	r3, r0
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <vTaskStartScheduler+0xc8>)
 8004802:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <vTaskStartScheduler+0xc8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800480c:	2301      	movs	r3, #1
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e001      	b.n	8004816 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d102      	bne.n	8004822 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800481c:	f000 fd10 	bl	8005240 <xTimerCreateTimerTask>
 8004820:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d11b      	bne.n	8004860 <vTaskStartScheduler+0x98>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	613b      	str	r3, [r7, #16]
}
 800483a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800483c:	4b15      	ldr	r3, [pc, #84]	; (8004894 <vTaskStartScheduler+0xcc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3354      	adds	r3, #84	; 0x54
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <vTaskStartScheduler+0xd0>)
 8004844:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <vTaskStartScheduler+0xd4>)
 8004848:	f04f 32ff 	mov.w	r2, #4294967295
 800484c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <vTaskStartScheduler+0xd8>)
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004854:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <vTaskStartScheduler+0xdc>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800485a:	f001 f8c9 	bl	80059f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800485e:	e00e      	b.n	800487e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d10a      	bne.n	800487e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60fb      	str	r3, [r7, #12]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <vTaskStartScheduler+0xb4>
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	08006c90 	.word	0x08006c90
 800488c:	08004ecd 	.word	0x08004ecd
 8004890:	20000ef0 	.word	0x20000ef0
 8004894:	200009f8 	.word	0x200009f8
 8004898:	20000014 	.word	0x20000014
 800489c:	20000eec 	.word	0x20000eec
 80048a0:	20000ed8 	.word	0x20000ed8
 80048a4:	20000ed0 	.word	0x20000ed0

080048a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <vTaskSuspendAll+0x18>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <vTaskSuspendAll+0x18>)
 80048b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20000ef4 	.word	0x20000ef4

080048c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048d2:	4b42      	ldr	r3, [pc, #264]	; (80049dc <xTaskResumeAll+0x118>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	603b      	str	r3, [r7, #0]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048f0:	f001 f920 	bl	8005b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048f4:	4b39      	ldr	r3, [pc, #228]	; (80049dc <xTaskResumeAll+0x118>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	4a38      	ldr	r2, [pc, #224]	; (80049dc <xTaskResumeAll+0x118>)
 80048fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fe:	4b37      	ldr	r3, [pc, #220]	; (80049dc <xTaskResumeAll+0x118>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d162      	bne.n	80049cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004906:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <xTaskResumeAll+0x11c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d05e      	beq.n	80049cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800490e:	e02f      	b.n	8004970 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <xTaskResumeAll+0x120>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3318      	adds	r3, #24
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe ff97 	bl	8003850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3304      	adds	r3, #4
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe ff92 	bl	8003850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <xTaskResumeAll+0x124>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <xTaskResumeAll+0x7c>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <xTaskResumeAll+0x124>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4a27      	ldr	r2, [pc, #156]	; (80049ec <xTaskResumeAll+0x128>)
 800494e:	441a      	add	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7fe ff1d 	bl	8003796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004960:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <xTaskResumeAll+0x12c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800496a:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <xTaskResumeAll+0x130>)
 800496c:	2201      	movs	r2, #1
 800496e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004970:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <xTaskResumeAll+0x120>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1cb      	bne.n	8004910 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800497e:	f000 fb5f 	bl	8005040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004982:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <xTaskResumeAll+0x134>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d010      	beq.n	80049b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800498e:	f000 f847 	bl	8004a20 <xTaskIncrementTick>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004998:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <xTaskResumeAll+0x130>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f1      	bne.n	800498e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <xTaskResumeAll+0x134>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <xTaskResumeAll+0x130>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049b8:	2301      	movs	r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <xTaskResumeAll+0x138>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f001 f8e2 	bl	8005b94 <vPortExitCritical>

	return xAlreadyYielded;
 80049d0:	68bb      	ldr	r3, [r7, #8]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000ef4 	.word	0x20000ef4
 80049e0:	20000ecc 	.word	0x20000ecc
 80049e4:	20000e8c 	.word	0x20000e8c
 80049e8:	20000ed4 	.word	0x20000ed4
 80049ec:	200009fc 	.word	0x200009fc
 80049f0:	200009f8 	.word	0x200009f8
 80049f4:	20000ee0 	.word	0x20000ee0
 80049f8:	20000edc 	.word	0x20000edc
 80049fc:	e000ed04 	.word	0xe000ed04

08004a00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <xTaskGetTickCount+0x1c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a0c:	687b      	ldr	r3, [r7, #4]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000ed0 	.word	0x20000ed0

08004a20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a2a:	4b4f      	ldr	r3, [pc, #316]	; (8004b68 <xTaskIncrementTick+0x148>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 808f 	bne.w	8004b52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a34:	4b4d      	ldr	r3, [pc, #308]	; (8004b6c <xTaskIncrementTick+0x14c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a3c:	4a4b      	ldr	r2, [pc, #300]	; (8004b6c <xTaskIncrementTick+0x14c>)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d120      	bne.n	8004a8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a48:	4b49      	ldr	r3, [pc, #292]	; (8004b70 <xTaskIncrementTick+0x150>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	603b      	str	r3, [r7, #0]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <xTaskIncrementTick+0x46>
 8004a68:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <xTaskIncrementTick+0x150>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <xTaskIncrementTick+0x154>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a3f      	ldr	r2, [pc, #252]	; (8004b70 <xTaskIncrementTick+0x150>)
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4a3f      	ldr	r2, [pc, #252]	; (8004b74 <xTaskIncrementTick+0x154>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <xTaskIncrementTick+0x158>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <xTaskIncrementTick+0x158>)
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	f000 fadb 	bl	8005040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a8a:	4b3c      	ldr	r3, [pc, #240]	; (8004b7c <xTaskIncrementTick+0x15c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d349      	bcc.n	8004b28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a94:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <xTaskIncrementTick+0x150>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a9e:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <xTaskIncrementTick+0x15c>)
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa4:	601a      	str	r2, [r3, #0]
					break;
 8004aa6:	e03f      	b.n	8004b28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa8:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <xTaskIncrementTick+0x150>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d203      	bcs.n	8004ac8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ac0:	4a2e      	ldr	r2, [pc, #184]	; (8004b7c <xTaskIncrementTick+0x15c>)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ac6:	e02f      	b.n	8004b28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe febf 	bl	8003850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3318      	adds	r3, #24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe feb6 	bl	8003850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <xTaskIncrementTick+0x160>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d903      	bls.n	8004af8 <xTaskIncrementTick+0xd8>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <xTaskIncrementTick+0x160>)
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <xTaskIncrementTick+0x164>)
 8004b06:	441a      	add	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe fe41 	bl	8003796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <xTaskIncrementTick+0x168>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d3b8      	bcc.n	8004a94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b26:	e7b5      	b.n	8004a94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <xTaskIncrementTick+0x168>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	4915      	ldr	r1, [pc, #84]	; (8004b84 <xTaskIncrementTick+0x164>)
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d901      	bls.n	8004b44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <xTaskIncrementTick+0x16c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	e004      	b.n	8004b5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b52:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <xTaskIncrementTick+0x170>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	4a0d      	ldr	r2, [pc, #52]	; (8004b90 <xTaskIncrementTick+0x170>)
 8004b5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b5c:	697b      	ldr	r3, [r7, #20]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000ef4 	.word	0x20000ef4
 8004b6c:	20000ed0 	.word	0x20000ed0
 8004b70:	20000e84 	.word	0x20000e84
 8004b74:	20000e88 	.word	0x20000e88
 8004b78:	20000ee4 	.word	0x20000ee4
 8004b7c:	20000eec 	.word	0x20000eec
 8004b80:	20000ed4 	.word	0x20000ed4
 8004b84:	200009fc 	.word	0x200009fc
 8004b88:	200009f8 	.word	0x200009f8
 8004b8c:	20000ee0 	.word	0x20000ee0
 8004b90:	20000edc 	.word	0x20000edc

08004b94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b9a:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <vTaskSwitchContext+0xb0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ba2:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <vTaskSwitchContext+0xb4>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ba8:	e046      	b.n	8004c38 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <vTaskSwitchContext+0xb4>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb0:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <vTaskSwitchContext+0xb8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e010      	b.n	8004bda <vTaskSwitchContext+0x46>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	607b      	str	r3, [r7, #4]
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <vTaskSwitchContext+0x3e>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	491d      	ldr	r1, [pc, #116]	; (8004c50 <vTaskSwitchContext+0xbc>)
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0e4      	beq.n	8004bb8 <vTaskSwitchContext+0x24>
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <vTaskSwitchContext+0xbc>)
 8004bfa:	4413      	add	r3, r2
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d104      	bne.n	8004c1e <vTaskSwitchContext+0x8a>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a0b      	ldr	r2, [pc, #44]	; (8004c54 <vTaskSwitchContext+0xc0>)
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <vTaskSwitchContext+0xb8>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <vTaskSwitchContext+0xc0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3354      	adds	r3, #84	; 0x54
 8004c34:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <vTaskSwitchContext+0xc4>)
 8004c36:	6013      	str	r3, [r2, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	20000ef4 	.word	0x20000ef4
 8004c48:	20000ee0 	.word	0x20000ee0
 8004c4c:	20000ed4 	.word	0x20000ed4
 8004c50:	200009fc 	.word	0x200009fc
 8004c54:	200009f8 	.word	0x200009f8
 8004c58:	20000014 	.word	0x20000014

08004c5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	60fb      	str	r3, [r7, #12]
}
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c82:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <vTaskPlaceOnEventList+0x44>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3318      	adds	r3, #24
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe fda7 	bl	80037de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c90:	2101      	movs	r1, #1
 8004c92:	6838      	ldr	r0, [r7, #0]
 8004c94:	f000 fa80 	bl	8005198 <prvAddCurrentTaskToDelayedList>
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	200009f8 	.word	0x200009f8

08004ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	617b      	str	r3, [r7, #20]
}
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7fe fd5e 	bl	8003796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	68b8      	ldr	r0, [r7, #8]
 8004cea:	f000 fa55 	bl	8005198 <prvAddCurrentTaskToDelayedList>
	}
 8004cee:	bf00      	nop
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200009f8 	.word	0x200009f8

08004cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60fb      	str	r3, [r7, #12]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	3318      	adds	r3, #24
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fd8f 	bl	8003850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d32:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <xTaskRemoveFromEventList+0xb0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11d      	bne.n	8004d76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fd86 	bl	8003850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <xTaskRemoveFromEventList+0xb4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d903      	bls.n	8004d58 <xTaskRemoveFromEventList+0x5c>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <xTaskRemoveFromEventList+0xb4>)
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4a13      	ldr	r2, [pc, #76]	; (8004db4 <xTaskRemoveFromEventList+0xb8>)
 8004d66:	441a      	add	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7fe fd11 	bl	8003796 <vListInsertEnd>
 8004d74:	e005      	b.n	8004d82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	3318      	adds	r3, #24
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	480e      	ldr	r0, [pc, #56]	; (8004db8 <xTaskRemoveFromEventList+0xbc>)
 8004d7e:	f7fe fd0a 	bl	8003796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <xTaskRemoveFromEventList+0xc0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d905      	bls.n	8004d9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <xTaskRemoveFromEventList+0xc4>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e001      	b.n	8004da0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004da0:	697b      	ldr	r3, [r7, #20]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000ef4 	.word	0x20000ef4
 8004db0:	20000ed4 	.word	0x20000ed4
 8004db4:	200009fc 	.word	0x200009fc
 8004db8:	20000e8c 	.word	0x20000e8c
 8004dbc:	200009f8 	.word	0x200009f8
 8004dc0:	20000ee0 	.word	0x20000ee0

08004dc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <vTaskInternalSetTimeOutState+0x24>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <vTaskInternalSetTimeOutState+0x28>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	20000ee4 	.word	0x20000ee4
 8004dec:	20000ed0 	.word	0x20000ed0

08004df0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	613b      	str	r3, [r7, #16]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60fb      	str	r3, [r7, #12]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e32:	f000 fe7f 	bl	8005b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <xTaskCheckForTimeOut+0xbc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d102      	bne.n	8004e56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	e023      	b.n	8004e9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <xTaskCheckForTimeOut+0xc0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d007      	beq.n	8004e72 <xTaskCheckForTimeOut+0x82>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d302      	bcc.n	8004e72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	e015      	b.n	8004e9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d20b      	bcs.n	8004e94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ff9b 	bl	8004dc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e004      	b.n	8004e9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e9e:	f000 fe79 	bl	8005b94 <vPortExitCritical>

	return xReturn;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000ed0 	.word	0x20000ed0
 8004eb0:	20000ee4 	.word	0x20000ee4

08004eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <vTaskMissedYield+0x14>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	20000ee0 	.word	0x20000ee0

08004ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ed4:	f000 f852 	bl	8004f7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ed8:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <prvIdleTask+0x28>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d9f9      	bls.n	8004ed4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <prvIdleTask+0x2c>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ef0:	e7f0      	b.n	8004ed4 <prvIdleTask+0x8>
 8004ef2:	bf00      	nop
 8004ef4:	200009fc 	.word	0x200009fc
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	e00c      	b.n	8004f22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4a12      	ldr	r2, [pc, #72]	; (8004f5c <prvInitialiseTaskLists+0x60>)
 8004f14:	4413      	add	r3, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fc10 	bl	800373c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b37      	cmp	r3, #55	; 0x37
 8004f26:	d9ef      	bls.n	8004f08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f28:	480d      	ldr	r0, [pc, #52]	; (8004f60 <prvInitialiseTaskLists+0x64>)
 8004f2a:	f7fe fc07 	bl	800373c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f2e:	480d      	ldr	r0, [pc, #52]	; (8004f64 <prvInitialiseTaskLists+0x68>)
 8004f30:	f7fe fc04 	bl	800373c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f34:	480c      	ldr	r0, [pc, #48]	; (8004f68 <prvInitialiseTaskLists+0x6c>)
 8004f36:	f7fe fc01 	bl	800373c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f3a:	480c      	ldr	r0, [pc, #48]	; (8004f6c <prvInitialiseTaskLists+0x70>)
 8004f3c:	f7fe fbfe 	bl	800373c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f40:	480b      	ldr	r0, [pc, #44]	; (8004f70 <prvInitialiseTaskLists+0x74>)
 8004f42:	f7fe fbfb 	bl	800373c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <prvInitialiseTaskLists+0x78>)
 8004f48:	4a05      	ldr	r2, [pc, #20]	; (8004f60 <prvInitialiseTaskLists+0x64>)
 8004f4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <prvInitialiseTaskLists+0x7c>)
 8004f4e:	4a05      	ldr	r2, [pc, #20]	; (8004f64 <prvInitialiseTaskLists+0x68>)
 8004f50:	601a      	str	r2, [r3, #0]
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200009fc 	.word	0x200009fc
 8004f60:	20000e5c 	.word	0x20000e5c
 8004f64:	20000e70 	.word	0x20000e70
 8004f68:	20000e8c 	.word	0x20000e8c
 8004f6c:	20000ea0 	.word	0x20000ea0
 8004f70:	20000eb8 	.word	0x20000eb8
 8004f74:	20000e84 	.word	0x20000e84
 8004f78:	20000e88 	.word	0x20000e88

08004f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f82:	e019      	b.n	8004fb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f84:	f000 fdd6 	bl	8005b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f88:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <prvCheckTasksWaitingTermination+0x50>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe fc5b 	bl	8003850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <prvCheckTasksWaitingTermination+0x54>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <prvCheckTasksWaitingTermination+0x54>)
 8004fa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <prvCheckTasksWaitingTermination+0x58>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	4a0a      	ldr	r2, [pc, #40]	; (8004fd4 <prvCheckTasksWaitingTermination+0x58>)
 8004fac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fae:	f000 fdf1 	bl	8005b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f810 	bl	8004fd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <prvCheckTasksWaitingTermination+0x58>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e1      	bne.n	8004f84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000ea0 	.word	0x20000ea0
 8004fd0:	20000ecc 	.word	0x20000ecc
 8004fd4:	20000eb4 	.word	0x20000eb4

08004fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3354      	adds	r3, #84	; 0x54
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 f995 	bl	8006314 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d108      	bne.n	8005006 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 ff89 	bl	8005f10 <vPortFree>
				vPortFree( pxTCB );
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 ff86 	bl	8005f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005004:	e018      	b.n	8005038 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800500c:	2b01      	cmp	r3, #1
 800500e:	d103      	bne.n	8005018 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 ff7d 	bl	8005f10 <vPortFree>
	}
 8005016:	e00f      	b.n	8005038 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800501e:	2b02      	cmp	r3, #2
 8005020:	d00a      	beq.n	8005038 <prvDeleteTCB+0x60>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	60fb      	str	r3, [r7, #12]
}
 8005034:	bf00      	nop
 8005036:	e7fe      	b.n	8005036 <prvDeleteTCB+0x5e>
	}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvResetNextTaskUnblockTime+0x38>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <prvResetNextTaskUnblockTime+0x3c>)
 8005052:	f04f 32ff 	mov.w	r2, #4294967295
 8005056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005058:	e008      	b.n	800506c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505a:	4b07      	ldr	r3, [pc, #28]	; (8005078 <prvResetNextTaskUnblockTime+0x38>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a04      	ldr	r2, [pc, #16]	; (800507c <prvResetNextTaskUnblockTime+0x3c>)
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20000e84 	.word	0x20000e84
 800507c:	20000eec 	.word	0x20000eec

08005080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <xTaskGetSchedulerState+0x34>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800508e:	2301      	movs	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	e008      	b.n	80050a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <xTaskGetSchedulerState+0x38>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800509c:	2302      	movs	r3, #2
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	e001      	b.n	80050a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050a6:	687b      	ldr	r3, [r7, #4]
	}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000ed8 	.word	0x20000ed8
 80050b8:	20000ef4 	.word	0x20000ef4

080050bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d056      	beq.n	8005180 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050d2:	4b2e      	ldr	r3, [pc, #184]	; (800518c <xTaskPriorityDisinherit+0xd0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d00a      	beq.n	80050f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60bb      	str	r3, [r7, #8]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	429a      	cmp	r2, r3
 8005124:	d02c      	beq.n	8005180 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512a:	2b00      	cmp	r3, #0
 800512c:	d128      	bne.n	8005180 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fb8c 	bl	8003850 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xTaskPriorityDisinherit+0xd4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d903      	bls.n	8005160 <xTaskPriorityDisinherit+0xa4>
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <xTaskPriorityDisinherit+0xd4>)
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4a09      	ldr	r2, [pc, #36]	; (8005194 <xTaskPriorityDisinherit+0xd8>)
 800516e:	441a      	add	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f7fe fb0d 	bl	8003796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005180:	697b      	ldr	r3, [r7, #20]
	}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200009f8 	.word	0x200009f8
 8005190:	20000ed4 	.word	0x20000ed4
 8005194:	200009fc 	.word	0x200009fc

08005198 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051a2:	4b21      	ldr	r3, [pc, #132]	; (8005228 <prvAddCurrentTaskToDelayedList+0x90>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fb4e 	bl	8003850 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d10a      	bne.n	80051d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4819      	ldr	r0, [pc, #100]	; (8005230 <prvAddCurrentTaskToDelayedList+0x98>)
 80051cc:	f7fe fae3 	bl	8003796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051d0:	e026      	b.n	8005220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d209      	bcs.n	80051fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b0f      	ldr	r3, [pc, #60]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe faf1 	bl	80037de <vListInsert>
}
 80051fc:	e010      	b.n	8005220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051fe:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fe fae7 	bl	80037de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d202      	bcs.n	8005220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800521a:	4a08      	ldr	r2, [pc, #32]	; (800523c <prvAddCurrentTaskToDelayedList+0xa4>)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000ed0 	.word	0x20000ed0
 800522c:	200009f8 	.word	0x200009f8
 8005230:	20000eb8 	.word	0x20000eb8
 8005234:	20000e88 	.word	0x20000e88
 8005238:	20000e84 	.word	0x20000e84
 800523c:	20000eec 	.word	0x20000eec

08005240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800524a:	f000 fb07 	bl	800585c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800524e:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <xTimerCreateTimerTask+0x80>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d021      	beq.n	800529a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800525e:	1d3a      	adds	r2, r7, #4
 8005260:	f107 0108 	add.w	r1, r7, #8
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fa4d 	bl	8003708 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	9202      	str	r2, [sp, #8]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	2302      	movs	r3, #2
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	460a      	mov	r2, r1
 8005280:	4910      	ldr	r1, [pc, #64]	; (80052c4 <xTimerCreateTimerTask+0x84>)
 8005282:	4811      	ldr	r0, [pc, #68]	; (80052c8 <xTimerCreateTimerTask+0x88>)
 8005284:	f7ff f8b4 	bl	80043f0 <xTaskCreateStatic>
 8005288:	4603      	mov	r3, r0
 800528a:	4a10      	ldr	r2, [pc, #64]	; (80052cc <xTimerCreateTimerTask+0x8c>)
 800528c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <xTimerCreateTimerTask+0x8c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005296:	2301      	movs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	613b      	str	r3, [r7, #16]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052b6:	697b      	ldr	r3, [r7, #20]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000f28 	.word	0x20000f28
 80052c4:	08006c98 	.word	0x08006c98
 80052c8:	08005405 	.word	0x08005405
 80052cc:	20000f2c 	.word	0x20000f2c

080052d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	623b      	str	r3, [r7, #32]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <xTimerGenericCommand+0x98>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02a      	beq.n	800535c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b05      	cmp	r3, #5
 8005316:	dc18      	bgt.n	800534a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005318:	f7ff feb2 	bl	8005080 <xTaskGetSchedulerState>
 800531c:	4603      	mov	r3, r0
 800531e:	2b02      	cmp	r3, #2
 8005320:	d109      	bne.n	8005336 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <xTimerGenericCommand+0x98>)
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f107 0110 	add.w	r1, r7, #16
 800532a:	2300      	movs	r3, #0
 800532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532e:	f7fe fbf7 	bl	8003b20 <xQueueGenericSend>
 8005332:	6278      	str	r0, [r7, #36]	; 0x24
 8005334:	e012      	b.n	800535c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <xTimerGenericCommand+0x98>)
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	f107 0110 	add.w	r1, r7, #16
 800533e:	2300      	movs	r3, #0
 8005340:	2200      	movs	r2, #0
 8005342:	f7fe fbed 	bl	8003b20 <xQueueGenericSend>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24
 8005348:	e008      	b.n	800535c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <xTimerGenericCommand+0x98>)
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f107 0110 	add.w	r1, r7, #16
 8005352:	2300      	movs	r3, #0
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	f7fe fce1 	bl	8003d1c <xQueueGenericSendFromISR>
 800535a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	; 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000f28 	.word	0x20000f28

0800536c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af02      	add	r7, sp, #8
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <prvProcessExpiredTimer+0x94>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fa63 	bl	8003850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d022      	beq.n	80053de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	18d1      	adds	r1, r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	6978      	ldr	r0, [r7, #20]
 80053a6:	f000 f8d1 	bl	800554c <prvInsertTimerInActiveList>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01f      	beq.n	80053f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	2100      	movs	r1, #0
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f7ff ff88 	bl	80052d0 <xTimerGenericCommand>
 80053c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d113      	bne.n	80053f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	6978      	ldr	r0, [r7, #20]
 80053f6:	4798      	blx	r3
}
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000f20 	.word	0x20000f20

08005404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f857 	bl	80054c4 <prvGetNextExpireTime>
 8005416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4619      	mov	r1, r3
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f803 	bl	8005428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005422:	f000 f8d5 	bl	80055d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005426:	e7f1      	b.n	800540c <prvTimerTask+0x8>

08005428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005432:	f7ff fa39 	bl	80048a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f866 	bl	800550c <prvSampleTimeNow>
 8005440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d130      	bne.n	80054aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <prvProcessTimerOrBlockTask+0x3c>
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d806      	bhi.n	8005464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005456:	f7ff fa35 	bl	80048c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff85 	bl	800536c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005462:	e024      	b.n	80054ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <prvProcessTimerOrBlockTask+0x90>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <prvProcessTimerOrBlockTask+0x50>
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <prvProcessTimerOrBlockTask+0x52>
 8005478:	2300      	movs	r3, #0
 800547a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <prvProcessTimerOrBlockTask+0x94>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	f7fe ff7d 	bl	8004388 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800548e:	f7ff fa19 	bl	80048c4 <xTaskResumeAll>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <prvProcessTimerOrBlockTask+0x98>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
}
 80054a8:	e001      	b.n	80054ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054aa:	f7ff fa0b 	bl	80048c4 <xTaskResumeAll>
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000f24 	.word	0x20000f24
 80054bc:	20000f28 	.word	0x20000f28
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <prvGetNextExpireTime+0x44>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <prvGetNextExpireTime+0x16>
 80054d6:	2201      	movs	r2, #1
 80054d8:	e000      	b.n	80054dc <prvGetNextExpireTime+0x18>
 80054da:	2200      	movs	r2, #0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <prvGetNextExpireTime+0x44>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e001      	b.n	80054f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000f20 	.word	0x20000f20

0800550c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005514:	f7ff fa74 	bl	8004a00 <xTaskGetTickCount>
 8005518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <prvSampleTimeNow+0x3c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	d205      	bcs.n	8005530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005524:	f000 f936 	bl	8005794 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e002      	b.n	8005536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005536:	4a04      	ldr	r2, [pc, #16]	; (8005548 <prvSampleTimeNow+0x3c>)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800553c:	68fb      	ldr	r3, [r7, #12]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000f30 	.word	0x20000f30

0800554c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d812      	bhi.n	8005598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e01b      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <prvInsertTimerInActiveList+0x7c>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f7fe f924 	bl	80037de <vListInsert>
 8005596:	e012      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d206      	bcs.n	80055ae <prvInsertTimerInActiveList+0x62>
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e007      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <prvInsertTimerInActiveList+0x80>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fe f910 	bl	80037de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055be:	697b      	ldr	r3, [r7, #20]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000f24 	.word	0x20000f24
 80055cc:	20000f20 	.word	0x20000f20

080055d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08e      	sub	sp, #56	; 0x38
 80055d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055d6:	e0ca      	b.n	800576e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da18      	bge.n	8005610 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	3304      	adds	r3, #4
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	61fb      	str	r3, [r7, #28]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005606:	6850      	ldr	r0, [r2, #4]
 8005608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	4611      	mov	r1, r2
 800560e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f2c0 80aa 	blt.w	800576c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	3304      	adds	r3, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe f911 	bl	8003850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800562e:	463b      	mov	r3, r7
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff ff6b 	bl	800550c <prvSampleTimeNow>
 8005636:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b09      	cmp	r3, #9
 800563c:	f200 8097 	bhi.w	800576e <prvProcessReceivedCommands+0x19e>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <prvProcessReceivedCommands+0x78>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	08005671 	.word	0x08005671
 800564c:	08005671 	.word	0x08005671
 8005650:	08005671 	.word	0x08005671
 8005654:	080056e5 	.word	0x080056e5
 8005658:	080056f9 	.word	0x080056f9
 800565c:	08005743 	.word	0x08005743
 8005660:	08005671 	.word	0x08005671
 8005664:	08005671 	.word	0x08005671
 8005668:	080056e5 	.word	0x080056e5
 800566c:	080056f9 	.word	0x080056f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	18d1      	adds	r1, r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005690:	f7ff ff5c 	bl	800554c <prvInsertTimerInActiveList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d069      	beq.n	800576e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05e      	beq.n	800576e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	441a      	add	r2, r3
 80056b8:	2300      	movs	r3, #0
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2300      	movs	r3, #0
 80056be:	2100      	movs	r1, #0
 80056c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c2:	f7ff fe05 	bl	80052d0 <xTimerGenericCommand>
 80056c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d14f      	bne.n	800576e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61bb      	str	r3, [r7, #24]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80056f6:	e03a      	b.n	800576e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	617b      	str	r3, [r7, #20]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	18d1      	adds	r1, r2, r3
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573c:	f7ff ff06 	bl	800554c <prvInsertTimerInActiveList>
					break;
 8005740:	e015      	b.n	800576e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005752:	f000 fbdd 	bl	8005f10 <vPortFree>
 8005756:	e00a      	b.n	800576e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800576a:	e000      	b.n	800576e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800576c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <prvProcessReceivedCommands+0x1c0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	1d39      	adds	r1, r7, #4
 8005774:	2200      	movs	r2, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fb6c 	bl	8003e54 <xQueueReceive>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	f47f af2a 	bne.w	80055d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	3730      	adds	r7, #48	; 0x30
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000f28 	.word	0x20000f28

08005794 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800579a:	e048      	b.n	800582e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800579c:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <prvSwitchTimerLists+0xc0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a6:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <prvSwitchTimerLists+0xc0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe f84b 	bl	8003850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02e      	beq.n	800582e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d90e      	bls.n	8005800 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <prvSwitchTimerLists+0xc0>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fd fff0 	bl	80037de <vListInsert>
 80057fe:	e016      	b.n	800582e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2300      	movs	r3, #0
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	2100      	movs	r1, #0
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fd60 	bl	80052d0 <xTimerGenericCommand>
 8005810:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	603b      	str	r3, [r7, #0]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <prvSwitchTimerLists+0xc0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1b1      	bne.n	800579c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <prvSwitchTimerLists+0xc0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <prvSwitchTimerLists+0xc4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a04      	ldr	r2, [pc, #16]	; (8005854 <prvSwitchTimerLists+0xc0>)
 8005844:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005846:	4a04      	ldr	r2, [pc, #16]	; (8005858 <prvSwitchTimerLists+0xc4>)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000f20 	.word	0x20000f20
 8005858:	20000f24 	.word	0x20000f24

0800585c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005862:	f000 f967 	bl	8005b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d120      	bne.n	80058b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800586e:	4814      	ldr	r0, [pc, #80]	; (80058c0 <prvCheckForValidListAndQueue+0x64>)
 8005870:	f7fd ff64 	bl	800373c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005874:	4813      	ldr	r0, [pc, #76]	; (80058c4 <prvCheckForValidListAndQueue+0x68>)
 8005876:	f7fd ff61 	bl	800373c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <prvCheckForValidListAndQueue+0x6c>)
 800587c:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <prvCheckForValidListAndQueue+0x64>)
 800587e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005880:	4b12      	ldr	r3, [pc, #72]	; (80058cc <prvCheckForValidListAndQueue+0x70>)
 8005882:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <prvCheckForValidListAndQueue+0x68>)
 8005884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005886:	2300      	movs	r3, #0
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <prvCheckForValidListAndQueue+0x74>)
 800588c:	4a11      	ldr	r2, [pc, #68]	; (80058d4 <prvCheckForValidListAndQueue+0x78>)
 800588e:	2110      	movs	r1, #16
 8005890:	200a      	movs	r0, #10
 8005892:	f7fe f86f 	bl	8003974 <xQueueGenericCreateStatic>
 8005896:	4603      	mov	r3, r0
 8005898:	4a08      	ldr	r2, [pc, #32]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 800589a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800589c:	4b07      	ldr	r3, [pc, #28]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	490b      	ldr	r1, [pc, #44]	; (80058d8 <prvCheckForValidListAndQueue+0x7c>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fd42 	bl	8004334 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058b0:	f000 f970 	bl	8005b94 <vPortExitCritical>
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000f28 	.word	0x20000f28
 80058c0:	20000ef8 	.word	0x20000ef8
 80058c4:	20000f0c 	.word	0x20000f0c
 80058c8:	20000f20 	.word	0x20000f20
 80058cc:	20000f24 	.word	0x20000f24
 80058d0:	20000fd4 	.word	0x20000fd4
 80058d4:	20000f34 	.word	0x20000f34
 80058d8:	08006ca0 	.word	0x08006ca0

080058dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3b04      	subs	r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b04      	subs	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3b04      	subs	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800590c:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <pxPortInitialiseStack+0x64>)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3b14      	subs	r3, #20
 8005916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b04      	subs	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f06f 0202 	mvn.w	r2, #2
 800592a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3b20      	subs	r3, #32
 8005930:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005932:	68fb      	ldr	r3, [r7, #12]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	08005945 	.word	0x08005945

08005944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <prvTaskExitError+0x54>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d00a      	beq.n	800596e <prvTaskExitError+0x2a>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <prvTaskExitError+0x28>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	60bb      	str	r3, [r7, #8]
}
 8005980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005982:	bf00      	nop
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0fc      	beq.n	8005984 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000010 	.word	0x20000010
 800599c:	00000000 	.word	0x00000000

080059a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <pxCurrentTCBConst2>)
 80059a2:	6819      	ldr	r1, [r3, #0]
 80059a4:	6808      	ldr	r0, [r1, #0]
 80059a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	f380 8809 	msr	PSP, r0
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f04f 0000 	mov.w	r0, #0
 80059b6:	f380 8811 	msr	BASEPRI, r0
 80059ba:	4770      	bx	lr
 80059bc:	f3af 8000 	nop.w

080059c0 <pxCurrentTCBConst2>:
 80059c0:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop

080059c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059c8:	4808      	ldr	r0, [pc, #32]	; (80059ec <prvPortStartFirstTask+0x24>)
 80059ca:	6800      	ldr	r0, [r0, #0]
 80059cc:	6800      	ldr	r0, [r0, #0]
 80059ce:	f380 8808 	msr	MSP, r0
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	f380 8814 	msr	CONTROL, r0
 80059da:	b662      	cpsie	i
 80059dc:	b661      	cpsie	f
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	df00      	svc	0
 80059e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059ea:	bf00      	nop
 80059ec:	e000ed08 	.word	0xe000ed08

080059f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059f6:	4b46      	ldr	r3, [pc, #280]	; (8005b10 <xPortStartScheduler+0x120>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a46      	ldr	r2, [pc, #280]	; (8005b14 <xPortStartScheduler+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10a      	bne.n	8005a16 <xPortStartScheduler+0x26>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a16:	4b3e      	ldr	r3, [pc, #248]	; (8005b10 <xPortStartScheduler+0x120>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3f      	ldr	r2, [pc, #252]	; (8005b18 <xPortStartScheduler+0x128>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10a      	bne.n	8005a36 <xPortStartScheduler+0x46>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	60fb      	str	r3, [r7, #12]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a36:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <xPortStartScheduler+0x12c>)
 8005a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <xPortStartScheduler+0x130>)
 8005a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a5e:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a64:	e009      	b.n	8005a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a82:	2b80      	cmp	r3, #128	; 0x80
 8005a84:	d0ef      	beq.n	8005a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a86:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1c3 0307 	rsb	r3, r3, #7
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d00a      	beq.n	8005aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60bb      	str	r3, [r7, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <xPortStartScheduler+0x134>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <xPortStartScheduler+0x134>)
 8005ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ab2:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <xPortStartScheduler+0x134>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aba:	4a1a      	ldr	r2, [pc, #104]	; (8005b24 <xPortStartScheduler+0x134>)
 8005abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ac6:	4b18      	ldr	r3, [pc, #96]	; (8005b28 <xPortStartScheduler+0x138>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <xPortStartScheduler+0x138>)
 8005acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <xPortStartScheduler+0x138>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <xPortStartScheduler+0x138>)
 8005ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ade:	f000 f8dd 	bl	8005c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <xPortStartScheduler+0x13c>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ae8:	f000 f8fc 	bl	8005ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <xPortStartScheduler+0x140>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a0f      	ldr	r2, [pc, #60]	; (8005b30 <xPortStartScheduler+0x140>)
 8005af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005af8:	f7ff ff66 	bl	80059c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005afc:	f7ff f84a 	bl	8004b94 <vTaskSwitchContext>
	prvTaskExitError();
 8005b00:	f7ff ff20 	bl	8005944 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	e000ed00 	.word	0xe000ed00
 8005b14:	410fc271 	.word	0x410fc271
 8005b18:	410fc270 	.word	0x410fc270
 8005b1c:	e000e400 	.word	0xe000e400
 8005b20:	20001024 	.word	0x20001024
 8005b24:	20001028 	.word	0x20001028
 8005b28:	e000ed20 	.word	0xe000ed20
 8005b2c:	20000010 	.word	0x20000010
 8005b30:	e000ef34 	.word	0xe000ef34

08005b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	607b      	str	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <vPortEnterCritical+0x58>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <vPortEnterCritical+0x58>)
 8005b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <vPortEnterCritical+0x58>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10f      	bne.n	8005b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <vPortEnterCritical+0x5c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	603b      	str	r3, [r7, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <vPortEnterCritical+0x4a>
	}
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000010 	.word	0x20000010
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <vPortExitCritical+0x50>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <vPortExitCritical+0x24>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	607b      	str	r3, [r7, #4]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <vPortExitCritical+0x50>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <vPortExitCritical+0x50>)
 8005bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bc2:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <vPortExitCritical+0x50>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <vPortExitCritical+0x42>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f383 8811 	msr	BASEPRI, r3
}
 8005bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000010 	.word	0x20000010
	...

08005bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bf0:	f3ef 8009 	mrs	r0, PSP
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <pxCurrentTCBConst>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	f01e 0f10 	tst.w	lr, #16
 8005c00:	bf08      	it	eq
 8005c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0a:	6010      	str	r0, [r2, #0]
 8005c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c14:	f380 8811 	msr	BASEPRI, r0
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f7fe ffb8 	bl	8004b94 <vTaskSwitchContext>
 8005c24:	f04f 0000 	mov.w	r0, #0
 8005c28:	f380 8811 	msr	BASEPRI, r0
 8005c2c:	bc09      	pop	{r0, r3}
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	6808      	ldr	r0, [r1, #0]
 8005c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c36:	f01e 0f10 	tst.w	lr, #16
 8005c3a:	bf08      	it	eq
 8005c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c40:	f380 8809 	msr	PSP, r0
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w

08005c50 <pxCurrentTCBConst>:
 8005c50:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop

08005c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c72:	f7fe fed5 	bl	8004a20 <xTaskIncrementTick>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <xPortSysTickHandler+0x40>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	2300      	movs	r3, #0
 8005c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f383 8811 	msr	BASEPRI, r3
}
 8005c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <vPortSetupTimerInterrupt+0x34>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <vPortSetupTimerInterrupt+0x38>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <vPortSetupTimerInterrupt+0x3c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <vPortSetupTimerInterrupt+0x40>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	099b      	lsrs	r3, r3, #6
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <vPortSetupTimerInterrupt+0x44>)
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <vPortSetupTimerInterrupt+0x34>)
 8005cc0:	2207      	movs	r2, #7
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	e000e010 	.word	0xe000e010
 8005cd4:	e000e018 	.word	0xe000e018
 8005cd8:	20000004 	.word	0x20000004
 8005cdc:	10624dd3 	.word	0x10624dd3
 8005ce0:	e000e014 	.word	0xe000e014

08005ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005cf4 <vPortEnableVFP+0x10>
 8005ce8:	6801      	ldr	r1, [r0, #0]
 8005cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cee:	6001      	str	r1, [r0, #0]
 8005cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cf2:	bf00      	nop
 8005cf4:	e000ed88 	.word	0xe000ed88

08005cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cfe:	f3ef 8305 	mrs	r3, IPSR
 8005d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	d914      	bls.n	8005d34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <vPortValidateInterruptPriority+0x70>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <vPortValidateInterruptPriority+0x74>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	7afa      	ldrb	r2, [r7, #11]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d20a      	bcs.n	8005d34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	607b      	str	r3, [r7, #4]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d34:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <vPortValidateInterruptPriority+0x78>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <vPortValidateInterruptPriority+0x7c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d90a      	bls.n	8005d5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	603b      	str	r3, [r7, #0]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <vPortValidateInterruptPriority+0x60>
	}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	e000e3f0 	.word	0xe000e3f0
 8005d6c:	20001024 	.word	0x20001024
 8005d70:	e000ed0c 	.word	0xe000ed0c
 8005d74:	20001028 	.word	0x20001028

08005d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d84:	f7fe fd90 	bl	80048a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d88:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <pvPortMalloc+0x180>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d90:	f000 f920 	bl	8005fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d94:	4b59      	ldr	r3, [pc, #356]	; (8005efc <pvPortMalloc+0x184>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 8093 	bne.w	8005ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01d      	beq.n	8005de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005da8:	2208      	movs	r2, #8
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d014      	beq.n	8005de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f023 0307 	bic.w	r3, r3, #7
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <pvPortMalloc+0x6c>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	617b      	str	r3, [r7, #20]
}
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d06e      	beq.n	8005ec8 <pvPortMalloc+0x150>
 8005dea:	4b45      	ldr	r3, [pc, #276]	; (8005f00 <pvPortMalloc+0x188>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d869      	bhi.n	8005ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005df4:	4b43      	ldr	r3, [pc, #268]	; (8005f04 <pvPortMalloc+0x18c>)
 8005df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <pvPortMalloc+0x18c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dfe:	e004      	b.n	8005e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d903      	bls.n	8005e1c <pvPortMalloc+0xa4>
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f1      	bne.n	8005e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e1c:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <pvPortMalloc+0x180>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d050      	beq.n	8005ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	4413      	add	r3, r2
 8005e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	2308      	movs	r3, #8
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d91f      	bls.n	8005e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <pvPortMalloc+0xf8>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	613b      	str	r3, [r7, #16]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e82:	69b8      	ldr	r0, [r7, #24]
 8005e84:	f000 f908 	bl	8006098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e88:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <pvPortMalloc+0x188>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <pvPortMalloc+0x188>)
 8005e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e96:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <pvPortMalloc+0x188>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <pvPortMalloc+0x190>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d203      	bcs.n	8005eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ea2:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <pvPortMalloc+0x188>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <pvPortMalloc+0x190>)
 8005ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <pvPortMalloc+0x184>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <pvPortMalloc+0x194>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <pvPortMalloc+0x194>)
 8005ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ec8:	f7fe fcfc 	bl	80048c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <pvPortMalloc+0x174>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	60fb      	str	r3, [r7, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <pvPortMalloc+0x172>
	return pvReturn;
 8005eec:	69fb      	ldr	r3, [r7, #28]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20004c34 	.word	0x20004c34
 8005efc:	20004c48 	.word	0x20004c48
 8005f00:	20004c38 	.word	0x20004c38
 8005f04:	20004c2c 	.word	0x20004c2c
 8005f08:	20004c3c 	.word	0x20004c3c
 8005f0c:	20004c40 	.word	0x20004c40

08005f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d04d      	beq.n	8005fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f22:	2308      	movs	r3, #8
 8005f24:	425b      	negs	r3, r3
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4413      	add	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <vPortFree+0xb8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <vPortFree+0x44>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	60fb      	str	r3, [r7, #12]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <vPortFree+0x62>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	60bb      	str	r3, [r7, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <vPortFree+0xb8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01e      	beq.n	8005fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11a      	bne.n	8005fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <vPortFree+0xb8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	43db      	mvns	r3, r3
 8005f92:	401a      	ands	r2, r3
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f98:	f7fe fc86 	bl	80048a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <vPortFree+0xbc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <vPortFree+0xbc>)
 8005fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005faa:	6938      	ldr	r0, [r7, #16]
 8005fac:	f000 f874 	bl	8006098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <vPortFree+0xc0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <vPortFree+0xc0>)
 8005fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fba:	f7fe fc83 	bl	80048c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20004c48 	.word	0x20004c48
 8005fcc:	20004c38 	.word	0x20004c38
 8005fd0:	20004c44 	.word	0x20004c44

08005fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <prvHeapInit+0xac>)
 8005fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3307      	adds	r3, #7
 8005ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <prvHeapInit+0xac>)
 8006004:	4413      	add	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <prvHeapInit+0xb0>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <prvHeapInit+0xb0>)
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006020:	2208      	movs	r2, #8
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a15      	ldr	r2, [pc, #84]	; (8006088 <prvHeapInit+0xb4>)
 8006034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006036:	4b14      	ldr	r3, [pc, #80]	; (8006088 <prvHeapInit+0xb4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <prvHeapInit+0xb4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <prvHeapInit+0xb4>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <prvHeapInit+0xb8>)
 8006062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <prvHeapInit+0xbc>)
 800606a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <prvHeapInit+0xc0>)
 800606e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	2000102c 	.word	0x2000102c
 8006084:	20004c2c 	.word	0x20004c2c
 8006088:	20004c34 	.word	0x20004c34
 800608c:	20004c3c 	.word	0x20004c3c
 8006090:	20004c38 	.word	0x20004c38
 8006094:	20004c48 	.word	0x20004c48

08006098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <prvInsertBlockIntoFreeList+0xac>)
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e002      	b.n	80060ac <prvInsertBlockIntoFreeList+0x14>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d8f7      	bhi.n	80060a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d108      	bne.n	80060da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d118      	bne.n	8006120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <prvInsertBlockIntoFreeList+0xb0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d00d      	beq.n	8006116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	441a      	add	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e008      	b.n	8006128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <prvInsertBlockIntoFreeList+0xb0>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e003      	b.n	8006128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d002      	beq.n	8006136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20004c2c 	.word	0x20004c2c
 8006148:	20004c34 	.word	0x20004c34

0800614c <__errno>:
 800614c:	4b01      	ldr	r3, [pc, #4]	; (8006154 <__errno+0x8>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000014 	.word	0x20000014

08006158 <__libc_init_array>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	4d0d      	ldr	r5, [pc, #52]	; (8006190 <__libc_init_array+0x38>)
 800615c:	4c0d      	ldr	r4, [pc, #52]	; (8006194 <__libc_init_array+0x3c>)
 800615e:	1b64      	subs	r4, r4, r5
 8006160:	10a4      	asrs	r4, r4, #2
 8006162:	2600      	movs	r6, #0
 8006164:	42a6      	cmp	r6, r4
 8006166:	d109      	bne.n	800617c <__libc_init_array+0x24>
 8006168:	4d0b      	ldr	r5, [pc, #44]	; (8006198 <__libc_init_array+0x40>)
 800616a:	4c0c      	ldr	r4, [pc, #48]	; (800619c <__libc_init_array+0x44>)
 800616c:	f000 fcf8 	bl	8006b60 <_init>
 8006170:	1b64      	subs	r4, r4, r5
 8006172:	10a4      	asrs	r4, r4, #2
 8006174:	2600      	movs	r6, #0
 8006176:	42a6      	cmp	r6, r4
 8006178:	d105      	bne.n	8006186 <__libc_init_array+0x2e>
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006180:	4798      	blx	r3
 8006182:	3601      	adds	r6, #1
 8006184:	e7ee      	b.n	8006164 <__libc_init_array+0xc>
 8006186:	f855 3b04 	ldr.w	r3, [r5], #4
 800618a:	4798      	blx	r3
 800618c:	3601      	adds	r6, #1
 800618e:	e7f2      	b.n	8006176 <__libc_init_array+0x1e>
 8006190:	08006dd4 	.word	0x08006dd4
 8006194:	08006dd4 	.word	0x08006dd4
 8006198:	08006dd4 	.word	0x08006dd4
 800619c:	08006dd8 	.word	0x08006dd8

080061a0 <__retarget_lock_acquire_recursive>:
 80061a0:	4770      	bx	lr

080061a2 <__retarget_lock_release_recursive>:
 80061a2:	4770      	bx	lr

080061a4 <memcpy>:
 80061a4:	440a      	add	r2, r1
 80061a6:	4291      	cmp	r1, r2
 80061a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80061ac:	d100      	bne.n	80061b0 <memcpy+0xc>
 80061ae:	4770      	bx	lr
 80061b0:	b510      	push	{r4, lr}
 80061b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ba:	4291      	cmp	r1, r2
 80061bc:	d1f9      	bne.n	80061b2 <memcpy+0xe>
 80061be:	bd10      	pop	{r4, pc}

080061c0 <memset>:
 80061c0:	4402      	add	r2, r0
 80061c2:	4603      	mov	r3, r0
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d100      	bne.n	80061ca <memset+0xa>
 80061c8:	4770      	bx	lr
 80061ca:	f803 1b01 	strb.w	r1, [r3], #1
 80061ce:	e7f9      	b.n	80061c4 <memset+0x4>

080061d0 <sbrk_aligned>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	4e0e      	ldr	r6, [pc, #56]	; (800620c <sbrk_aligned+0x3c>)
 80061d4:	460c      	mov	r4, r1
 80061d6:	6831      	ldr	r1, [r6, #0]
 80061d8:	4605      	mov	r5, r0
 80061da:	b911      	cbnz	r1, 80061e2 <sbrk_aligned+0x12>
 80061dc:	f000 f8f6 	bl	80063cc <_sbrk_r>
 80061e0:	6030      	str	r0, [r6, #0]
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 f8f1 	bl	80063cc <_sbrk_r>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d00a      	beq.n	8006204 <sbrk_aligned+0x34>
 80061ee:	1cc4      	adds	r4, r0, #3
 80061f0:	f024 0403 	bic.w	r4, r4, #3
 80061f4:	42a0      	cmp	r0, r4
 80061f6:	d007      	beq.n	8006208 <sbrk_aligned+0x38>
 80061f8:	1a21      	subs	r1, r4, r0
 80061fa:	4628      	mov	r0, r5
 80061fc:	f000 f8e6 	bl	80063cc <_sbrk_r>
 8006200:	3001      	adds	r0, #1
 8006202:	d101      	bne.n	8006208 <sbrk_aligned+0x38>
 8006204:	f04f 34ff 	mov.w	r4, #4294967295
 8006208:	4620      	mov	r0, r4
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	20004c54 	.word	0x20004c54

08006210 <_malloc_r>:
 8006210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006214:	1ccd      	adds	r5, r1, #3
 8006216:	f025 0503 	bic.w	r5, r5, #3
 800621a:	3508      	adds	r5, #8
 800621c:	2d0c      	cmp	r5, #12
 800621e:	bf38      	it	cc
 8006220:	250c      	movcc	r5, #12
 8006222:	2d00      	cmp	r5, #0
 8006224:	4607      	mov	r7, r0
 8006226:	db01      	blt.n	800622c <_malloc_r+0x1c>
 8006228:	42a9      	cmp	r1, r5
 800622a:	d905      	bls.n	8006238 <_malloc_r+0x28>
 800622c:	230c      	movs	r3, #12
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	2600      	movs	r6, #0
 8006232:	4630      	mov	r0, r6
 8006234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006238:	4e2e      	ldr	r6, [pc, #184]	; (80062f4 <_malloc_r+0xe4>)
 800623a:	f000 f8f7 	bl	800642c <__malloc_lock>
 800623e:	6833      	ldr	r3, [r6, #0]
 8006240:	461c      	mov	r4, r3
 8006242:	bb34      	cbnz	r4, 8006292 <_malloc_r+0x82>
 8006244:	4629      	mov	r1, r5
 8006246:	4638      	mov	r0, r7
 8006248:	f7ff ffc2 	bl	80061d0 <sbrk_aligned>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	4604      	mov	r4, r0
 8006250:	d14d      	bne.n	80062ee <_malloc_r+0xde>
 8006252:	6834      	ldr	r4, [r6, #0]
 8006254:	4626      	mov	r6, r4
 8006256:	2e00      	cmp	r6, #0
 8006258:	d140      	bne.n	80062dc <_malloc_r+0xcc>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	4631      	mov	r1, r6
 800625e:	4638      	mov	r0, r7
 8006260:	eb04 0803 	add.w	r8, r4, r3
 8006264:	f000 f8b2 	bl	80063cc <_sbrk_r>
 8006268:	4580      	cmp	r8, r0
 800626a:	d13a      	bne.n	80062e2 <_malloc_r+0xd2>
 800626c:	6821      	ldr	r1, [r4, #0]
 800626e:	3503      	adds	r5, #3
 8006270:	1a6d      	subs	r5, r5, r1
 8006272:	f025 0503 	bic.w	r5, r5, #3
 8006276:	3508      	adds	r5, #8
 8006278:	2d0c      	cmp	r5, #12
 800627a:	bf38      	it	cc
 800627c:	250c      	movcc	r5, #12
 800627e:	4629      	mov	r1, r5
 8006280:	4638      	mov	r0, r7
 8006282:	f7ff ffa5 	bl	80061d0 <sbrk_aligned>
 8006286:	3001      	adds	r0, #1
 8006288:	d02b      	beq.n	80062e2 <_malloc_r+0xd2>
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	442b      	add	r3, r5
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	e00e      	b.n	80062b0 <_malloc_r+0xa0>
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	1b52      	subs	r2, r2, r5
 8006296:	d41e      	bmi.n	80062d6 <_malloc_r+0xc6>
 8006298:	2a0b      	cmp	r2, #11
 800629a:	d916      	bls.n	80062ca <_malloc_r+0xba>
 800629c:	1961      	adds	r1, r4, r5
 800629e:	42a3      	cmp	r3, r4
 80062a0:	6025      	str	r5, [r4, #0]
 80062a2:	bf18      	it	ne
 80062a4:	6059      	strne	r1, [r3, #4]
 80062a6:	6863      	ldr	r3, [r4, #4]
 80062a8:	bf08      	it	eq
 80062aa:	6031      	streq	r1, [r6, #0]
 80062ac:	5162      	str	r2, [r4, r5]
 80062ae:	604b      	str	r3, [r1, #4]
 80062b0:	4638      	mov	r0, r7
 80062b2:	f104 060b 	add.w	r6, r4, #11
 80062b6:	f000 f8bf 	bl	8006438 <__malloc_unlock>
 80062ba:	f026 0607 	bic.w	r6, r6, #7
 80062be:	1d23      	adds	r3, r4, #4
 80062c0:	1af2      	subs	r2, r6, r3
 80062c2:	d0b6      	beq.n	8006232 <_malloc_r+0x22>
 80062c4:	1b9b      	subs	r3, r3, r6
 80062c6:	50a3      	str	r3, [r4, r2]
 80062c8:	e7b3      	b.n	8006232 <_malloc_r+0x22>
 80062ca:	6862      	ldr	r2, [r4, #4]
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	bf0c      	ite	eq
 80062d0:	6032      	streq	r2, [r6, #0]
 80062d2:	605a      	strne	r2, [r3, #4]
 80062d4:	e7ec      	b.n	80062b0 <_malloc_r+0xa0>
 80062d6:	4623      	mov	r3, r4
 80062d8:	6864      	ldr	r4, [r4, #4]
 80062da:	e7b2      	b.n	8006242 <_malloc_r+0x32>
 80062dc:	4634      	mov	r4, r6
 80062de:	6876      	ldr	r6, [r6, #4]
 80062e0:	e7b9      	b.n	8006256 <_malloc_r+0x46>
 80062e2:	230c      	movs	r3, #12
 80062e4:	603b      	str	r3, [r7, #0]
 80062e6:	4638      	mov	r0, r7
 80062e8:	f000 f8a6 	bl	8006438 <__malloc_unlock>
 80062ec:	e7a1      	b.n	8006232 <_malloc_r+0x22>
 80062ee:	6025      	str	r5, [r4, #0]
 80062f0:	e7de      	b.n	80062b0 <_malloc_r+0xa0>
 80062f2:	bf00      	nop
 80062f4:	20004c50 	.word	0x20004c50

080062f8 <cleanup_glue>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	6809      	ldr	r1, [r1, #0]
 80062fe:	4605      	mov	r5, r0
 8006300:	b109      	cbz	r1, 8006306 <cleanup_glue+0xe>
 8006302:	f7ff fff9 	bl	80062f8 <cleanup_glue>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800630e:	f000 b899 	b.w	8006444 <_free_r>
	...

08006314 <_reclaim_reent>:
 8006314:	4b2c      	ldr	r3, [pc, #176]	; (80063c8 <_reclaim_reent+0xb4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4283      	cmp	r3, r0
 800631a:	b570      	push	{r4, r5, r6, lr}
 800631c:	4604      	mov	r4, r0
 800631e:	d051      	beq.n	80063c4 <_reclaim_reent+0xb0>
 8006320:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006322:	b143      	cbz	r3, 8006336 <_reclaim_reent+0x22>
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d14a      	bne.n	80063c0 <_reclaim_reent+0xac>
 800632a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800632c:	6819      	ldr	r1, [r3, #0]
 800632e:	b111      	cbz	r1, 8006336 <_reclaim_reent+0x22>
 8006330:	4620      	mov	r0, r4
 8006332:	f000 f887 	bl	8006444 <_free_r>
 8006336:	6961      	ldr	r1, [r4, #20]
 8006338:	b111      	cbz	r1, 8006340 <_reclaim_reent+0x2c>
 800633a:	4620      	mov	r0, r4
 800633c:	f000 f882 	bl	8006444 <_free_r>
 8006340:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006342:	b111      	cbz	r1, 800634a <_reclaim_reent+0x36>
 8006344:	4620      	mov	r0, r4
 8006346:	f000 f87d 	bl	8006444 <_free_r>
 800634a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800634c:	b111      	cbz	r1, 8006354 <_reclaim_reent+0x40>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f878 	bl	8006444 <_free_r>
 8006354:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006356:	b111      	cbz	r1, 800635e <_reclaim_reent+0x4a>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f873 	bl	8006444 <_free_r>
 800635e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006360:	b111      	cbz	r1, 8006368 <_reclaim_reent+0x54>
 8006362:	4620      	mov	r0, r4
 8006364:	f000 f86e 	bl	8006444 <_free_r>
 8006368:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800636a:	b111      	cbz	r1, 8006372 <_reclaim_reent+0x5e>
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f869 	bl	8006444 <_free_r>
 8006372:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006374:	b111      	cbz	r1, 800637c <_reclaim_reent+0x68>
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f864 	bl	8006444 <_free_r>
 800637c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800637e:	b111      	cbz	r1, 8006386 <_reclaim_reent+0x72>
 8006380:	4620      	mov	r0, r4
 8006382:	f000 f85f 	bl	8006444 <_free_r>
 8006386:	69a3      	ldr	r3, [r4, #24]
 8006388:	b1e3      	cbz	r3, 80063c4 <_reclaim_reent+0xb0>
 800638a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800638c:	4620      	mov	r0, r4
 800638e:	4798      	blx	r3
 8006390:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006392:	b1b9      	cbz	r1, 80063c4 <_reclaim_reent+0xb0>
 8006394:	4620      	mov	r0, r4
 8006396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800639a:	f7ff bfad 	b.w	80062f8 <cleanup_glue>
 800639e:	5949      	ldr	r1, [r1, r5]
 80063a0:	b941      	cbnz	r1, 80063b4 <_reclaim_reent+0xa0>
 80063a2:	3504      	adds	r5, #4
 80063a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a6:	2d80      	cmp	r5, #128	; 0x80
 80063a8:	68d9      	ldr	r1, [r3, #12]
 80063aa:	d1f8      	bne.n	800639e <_reclaim_reent+0x8a>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f849 	bl	8006444 <_free_r>
 80063b2:	e7ba      	b.n	800632a <_reclaim_reent+0x16>
 80063b4:	680e      	ldr	r6, [r1, #0]
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 f844 	bl	8006444 <_free_r>
 80063bc:	4631      	mov	r1, r6
 80063be:	e7ef      	b.n	80063a0 <_reclaim_reent+0x8c>
 80063c0:	2500      	movs	r5, #0
 80063c2:	e7ef      	b.n	80063a4 <_reclaim_reent+0x90>
 80063c4:	bd70      	pop	{r4, r5, r6, pc}
 80063c6:	bf00      	nop
 80063c8:	20000014 	.word	0x20000014

080063cc <_sbrk_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d06      	ldr	r5, [pc, #24]	; (80063e8 <_sbrk_r+0x1c>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fa fbc8 	bl	8000b6c <_sbrk>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_sbrk_r+0x1a>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_sbrk_r+0x1a>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	20004c58 	.word	0x20004c58

080063ec <siprintf>:
 80063ec:	b40e      	push	{r1, r2, r3}
 80063ee:	b500      	push	{lr}
 80063f0:	b09c      	sub	sp, #112	; 0x70
 80063f2:	ab1d      	add	r3, sp, #116	; 0x74
 80063f4:	9002      	str	r0, [sp, #8]
 80063f6:	9006      	str	r0, [sp, #24]
 80063f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063fc:	4809      	ldr	r0, [pc, #36]	; (8006424 <siprintf+0x38>)
 80063fe:	9107      	str	r1, [sp, #28]
 8006400:	9104      	str	r1, [sp, #16]
 8006402:	4909      	ldr	r1, [pc, #36]	; (8006428 <siprintf+0x3c>)
 8006404:	f853 2b04 	ldr.w	r2, [r3], #4
 8006408:	9105      	str	r1, [sp, #20]
 800640a:	6800      	ldr	r0, [r0, #0]
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	a902      	add	r1, sp, #8
 8006410:	f000 f8c0 	bl	8006594 <_svfiprintf_r>
 8006414:	9b02      	ldr	r3, [sp, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	b01c      	add	sp, #112	; 0x70
 800641c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006420:	b003      	add	sp, #12
 8006422:	4770      	bx	lr
 8006424:	20000014 	.word	0x20000014
 8006428:	ffff0208 	.word	0xffff0208

0800642c <__malloc_lock>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__malloc_lock+0x8>)
 800642e:	f7ff beb7 	b.w	80061a0 <__retarget_lock_acquire_recursive>
 8006432:	bf00      	nop
 8006434:	20004c4c 	.word	0x20004c4c

08006438 <__malloc_unlock>:
 8006438:	4801      	ldr	r0, [pc, #4]	; (8006440 <__malloc_unlock+0x8>)
 800643a:	f7ff beb2 	b.w	80061a2 <__retarget_lock_release_recursive>
 800643e:	bf00      	nop
 8006440:	20004c4c 	.word	0x20004c4c

08006444 <_free_r>:
 8006444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006446:	2900      	cmp	r1, #0
 8006448:	d044      	beq.n	80064d4 <_free_r+0x90>
 800644a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800644e:	9001      	str	r0, [sp, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f1a1 0404 	sub.w	r4, r1, #4
 8006456:	bfb8      	it	lt
 8006458:	18e4      	addlt	r4, r4, r3
 800645a:	f7ff ffe7 	bl	800642c <__malloc_lock>
 800645e:	4a1e      	ldr	r2, [pc, #120]	; (80064d8 <_free_r+0x94>)
 8006460:	9801      	ldr	r0, [sp, #4]
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	b933      	cbnz	r3, 8006474 <_free_r+0x30>
 8006466:	6063      	str	r3, [r4, #4]
 8006468:	6014      	str	r4, [r2, #0]
 800646a:	b003      	add	sp, #12
 800646c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006470:	f7ff bfe2 	b.w	8006438 <__malloc_unlock>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d908      	bls.n	800648a <_free_r+0x46>
 8006478:	6825      	ldr	r5, [r4, #0]
 800647a:	1961      	adds	r1, r4, r5
 800647c:	428b      	cmp	r3, r1
 800647e:	bf01      	itttt	eq
 8006480:	6819      	ldreq	r1, [r3, #0]
 8006482:	685b      	ldreq	r3, [r3, #4]
 8006484:	1949      	addeq	r1, r1, r5
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	e7ed      	b.n	8006466 <_free_r+0x22>
 800648a:	461a      	mov	r2, r3
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b10b      	cbz	r3, 8006494 <_free_r+0x50>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d9fa      	bls.n	800648a <_free_r+0x46>
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	1855      	adds	r5, r2, r1
 8006498:	42a5      	cmp	r5, r4
 800649a:	d10b      	bne.n	80064b4 <_free_r+0x70>
 800649c:	6824      	ldr	r4, [r4, #0]
 800649e:	4421      	add	r1, r4
 80064a0:	1854      	adds	r4, r2, r1
 80064a2:	42a3      	cmp	r3, r4
 80064a4:	6011      	str	r1, [r2, #0]
 80064a6:	d1e0      	bne.n	800646a <_free_r+0x26>
 80064a8:	681c      	ldr	r4, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	6053      	str	r3, [r2, #4]
 80064ae:	4421      	add	r1, r4
 80064b0:	6011      	str	r1, [r2, #0]
 80064b2:	e7da      	b.n	800646a <_free_r+0x26>
 80064b4:	d902      	bls.n	80064bc <_free_r+0x78>
 80064b6:	230c      	movs	r3, #12
 80064b8:	6003      	str	r3, [r0, #0]
 80064ba:	e7d6      	b.n	800646a <_free_r+0x26>
 80064bc:	6825      	ldr	r5, [r4, #0]
 80064be:	1961      	adds	r1, r4, r5
 80064c0:	428b      	cmp	r3, r1
 80064c2:	bf04      	itt	eq
 80064c4:	6819      	ldreq	r1, [r3, #0]
 80064c6:	685b      	ldreq	r3, [r3, #4]
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	bf04      	itt	eq
 80064cc:	1949      	addeq	r1, r1, r5
 80064ce:	6021      	streq	r1, [r4, #0]
 80064d0:	6054      	str	r4, [r2, #4]
 80064d2:	e7ca      	b.n	800646a <_free_r+0x26>
 80064d4:	b003      	add	sp, #12
 80064d6:	bd30      	pop	{r4, r5, pc}
 80064d8:	20004c50 	.word	0x20004c50

080064dc <__ssputs_r>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	688e      	ldr	r6, [r1, #8]
 80064e2:	429e      	cmp	r6, r3
 80064e4:	4682      	mov	sl, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	4690      	mov	r8, r2
 80064ea:	461f      	mov	r7, r3
 80064ec:	d838      	bhi.n	8006560 <__ssputs_r+0x84>
 80064ee:	898a      	ldrh	r2, [r1, #12]
 80064f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064f4:	d032      	beq.n	800655c <__ssputs_r+0x80>
 80064f6:	6825      	ldr	r5, [r4, #0]
 80064f8:	6909      	ldr	r1, [r1, #16]
 80064fa:	eba5 0901 	sub.w	r9, r5, r1
 80064fe:	6965      	ldr	r5, [r4, #20]
 8006500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006508:	3301      	adds	r3, #1
 800650a:	444b      	add	r3, r9
 800650c:	106d      	asrs	r5, r5, #1
 800650e:	429d      	cmp	r5, r3
 8006510:	bf38      	it	cc
 8006512:	461d      	movcc	r5, r3
 8006514:	0553      	lsls	r3, r2, #21
 8006516:	d531      	bpl.n	800657c <__ssputs_r+0xa0>
 8006518:	4629      	mov	r1, r5
 800651a:	f7ff fe79 	bl	8006210 <_malloc_r>
 800651e:	4606      	mov	r6, r0
 8006520:	b950      	cbnz	r0, 8006538 <__ssputs_r+0x5c>
 8006522:	230c      	movs	r3, #12
 8006524:	f8ca 3000 	str.w	r3, [sl]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	6921      	ldr	r1, [r4, #16]
 800653a:	464a      	mov	r2, r9
 800653c:	f7ff fe32 	bl	80061a4 <memcpy>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	6126      	str	r6, [r4, #16]
 800654e:	6165      	str	r5, [r4, #20]
 8006550:	444e      	add	r6, r9
 8006552:	eba5 0509 	sub.w	r5, r5, r9
 8006556:	6026      	str	r6, [r4, #0]
 8006558:	60a5      	str	r5, [r4, #8]
 800655a:	463e      	mov	r6, r7
 800655c:	42be      	cmp	r6, r7
 800655e:	d900      	bls.n	8006562 <__ssputs_r+0x86>
 8006560:	463e      	mov	r6, r7
 8006562:	6820      	ldr	r0, [r4, #0]
 8006564:	4632      	mov	r2, r6
 8006566:	4641      	mov	r1, r8
 8006568:	f000 faa8 	bl	8006abc <memmove>
 800656c:	68a3      	ldr	r3, [r4, #8]
 800656e:	1b9b      	subs	r3, r3, r6
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	4433      	add	r3, r6
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	2000      	movs	r0, #0
 800657a:	e7db      	b.n	8006534 <__ssputs_r+0x58>
 800657c:	462a      	mov	r2, r5
 800657e:	f000 fab7 	bl	8006af0 <_realloc_r>
 8006582:	4606      	mov	r6, r0
 8006584:	2800      	cmp	r0, #0
 8006586:	d1e1      	bne.n	800654c <__ssputs_r+0x70>
 8006588:	6921      	ldr	r1, [r4, #16]
 800658a:	4650      	mov	r0, sl
 800658c:	f7ff ff5a 	bl	8006444 <_free_r>
 8006590:	e7c7      	b.n	8006522 <__ssputs_r+0x46>
	...

08006594 <_svfiprintf_r>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	4698      	mov	r8, r3
 800659a:	898b      	ldrh	r3, [r1, #12]
 800659c:	061b      	lsls	r3, r3, #24
 800659e:	b09d      	sub	sp, #116	; 0x74
 80065a0:	4607      	mov	r7, r0
 80065a2:	460d      	mov	r5, r1
 80065a4:	4614      	mov	r4, r2
 80065a6:	d50e      	bpl.n	80065c6 <_svfiprintf_r+0x32>
 80065a8:	690b      	ldr	r3, [r1, #16]
 80065aa:	b963      	cbnz	r3, 80065c6 <_svfiprintf_r+0x32>
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	f7ff fe2f 	bl	8006210 <_malloc_r>
 80065b2:	6028      	str	r0, [r5, #0]
 80065b4:	6128      	str	r0, [r5, #16]
 80065b6:	b920      	cbnz	r0, 80065c2 <_svfiprintf_r+0x2e>
 80065b8:	230c      	movs	r3, #12
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e0d1      	b.n	8006766 <_svfiprintf_r+0x1d2>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	616b      	str	r3, [r5, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ca:	2320      	movs	r3, #32
 80065cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006780 <_svfiprintf_r+0x1ec>
 80065da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065de:	f04f 0901 	mov.w	r9, #1
 80065e2:	4623      	mov	r3, r4
 80065e4:	469a      	mov	sl, r3
 80065e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ea:	b10a      	cbz	r2, 80065f0 <_svfiprintf_r+0x5c>
 80065ec:	2a25      	cmp	r2, #37	; 0x25
 80065ee:	d1f9      	bne.n	80065e4 <_svfiprintf_r+0x50>
 80065f0:	ebba 0b04 	subs.w	fp, sl, r4
 80065f4:	d00b      	beq.n	800660e <_svfiprintf_r+0x7a>
 80065f6:	465b      	mov	r3, fp
 80065f8:	4622      	mov	r2, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff ff6d 	bl	80064dc <__ssputs_r>
 8006602:	3001      	adds	r0, #1
 8006604:	f000 80aa 	beq.w	800675c <_svfiprintf_r+0x1c8>
 8006608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800660a:	445a      	add	r2, fp
 800660c:	9209      	str	r2, [sp, #36]	; 0x24
 800660e:	f89a 3000 	ldrb.w	r3, [sl]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80a2 	beq.w	800675c <_svfiprintf_r+0x1c8>
 8006618:	2300      	movs	r3, #0
 800661a:	f04f 32ff 	mov.w	r2, #4294967295
 800661e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006622:	f10a 0a01 	add.w	sl, sl, #1
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800662e:	931a      	str	r3, [sp, #104]	; 0x68
 8006630:	4654      	mov	r4, sl
 8006632:	2205      	movs	r2, #5
 8006634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006638:	4851      	ldr	r0, [pc, #324]	; (8006780 <_svfiprintf_r+0x1ec>)
 800663a:	f7f9 fdd9 	bl	80001f0 <memchr>
 800663e:	9a04      	ldr	r2, [sp, #16]
 8006640:	b9d8      	cbnz	r0, 800667a <_svfiprintf_r+0xe6>
 8006642:	06d0      	lsls	r0, r2, #27
 8006644:	bf44      	itt	mi
 8006646:	2320      	movmi	r3, #32
 8006648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800664c:	0711      	lsls	r1, r2, #28
 800664e:	bf44      	itt	mi
 8006650:	232b      	movmi	r3, #43	; 0x2b
 8006652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006656:	f89a 3000 	ldrb.w	r3, [sl]
 800665a:	2b2a      	cmp	r3, #42	; 0x2a
 800665c:	d015      	beq.n	800668a <_svfiprintf_r+0xf6>
 800665e:	9a07      	ldr	r2, [sp, #28]
 8006660:	4654      	mov	r4, sl
 8006662:	2000      	movs	r0, #0
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4621      	mov	r1, r4
 800666a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666e:	3b30      	subs	r3, #48	; 0x30
 8006670:	2b09      	cmp	r3, #9
 8006672:	d94e      	bls.n	8006712 <_svfiprintf_r+0x17e>
 8006674:	b1b0      	cbz	r0, 80066a4 <_svfiprintf_r+0x110>
 8006676:	9207      	str	r2, [sp, #28]
 8006678:	e014      	b.n	80066a4 <_svfiprintf_r+0x110>
 800667a:	eba0 0308 	sub.w	r3, r0, r8
 800667e:	fa09 f303 	lsl.w	r3, r9, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	46a2      	mov	sl, r4
 8006688:	e7d2      	b.n	8006630 <_svfiprintf_r+0x9c>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	9103      	str	r1, [sp, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfbb      	ittet	lt
 8006696:	425b      	neglt	r3, r3
 8006698:	f042 0202 	orrlt.w	r2, r2, #2
 800669c:	9307      	strge	r3, [sp, #28]
 800669e:	9307      	strlt	r3, [sp, #28]
 80066a0:	bfb8      	it	lt
 80066a2:	9204      	strlt	r2, [sp, #16]
 80066a4:	7823      	ldrb	r3, [r4, #0]
 80066a6:	2b2e      	cmp	r3, #46	; 0x2e
 80066a8:	d10c      	bne.n	80066c4 <_svfiprintf_r+0x130>
 80066aa:	7863      	ldrb	r3, [r4, #1]
 80066ac:	2b2a      	cmp	r3, #42	; 0x2a
 80066ae:	d135      	bne.n	800671c <_svfiprintf_r+0x188>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9203      	str	r2, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bfb8      	it	lt
 80066bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80066c0:	3402      	adds	r4, #2
 80066c2:	9305      	str	r3, [sp, #20]
 80066c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006790 <_svfiprintf_r+0x1fc>
 80066c8:	7821      	ldrb	r1, [r4, #0]
 80066ca:	2203      	movs	r2, #3
 80066cc:	4650      	mov	r0, sl
 80066ce:	f7f9 fd8f 	bl	80001f0 <memchr>
 80066d2:	b140      	cbz	r0, 80066e6 <_svfiprintf_r+0x152>
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	eba0 000a 	sub.w	r0, r0, sl
 80066da:	fa03 f000 	lsl.w	r0, r3, r0
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	4303      	orrs	r3, r0
 80066e2:	3401      	adds	r4, #1
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ea:	4826      	ldr	r0, [pc, #152]	; (8006784 <_svfiprintf_r+0x1f0>)
 80066ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066f0:	2206      	movs	r2, #6
 80066f2:	f7f9 fd7d 	bl	80001f0 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d038      	beq.n	800676c <_svfiprintf_r+0x1d8>
 80066fa:	4b23      	ldr	r3, [pc, #140]	; (8006788 <_svfiprintf_r+0x1f4>)
 80066fc:	bb1b      	cbnz	r3, 8006746 <_svfiprintf_r+0x1b2>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	3308      	adds	r3, #8
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670c:	4433      	add	r3, r6
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	e767      	b.n	80065e2 <_svfiprintf_r+0x4e>
 8006712:	fb0c 3202 	mla	r2, ip, r2, r3
 8006716:	460c      	mov	r4, r1
 8006718:	2001      	movs	r0, #1
 800671a:	e7a5      	b.n	8006668 <_svfiprintf_r+0xd4>
 800671c:	2300      	movs	r3, #0
 800671e:	3401      	adds	r4, #1
 8006720:	9305      	str	r3, [sp, #20]
 8006722:	4619      	mov	r1, r3
 8006724:	f04f 0c0a 	mov.w	ip, #10
 8006728:	4620      	mov	r0, r4
 800672a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672e:	3a30      	subs	r2, #48	; 0x30
 8006730:	2a09      	cmp	r2, #9
 8006732:	d903      	bls.n	800673c <_svfiprintf_r+0x1a8>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0c5      	beq.n	80066c4 <_svfiprintf_r+0x130>
 8006738:	9105      	str	r1, [sp, #20]
 800673a:	e7c3      	b.n	80066c4 <_svfiprintf_r+0x130>
 800673c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006740:	4604      	mov	r4, r0
 8006742:	2301      	movs	r3, #1
 8006744:	e7f0      	b.n	8006728 <_svfiprintf_r+0x194>
 8006746:	ab03      	add	r3, sp, #12
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	462a      	mov	r2, r5
 800674c:	4b0f      	ldr	r3, [pc, #60]	; (800678c <_svfiprintf_r+0x1f8>)
 800674e:	a904      	add	r1, sp, #16
 8006750:	4638      	mov	r0, r7
 8006752:	f3af 8000 	nop.w
 8006756:	1c42      	adds	r2, r0, #1
 8006758:	4606      	mov	r6, r0
 800675a:	d1d6      	bne.n	800670a <_svfiprintf_r+0x176>
 800675c:	89ab      	ldrh	r3, [r5, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af2c 	bmi.w	80065bc <_svfiprintf_r+0x28>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	b01d      	add	sp, #116	; 0x74
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	462a      	mov	r2, r5
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <_svfiprintf_r+0x1f8>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4638      	mov	r0, r7
 8006778:	f000 f87a 	bl	8006870 <_printf_i>
 800677c:	e7eb      	b.n	8006756 <_svfiprintf_r+0x1c2>
 800677e:	bf00      	nop
 8006780:	08006d98 	.word	0x08006d98
 8006784:	08006da2 	.word	0x08006da2
 8006788:	00000000 	.word	0x00000000
 800678c:	080064dd 	.word	0x080064dd
 8006790:	08006d9e 	.word	0x08006d9e

08006794 <_printf_common>:
 8006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	4616      	mov	r6, r2
 800679a:	4699      	mov	r9, r3
 800679c:	688a      	ldr	r2, [r1, #8]
 800679e:	690b      	ldr	r3, [r1, #16]
 80067a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067a4:	4293      	cmp	r3, r2
 80067a6:	bfb8      	it	lt
 80067a8:	4613      	movlt	r3, r2
 80067aa:	6033      	str	r3, [r6, #0]
 80067ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067b0:	4607      	mov	r7, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	b10a      	cbz	r2, 80067ba <_printf_common+0x26>
 80067b6:	3301      	adds	r3, #1
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	0699      	lsls	r1, r3, #26
 80067be:	bf42      	ittt	mi
 80067c0:	6833      	ldrmi	r3, [r6, #0]
 80067c2:	3302      	addmi	r3, #2
 80067c4:	6033      	strmi	r3, [r6, #0]
 80067c6:	6825      	ldr	r5, [r4, #0]
 80067c8:	f015 0506 	ands.w	r5, r5, #6
 80067cc:	d106      	bne.n	80067dc <_printf_common+0x48>
 80067ce:	f104 0a19 	add.w	sl, r4, #25
 80067d2:	68e3      	ldr	r3, [r4, #12]
 80067d4:	6832      	ldr	r2, [r6, #0]
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	42ab      	cmp	r3, r5
 80067da:	dc26      	bgt.n	800682a <_printf_common+0x96>
 80067dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067e0:	1e13      	subs	r3, r2, #0
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	bf18      	it	ne
 80067e6:	2301      	movne	r3, #1
 80067e8:	0692      	lsls	r2, r2, #26
 80067ea:	d42b      	bmi.n	8006844 <_printf_common+0xb0>
 80067ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067f0:	4649      	mov	r1, r9
 80067f2:	4638      	mov	r0, r7
 80067f4:	47c0      	blx	r8
 80067f6:	3001      	adds	r0, #1
 80067f8:	d01e      	beq.n	8006838 <_printf_common+0xa4>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	68e5      	ldr	r5, [r4, #12]
 80067fe:	6832      	ldr	r2, [r6, #0]
 8006800:	f003 0306 	and.w	r3, r3, #6
 8006804:	2b04      	cmp	r3, #4
 8006806:	bf08      	it	eq
 8006808:	1aad      	subeq	r5, r5, r2
 800680a:	68a3      	ldr	r3, [r4, #8]
 800680c:	6922      	ldr	r2, [r4, #16]
 800680e:	bf0c      	ite	eq
 8006810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006814:	2500      	movne	r5, #0
 8006816:	4293      	cmp	r3, r2
 8006818:	bfc4      	itt	gt
 800681a:	1a9b      	subgt	r3, r3, r2
 800681c:	18ed      	addgt	r5, r5, r3
 800681e:	2600      	movs	r6, #0
 8006820:	341a      	adds	r4, #26
 8006822:	42b5      	cmp	r5, r6
 8006824:	d11a      	bne.n	800685c <_printf_common+0xc8>
 8006826:	2000      	movs	r0, #0
 8006828:	e008      	b.n	800683c <_printf_common+0xa8>
 800682a:	2301      	movs	r3, #1
 800682c:	4652      	mov	r2, sl
 800682e:	4649      	mov	r1, r9
 8006830:	4638      	mov	r0, r7
 8006832:	47c0      	blx	r8
 8006834:	3001      	adds	r0, #1
 8006836:	d103      	bne.n	8006840 <_printf_common+0xac>
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006840:	3501      	adds	r5, #1
 8006842:	e7c6      	b.n	80067d2 <_printf_common+0x3e>
 8006844:	18e1      	adds	r1, r4, r3
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	2030      	movs	r0, #48	; 0x30
 800684a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800684e:	4422      	add	r2, r4
 8006850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006858:	3302      	adds	r3, #2
 800685a:	e7c7      	b.n	80067ec <_printf_common+0x58>
 800685c:	2301      	movs	r3, #1
 800685e:	4622      	mov	r2, r4
 8006860:	4649      	mov	r1, r9
 8006862:	4638      	mov	r0, r7
 8006864:	47c0      	blx	r8
 8006866:	3001      	adds	r0, #1
 8006868:	d0e6      	beq.n	8006838 <_printf_common+0xa4>
 800686a:	3601      	adds	r6, #1
 800686c:	e7d9      	b.n	8006822 <_printf_common+0x8e>
	...

08006870 <_printf_i>:
 8006870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	7e0f      	ldrb	r7, [r1, #24]
 8006876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006878:	2f78      	cmp	r7, #120	; 0x78
 800687a:	4691      	mov	r9, r2
 800687c:	4680      	mov	r8, r0
 800687e:	460c      	mov	r4, r1
 8006880:	469a      	mov	sl, r3
 8006882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006886:	d807      	bhi.n	8006898 <_printf_i+0x28>
 8006888:	2f62      	cmp	r7, #98	; 0x62
 800688a:	d80a      	bhi.n	80068a2 <_printf_i+0x32>
 800688c:	2f00      	cmp	r7, #0
 800688e:	f000 80d8 	beq.w	8006a42 <_printf_i+0x1d2>
 8006892:	2f58      	cmp	r7, #88	; 0x58
 8006894:	f000 80a3 	beq.w	80069de <_printf_i+0x16e>
 8006898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800689c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068a0:	e03a      	b.n	8006918 <_printf_i+0xa8>
 80068a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068a6:	2b15      	cmp	r3, #21
 80068a8:	d8f6      	bhi.n	8006898 <_printf_i+0x28>
 80068aa:	a101      	add	r1, pc, #4	; (adr r1, 80068b0 <_printf_i+0x40>)
 80068ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068b0:	08006909 	.word	0x08006909
 80068b4:	0800691d 	.word	0x0800691d
 80068b8:	08006899 	.word	0x08006899
 80068bc:	08006899 	.word	0x08006899
 80068c0:	08006899 	.word	0x08006899
 80068c4:	08006899 	.word	0x08006899
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006899 	.word	0x08006899
 80068d0:	08006899 	.word	0x08006899
 80068d4:	08006899 	.word	0x08006899
 80068d8:	08006899 	.word	0x08006899
 80068dc:	08006a29 	.word	0x08006a29
 80068e0:	0800694d 	.word	0x0800694d
 80068e4:	08006a0b 	.word	0x08006a0b
 80068e8:	08006899 	.word	0x08006899
 80068ec:	08006899 	.word	0x08006899
 80068f0:	08006a4b 	.word	0x08006a4b
 80068f4:	08006899 	.word	0x08006899
 80068f8:	0800694d 	.word	0x0800694d
 80068fc:	08006899 	.word	0x08006899
 8006900:	08006899 	.word	0x08006899
 8006904:	08006a13 	.word	0x08006a13
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	602a      	str	r2, [r5, #0]
 8006910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006918:	2301      	movs	r3, #1
 800691a:	e0a3      	b.n	8006a64 <_printf_i+0x1f4>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	6829      	ldr	r1, [r5, #0]
 8006920:	0606      	lsls	r6, r0, #24
 8006922:	f101 0304 	add.w	r3, r1, #4
 8006926:	d50a      	bpl.n	800693e <_printf_i+0xce>
 8006928:	680e      	ldr	r6, [r1, #0]
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	2e00      	cmp	r6, #0
 800692e:	da03      	bge.n	8006938 <_printf_i+0xc8>
 8006930:	232d      	movs	r3, #45	; 0x2d
 8006932:	4276      	negs	r6, r6
 8006934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006938:	485e      	ldr	r0, [pc, #376]	; (8006ab4 <_printf_i+0x244>)
 800693a:	230a      	movs	r3, #10
 800693c:	e019      	b.n	8006972 <_printf_i+0x102>
 800693e:	680e      	ldr	r6, [r1, #0]
 8006940:	602b      	str	r3, [r5, #0]
 8006942:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006946:	bf18      	it	ne
 8006948:	b236      	sxthne	r6, r6
 800694a:	e7ef      	b.n	800692c <_printf_i+0xbc>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	1d19      	adds	r1, r3, #4
 8006952:	6029      	str	r1, [r5, #0]
 8006954:	0601      	lsls	r1, r0, #24
 8006956:	d501      	bpl.n	800695c <_printf_i+0xec>
 8006958:	681e      	ldr	r6, [r3, #0]
 800695a:	e002      	b.n	8006962 <_printf_i+0xf2>
 800695c:	0646      	lsls	r6, r0, #25
 800695e:	d5fb      	bpl.n	8006958 <_printf_i+0xe8>
 8006960:	881e      	ldrh	r6, [r3, #0]
 8006962:	4854      	ldr	r0, [pc, #336]	; (8006ab4 <_printf_i+0x244>)
 8006964:	2f6f      	cmp	r7, #111	; 0x6f
 8006966:	bf0c      	ite	eq
 8006968:	2308      	moveq	r3, #8
 800696a:	230a      	movne	r3, #10
 800696c:	2100      	movs	r1, #0
 800696e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006972:	6865      	ldr	r5, [r4, #4]
 8006974:	60a5      	str	r5, [r4, #8]
 8006976:	2d00      	cmp	r5, #0
 8006978:	bfa2      	ittt	ge
 800697a:	6821      	ldrge	r1, [r4, #0]
 800697c:	f021 0104 	bicge.w	r1, r1, #4
 8006980:	6021      	strge	r1, [r4, #0]
 8006982:	b90e      	cbnz	r6, 8006988 <_printf_i+0x118>
 8006984:	2d00      	cmp	r5, #0
 8006986:	d04d      	beq.n	8006a24 <_printf_i+0x1b4>
 8006988:	4615      	mov	r5, r2
 800698a:	fbb6 f1f3 	udiv	r1, r6, r3
 800698e:	fb03 6711 	mls	r7, r3, r1, r6
 8006992:	5dc7      	ldrb	r7, [r0, r7]
 8006994:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006998:	4637      	mov	r7, r6
 800699a:	42bb      	cmp	r3, r7
 800699c:	460e      	mov	r6, r1
 800699e:	d9f4      	bls.n	800698a <_printf_i+0x11a>
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d10b      	bne.n	80069bc <_printf_i+0x14c>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	07de      	lsls	r6, r3, #31
 80069a8:	d508      	bpl.n	80069bc <_printf_i+0x14c>
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	6861      	ldr	r1, [r4, #4]
 80069ae:	4299      	cmp	r1, r3
 80069b0:	bfde      	ittt	le
 80069b2:	2330      	movle	r3, #48	; 0x30
 80069b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069bc:	1b52      	subs	r2, r2, r5
 80069be:	6122      	str	r2, [r4, #16]
 80069c0:	f8cd a000 	str.w	sl, [sp]
 80069c4:	464b      	mov	r3, r9
 80069c6:	aa03      	add	r2, sp, #12
 80069c8:	4621      	mov	r1, r4
 80069ca:	4640      	mov	r0, r8
 80069cc:	f7ff fee2 	bl	8006794 <_printf_common>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d14c      	bne.n	8006a6e <_printf_i+0x1fe>
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	b004      	add	sp, #16
 80069da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069de:	4835      	ldr	r0, [pc, #212]	; (8006ab4 <_printf_i+0x244>)
 80069e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069e4:	6829      	ldr	r1, [r5, #0]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80069ec:	6029      	str	r1, [r5, #0]
 80069ee:	061d      	lsls	r5, r3, #24
 80069f0:	d514      	bpl.n	8006a1c <_printf_i+0x1ac>
 80069f2:	07df      	lsls	r7, r3, #31
 80069f4:	bf44      	itt	mi
 80069f6:	f043 0320 	orrmi.w	r3, r3, #32
 80069fa:	6023      	strmi	r3, [r4, #0]
 80069fc:	b91e      	cbnz	r6, 8006a06 <_printf_i+0x196>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	f023 0320 	bic.w	r3, r3, #32
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	2310      	movs	r3, #16
 8006a08:	e7b0      	b.n	800696c <_printf_i+0xfc>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	f043 0320 	orr.w	r3, r3, #32
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	2378      	movs	r3, #120	; 0x78
 8006a14:	4828      	ldr	r0, [pc, #160]	; (8006ab8 <_printf_i+0x248>)
 8006a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a1a:	e7e3      	b.n	80069e4 <_printf_i+0x174>
 8006a1c:	0659      	lsls	r1, r3, #25
 8006a1e:	bf48      	it	mi
 8006a20:	b2b6      	uxthmi	r6, r6
 8006a22:	e7e6      	b.n	80069f2 <_printf_i+0x182>
 8006a24:	4615      	mov	r5, r2
 8006a26:	e7bb      	b.n	80069a0 <_printf_i+0x130>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	6826      	ldr	r6, [r4, #0]
 8006a2c:	6961      	ldr	r1, [r4, #20]
 8006a2e:	1d18      	adds	r0, r3, #4
 8006a30:	6028      	str	r0, [r5, #0]
 8006a32:	0635      	lsls	r5, r6, #24
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	d501      	bpl.n	8006a3c <_printf_i+0x1cc>
 8006a38:	6019      	str	r1, [r3, #0]
 8006a3a:	e002      	b.n	8006a42 <_printf_i+0x1d2>
 8006a3c:	0670      	lsls	r0, r6, #25
 8006a3e:	d5fb      	bpl.n	8006a38 <_printf_i+0x1c8>
 8006a40:	8019      	strh	r1, [r3, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	4615      	mov	r5, r2
 8006a48:	e7ba      	b.n	80069c0 <_printf_i+0x150>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	1d1a      	adds	r2, r3, #4
 8006a4e:	602a      	str	r2, [r5, #0]
 8006a50:	681d      	ldr	r5, [r3, #0]
 8006a52:	6862      	ldr	r2, [r4, #4]
 8006a54:	2100      	movs	r1, #0
 8006a56:	4628      	mov	r0, r5
 8006a58:	f7f9 fbca 	bl	80001f0 <memchr>
 8006a5c:	b108      	cbz	r0, 8006a62 <_printf_i+0x1f2>
 8006a5e:	1b40      	subs	r0, r0, r5
 8006a60:	6060      	str	r0, [r4, #4]
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	2300      	movs	r3, #0
 8006a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a6c:	e7a8      	b.n	80069c0 <_printf_i+0x150>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4649      	mov	r1, r9
 8006a74:	4640      	mov	r0, r8
 8006a76:	47d0      	blx	sl
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d0ab      	beq.n	80069d4 <_printf_i+0x164>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	079b      	lsls	r3, r3, #30
 8006a80:	d413      	bmi.n	8006aaa <_printf_i+0x23a>
 8006a82:	68e0      	ldr	r0, [r4, #12]
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	4298      	cmp	r0, r3
 8006a88:	bfb8      	it	lt
 8006a8a:	4618      	movlt	r0, r3
 8006a8c:	e7a4      	b.n	80069d8 <_printf_i+0x168>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4632      	mov	r2, r6
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d09b      	beq.n	80069d4 <_printf_i+0x164>
 8006a9c:	3501      	adds	r5, #1
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	9903      	ldr	r1, [sp, #12]
 8006aa2:	1a5b      	subs	r3, r3, r1
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	dcf2      	bgt.n	8006a8e <_printf_i+0x21e>
 8006aa8:	e7eb      	b.n	8006a82 <_printf_i+0x212>
 8006aaa:	2500      	movs	r5, #0
 8006aac:	f104 0619 	add.w	r6, r4, #25
 8006ab0:	e7f5      	b.n	8006a9e <_printf_i+0x22e>
 8006ab2:	bf00      	nop
 8006ab4:	08006da9 	.word	0x08006da9
 8006ab8:	08006dba 	.word	0x08006dba

08006abc <memmove>:
 8006abc:	4288      	cmp	r0, r1
 8006abe:	b510      	push	{r4, lr}
 8006ac0:	eb01 0402 	add.w	r4, r1, r2
 8006ac4:	d902      	bls.n	8006acc <memmove+0x10>
 8006ac6:	4284      	cmp	r4, r0
 8006ac8:	4623      	mov	r3, r4
 8006aca:	d807      	bhi.n	8006adc <memmove+0x20>
 8006acc:	1e43      	subs	r3, r0, #1
 8006ace:	42a1      	cmp	r1, r4
 8006ad0:	d008      	beq.n	8006ae4 <memmove+0x28>
 8006ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ada:	e7f8      	b.n	8006ace <memmove+0x12>
 8006adc:	4402      	add	r2, r0
 8006ade:	4601      	mov	r1, r0
 8006ae0:	428a      	cmp	r2, r1
 8006ae2:	d100      	bne.n	8006ae6 <memmove+0x2a>
 8006ae4:	bd10      	pop	{r4, pc}
 8006ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aee:	e7f7      	b.n	8006ae0 <memmove+0x24>

08006af0 <_realloc_r>:
 8006af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af4:	4680      	mov	r8, r0
 8006af6:	4614      	mov	r4, r2
 8006af8:	460e      	mov	r6, r1
 8006afa:	b921      	cbnz	r1, 8006b06 <_realloc_r+0x16>
 8006afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b00:	4611      	mov	r1, r2
 8006b02:	f7ff bb85 	b.w	8006210 <_malloc_r>
 8006b06:	b92a      	cbnz	r2, 8006b14 <_realloc_r+0x24>
 8006b08:	f7ff fc9c 	bl	8006444 <_free_r>
 8006b0c:	4625      	mov	r5, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b14:	f000 f81b 	bl	8006b4e <_malloc_usable_size_r>
 8006b18:	4284      	cmp	r4, r0
 8006b1a:	4607      	mov	r7, r0
 8006b1c:	d802      	bhi.n	8006b24 <_realloc_r+0x34>
 8006b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b22:	d812      	bhi.n	8006b4a <_realloc_r+0x5a>
 8006b24:	4621      	mov	r1, r4
 8006b26:	4640      	mov	r0, r8
 8006b28:	f7ff fb72 	bl	8006210 <_malloc_r>
 8006b2c:	4605      	mov	r5, r0
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d0ed      	beq.n	8006b0e <_realloc_r+0x1e>
 8006b32:	42bc      	cmp	r4, r7
 8006b34:	4622      	mov	r2, r4
 8006b36:	4631      	mov	r1, r6
 8006b38:	bf28      	it	cs
 8006b3a:	463a      	movcs	r2, r7
 8006b3c:	f7ff fb32 	bl	80061a4 <memcpy>
 8006b40:	4631      	mov	r1, r6
 8006b42:	4640      	mov	r0, r8
 8006b44:	f7ff fc7e 	bl	8006444 <_free_r>
 8006b48:	e7e1      	b.n	8006b0e <_realloc_r+0x1e>
 8006b4a:	4635      	mov	r5, r6
 8006b4c:	e7df      	b.n	8006b0e <_realloc_r+0x1e>

08006b4e <_malloc_usable_size_r>:
 8006b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b52:	1f18      	subs	r0, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfbc      	itt	lt
 8006b58:	580b      	ldrlt	r3, [r1, r0]
 8006b5a:	18c0      	addlt	r0, r0, r3
 8006b5c:	4770      	bx	lr
	...

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
