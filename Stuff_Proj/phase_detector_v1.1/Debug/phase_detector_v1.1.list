
phase_detector_v1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000581c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d18  08005d18  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d18  08005d18  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d18  08005d18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000070  08005d90  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08005d90  00020658  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd18  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002714  00000000  00000000  0002ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000304c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  000312c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019af9  00000000  00000000  00031fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe9e  00000000  00000000  0004bad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd79  00000000  00000000  0005b96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e86e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000e8738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005910 	.word	0x08005910

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005910 	.word	0x08005910

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1);
 8000914:	1d39      	adds	r1, r7, #4
 8000916:	2301      	movs	r3, #1
 8000918:	2201      	movs	r2, #1
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <__io_putchar+0x20>)
 800091c:	f002 fa22 	bl	8002d64 <HAL_UART_Transmit>
  return ch;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000015c 	.word	0x2000015c

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 fc65 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f825 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093e:	f000 f933 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000942:	f000 f8b3 	bl	8000aac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000946:	f000 f8db 	bl	8000b00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800094a:	f000 f903 	bl	8000b54 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800094e:	f000 f861 	bl	8000a14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Logi("Main app running");
 8000952:	f000 fcaf 	bl	80012b4 <HAL_GetTick>
 8000956:	4602      	mov	r2, r0
 8000958:	4908      	ldr	r1, [pc, #32]	; (800097c <main+0x4c>)
 800095a:	236c      	movs	r3, #108	; 0x6c
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	460b      	mov	r3, r1
 8000960:	4907      	ldr	r1, [pc, #28]	; (8000980 <main+0x50>)
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <main+0x54>)
 8000964:	f004 f882 	bl	8004a6c <iprintf>
  appMeasureInit();
 8000968:	f003 f95a 	bl	8003c20 <appMeasureInit>
  appUartInit();
 800096c:	f003 f95e 	bl	8003c2c <appUartInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  processMeasure();
 8000970:	f003 f81a 	bl	80039a8 <processMeasure>
	  processSimData();
 8000974:	f003 fa1c 	bl	8003db0 <processSimData>
  {
 8000978:	e7fa      	b.n	8000970 <main+0x40>
 800097a:	bf00      	nop
 800097c:	08005934 	.word	0x08005934
 8000980:	0800593c 	.word	0x0800593c
 8000984:	08005948 	.word	0x08005948

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b090      	sub	sp, #64	; 0x40
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	2228      	movs	r2, #40	; 0x28
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 ff84 	bl	80048a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f909 	bl	8001be8 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009dc:	f000 f972 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e0:	230f      	movs	r3, #15
 80009e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2302      	movs	r3, #2
 80009e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fb76 	bl	80020ec <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a06:	f000 f95d 	bl	8000cc4 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3740      	adds	r7, #64	; 0x40
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <MX_TIM4_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a38:	2247      	movs	r2, #71	; 0x47
 8000a3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a44:	2263      	movs	r2, #99	; 0x63
 8000a46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a56:	f001 fce1 	bl	800241c <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000a60:	f000 f930 	bl	8000cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a72:	f001 feab 	bl	80027cc <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000a7c:	f000 f922 	bl	8000cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_TIM4_Init+0x90>)
 8000a8e:	f002 f87d 	bl	8002b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000a98:	f000 f914 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000008c 	.word	0x2000008c
 8000aa8:	40000800 	.word	0x40000800

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART1_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f002 f8c2 	bl	8002c6c <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f8e9 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000d4 	.word	0x200000d4
 8000afc:	40013800 	.word	0x40013800

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART2_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b38:	f002 f898 	bl	8002c6c <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f8bf 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000118 	.word	0x20000118
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART3_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART3_UART_Init+0x4c>)
 8000b8c:	f002 f86e 	bl	8002c6c <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f895 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000015c 	.word	0x2000015c
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbc:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bc2:	f043 0320 	orr.w	r3, r3, #32
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0320 	and.w	r3, r3, #32
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a35      	ldr	r2, [pc, #212]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <MX_GPIO_Init+0x108>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	482a      	ldr	r0, [pc, #168]	; (8000cb4 <MX_GPIO_Init+0x10c>)
 8000c0c:	f000 ffbc 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2138      	movs	r1, #56	; 0x38
 8000c14:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <MX_GPIO_Init+0x110>)
 8000c16:	f000 ffb7 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : L1_Pin L2_Pin L3_Pin */
  GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 8000c1a:	23e0      	movs	r3, #224	; 0xe0
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MX_GPIO_Init+0x114>)
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4821      	ldr	r0, [pc, #132]	; (8000cb4 <MX_GPIO_Init+0x10c>)
 8000c2e:	f000 fd6b 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8000c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_GPIO_Init+0x118>)
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <MX_GPIO_Init+0x10c>)
 8000c48:	f000 fd5e 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_GPIO_Init+0x10c>)
 8000c66:	f000 fd4f 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8000c6a:	2338      	movs	r3, #56	; 0x38
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <MX_GPIO_Init+0x110>)
 8000c82:	f000 fd41 	bl	8001708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2017      	movs	r0, #23
 8000c8c:	f000 fc3b 	bl	8001506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c90:	2017      	movs	r0, #23
 8000c92:	f000 fc54 	bl	800153e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2028      	movs	r0, #40	; 0x28
 8000c9c:	f000 fc33 	bl	8001506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ca0:	2028      	movs	r0, #40	; 0x28
 8000ca2:	f000 fc4c 	bl	800153e <HAL_NVIC_EnableIRQ>

}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40010c00 	.word	0x40010c00
 8000cbc:	10210000 	.word	0x10210000
 8000cc0:	10110000 	.word	0x10110000

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_MspInit+0x5c>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_MspInit+0x5c>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_MspInit+0x60>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_MspInit+0x60>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000

08000d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0x44>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d113      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	201e      	movs	r0, #30
 8000d64:	f000 fbcf 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d68:	201e      	movs	r0, #30
 8000d6a:	f000 fbe8 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40000800 	.word	0x40000800
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	; 0x30
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a5b      	ldr	r2, [pc, #364]	; (8000f08 <HAL_UART_MspInit+0x188>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d13a      	bne.n	8000e16 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da0:	4b5a      	ldr	r3, [pc, #360]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a59      	ldr	r2, [pc, #356]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b57      	ldr	r3, [pc, #348]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8000dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4619      	mov	r1, r3
 8000de4:	484a      	ldr	r0, [pc, #296]	; (8000f10 <HAL_UART_MspInit+0x190>)
 8000de6:	f000 fc8f 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8000dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4844      	ldr	r0, [pc, #272]	; (8000f10 <HAL_UART_MspInit+0x190>)
 8000e00:	f000 fc82 	bl	8001708 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2025      	movs	r0, #37	; 0x25
 8000e0a:	f000 fb7c 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0e:	2025      	movs	r0, #37	; 0x25
 8000e10:	f000 fb95 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e14:	e074      	b.n	8000f00 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a3e      	ldr	r2, [pc, #248]	; (8000f14 <HAL_UART_MspInit+0x194>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d138      	bne.n	8000e92 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	4a39      	ldr	r2, [pc, #228]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2a:	61d3      	str	r3, [r2, #28]
 8000e2c:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8000e50:	2304      	movs	r3, #4
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0320 	add.w	r3, r7, #32
 8000e60:	4619      	mov	r1, r3
 8000e62:	482b      	ldr	r0, [pc, #172]	; (8000f10 <HAL_UART_MspInit+0x190>)
 8000e64:	f000 fc50 	bl	8001708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4825      	ldr	r0, [pc, #148]	; (8000f10 <HAL_UART_MspInit+0x190>)
 8000e7c:	f000 fc44 	bl	8001708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2026      	movs	r0, #38	; 0x26
 8000e86:	f000 fb3e 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e8a:	2026      	movs	r0, #38	; 0x26
 8000e8c:	f000 fb57 	bl	800153e <HAL_NVIC_EnableIRQ>
}
 8000e90:	e036      	b.n	8000f00 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_UART_MspInit+0x198>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d131      	bne.n	8000f00 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea6:	61d3      	str	r3, [r2, #28]
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_UART_MspInit+0x18c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480e      	ldr	r0, [pc, #56]	; (8000f1c <HAL_UART_MspInit+0x19c>)
 8000ee2:	f000 fc11 	bl	8001708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DBG_RX_Pin;
 8000ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <HAL_UART_MspInit+0x19c>)
 8000efc:	f000 fc04 	bl	8001708 <HAL_GPIO_Init>
}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40004800 	.word	0x40004800
 8000f1c:	40010c00 	.word	0x40010c00

08000f20 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_UART_MspDeInit+0x80>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10e      	bne.n	8000f50 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_UART_MspDeInit+0x84>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <HAL_UART_MspDeInit+0x84>)
 8000f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f3c:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPS_TX_Pin|GPS_RX_Pin);
 8000f3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <HAL_UART_MspDeInit+0x88>)
 8000f44:	f000 fd64 	bl	8001a10 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000f48:	2025      	movs	r0, #37	; 0x25
 8000f4a:	f000 fb06 	bl	800155a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8000f4e:	e022      	b.n	8000f96 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a15      	ldr	r2, [pc, #84]	; (8000fac <HAL_UART_MspDeInit+0x8c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10d      	bne.n	8000f76 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_UART_MspDeInit+0x84>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_UART_MspDeInit+0x84>)
 8000f60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f64:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, SIM_TX_Pin|SIM_RX_Pin);
 8000f66:	210c      	movs	r1, #12
 8000f68:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <HAL_UART_MspDeInit+0x88>)
 8000f6a:	f000 fd51 	bl	8001a10 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000f6e:	2026      	movs	r0, #38	; 0x26
 8000f70:	f000 faf3 	bl	800155a <HAL_NVIC_DisableIRQ>
}
 8000f74:	e00f      	b.n	8000f96 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART3)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_UART_MspDeInit+0x90>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d10a      	bne.n	8000f96 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART3_CLK_DISABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_UART_MspDeInit+0x84>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_UART_MspDeInit+0x84>)
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, DBG_TX_Pin|DBG_RX_Pin);
 8000f8c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <HAL_UART_MspDeInit+0x94>)
 8000f92:	f000 fd3d 	bl	8001a10 <HAL_GPIO_DeInit>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010800 	.word	0x40010800
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	40004800 	.word	0x40004800
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f947 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}

08001006 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(L1_Pin);
 800100a:	2020      	movs	r0, #32
 800100c:	f000 fdd4 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L2_Pin);
 8001010:	2040      	movs	r0, #64	; 0x40
 8001012:	f000 fdd1 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(L3_Pin);
 8001016:	2080      	movs	r0, #128	; 0x80
 8001018:	f000 fdce 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM4_IRQHandler+0x10>)
 8001026:	f001 fac9 	bl	80025bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000008c 	.word	0x2000008c

08001034 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <USART1_IRQHandler+0x10>)
 800103a:	f001 ffb1 	bl	8002fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000d4 	.word	0x200000d4

08001048 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <USART2_IRQHandler+0x10>)
 800104e:	f001 ffa7 	bl	8002fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000118 	.word	0x20000118

0800105c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPS_PPS_Pin);
 8001060:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001064:	f000 fda8 	bl	8001bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e00a      	b.n	8001094 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800107e:	f3af 8000 	nop.w
 8001082:	4601      	mov	r1, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	b2ca      	uxtb	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf0      	blt.n	800107e <_read+0x12>
	}

return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e009      	b.n	80010cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fc23 	bl	800090c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf1      	blt.n	80010b8 <_write+0x12>
	}
	return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_close>:

int _close(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001104:	605a      	str	r2, [r3, #4]
	return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
	return 0;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
	...

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f003 fb60 	bl	8004834 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20005000 	.word	0x20005000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	200001a0 	.word	0x200001a0
 80011a8:	20000658 	.word	0x20000658

080011ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011de:	f7ff ffe5 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e2:	f003 fb2d 	bl	8004840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e6:	f7ff fba3 	bl	8000930 <main>
  bx lr
 80011ea:	4770      	bx	lr
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011f4:	08005d20 	.word	0x08005d20
  ldr r2, =_sbss
 80011f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011fc:	20000658 	.word	0x20000658

08001200 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_2_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_Init+0x28>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_Init+0x28>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f96b 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	200f      	movs	r0, #15
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fd56 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f991 	bl	8001576 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f94b 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_IncTick+0x1c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_IncTick+0x20>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <HAL_IncTick+0x20>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200001a4 	.word	0x200001a4

080012b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <HAL_GetTick+0x10>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	200001a4 	.word	0x200001a4

080012c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_GetTick>
 80012d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d005      	beq.n	80012ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_Delay+0x44>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ee:	bf00      	nop
 80012f0:	f7ff ffe0 	bl	80012b4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f7      	bhi.n	80012f0 <HAL_Delay+0x28>
  {
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4906      	ldr	r1, [pc, #24]	; (80013a8 <__NVIC_EnableIRQ+0x34>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db12      	blt.n	80013e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	490a      	ldr	r1, [pc, #40]	; (80013f0 <__NVIC_DisableIRQ+0x44>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	3320      	adds	r3, #32
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013d8:	f3bf 8f4f 	dsb	sy
}
 80013dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013de:	f3bf 8f6f 	isb	sy
}
 80013e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff90 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff09 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff1e 	bl	8001358 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff90 	bl	8001448 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5f 	bl	80013f4 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff11 	bl	8001374 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff1f 	bl	80013ac <__NVIC_DisableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff94 	bl	80014ac <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d008      	beq.n	80015b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e020      	b.n	80015f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 020e 	bic.w	r2, r2, #14
 80015c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
	...

08001604 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001616:	2b02      	cmp	r3, #2
 8001618:	d005      	beq.n	8001626 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2204      	movs	r2, #4
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e051      	b.n	80016ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 020e 	bic.w	r2, r2, #14
 8001634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a22      	ldr	r2, [pc, #136]	; (80016d4 <HAL_DMA_Abort_IT+0xd0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d029      	beq.n	80016a4 <HAL_DMA_Abort_IT+0xa0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <HAL_DMA_Abort_IT+0xd4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d022      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x9c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_DMA_Abort_IT+0xd8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d01a      	beq.n	800169a <HAL_DMA_Abort_IT+0x96>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <HAL_DMA_Abort_IT+0xdc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d012      	beq.n	8001694 <HAL_DMA_Abort_IT+0x90>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_DMA_Abort_IT+0xe0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00a      	beq.n	800168e <HAL_DMA_Abort_IT+0x8a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_DMA_Abort_IT+0xe4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d102      	bne.n	8001688 <HAL_DMA_Abort_IT+0x84>
 8001682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001686:	e00e      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 8001688:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800168c:	e00b      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 800168e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001692:	e008      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	e005      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 800169a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169e:	e002      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 80016a0:	2310      	movs	r3, #16
 80016a2:	e000      	b.n	80016a6 <HAL_DMA_Abort_IT+0xa2>
 80016a4:	2301      	movs	r3, #1
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_DMA_Abort_IT+0xe8>)
 80016a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
    } 
  }
  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020008 	.word	0x40020008
 80016d8:	4002001c 	.word	0x4002001c
 80016dc:	40020030 	.word	0x40020030
 80016e0:	40020044 	.word	0x40020044
 80016e4:	40020058 	.word	0x40020058
 80016e8:	4002006c 	.word	0x4002006c
 80016ec:	40020000 	.word	0x40020000

080016f0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e169      	b.n	80019f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800171c:	2201      	movs	r2, #1
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8158 	bne.w	80019ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a9a      	ldr	r2, [pc, #616]	; (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d05e      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001744:	4a98      	ldr	r2, [pc, #608]	; (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d875      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800174a:	4a98      	ldr	r2, [pc, #608]	; (80019ac <HAL_GPIO_Init+0x2a4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d058      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001750:	4a96      	ldr	r2, [pc, #600]	; (80019ac <HAL_GPIO_Init+0x2a4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d86f      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001756:	4a96      	ldr	r2, [pc, #600]	; (80019b0 <HAL_GPIO_Init+0x2a8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d052      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 800175c:	4a94      	ldr	r2, [pc, #592]	; (80019b0 <HAL_GPIO_Init+0x2a8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d869      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001762:	4a94      	ldr	r2, [pc, #592]	; (80019b4 <HAL_GPIO_Init+0x2ac>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04c      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001768:	4a92      	ldr	r2, [pc, #584]	; (80019b4 <HAL_GPIO_Init+0x2ac>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d863      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800176e:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d046      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001774:	4a90      	ldr	r2, [pc, #576]	; (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d85d      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d82a      	bhi.n	80017d4 <HAL_GPIO_Init+0xcc>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d859      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <HAL_GPIO_Init+0x80>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001803 	.word	0x08001803
 800178c:	080017dd 	.word	0x080017dd
 8001790:	080017ef 	.word	0x080017ef
 8001794:	08001831 	.word	0x08001831
 8001798:	08001837 	.word	0x08001837
 800179c:	08001837 	.word	0x08001837
 80017a0:	08001837 	.word	0x08001837
 80017a4:	08001837 	.word	0x08001837
 80017a8:	08001837 	.word	0x08001837
 80017ac:	08001837 	.word	0x08001837
 80017b0:	08001837 	.word	0x08001837
 80017b4:	08001837 	.word	0x08001837
 80017b8:	08001837 	.word	0x08001837
 80017bc:	08001837 	.word	0x08001837
 80017c0:	08001837 	.word	0x08001837
 80017c4:	08001837 	.word	0x08001837
 80017c8:	08001837 	.word	0x08001837
 80017cc:	080017e5 	.word	0x080017e5
 80017d0:	080017f9 	.word	0x080017f9
 80017d4:	4a79      	ldr	r2, [pc, #484]	; (80019bc <HAL_GPIO_Init+0x2b4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017da:	e02c      	b.n	8001836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e029      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e024      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	3308      	adds	r3, #8
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e01f      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	330c      	adds	r3, #12
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e01a      	b.n	8001838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180a:	2304      	movs	r3, #4
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e013      	b.n	8001838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	611a      	str	r2, [r3, #16]
          break;
 8001822:	e009      	b.n	8001838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001824:	2308      	movs	r3, #8
 8001826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	615a      	str	r2, [r3, #20]
          break;
 800182e:	e003      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x130>
          break;
 8001836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d801      	bhi.n	8001842 <HAL_GPIO_Init+0x13a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_Init+0x13e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d802      	bhi.n	8001854 <HAL_GPIO_Init+0x14c>
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x152>
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	3b08      	subs	r3, #8
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	210f      	movs	r1, #15
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	6a39      	ldr	r1, [r7, #32]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80b1 	beq.w	80019ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001888:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2bc>)
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <HAL_GPIO_Init+0x2c0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d013      	beq.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <HAL_GPIO_Init+0x2c4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_GPIO_Init+0x1e8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3e      	ldr	r2, [pc, #248]	; (80019d0 <HAL_GPIO_Init+0x2c8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0x1e4>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <HAL_GPIO_Init+0x2cc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_GPIO_Init+0x1e0>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e006      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e004      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f4:	2300      	movs	r3, #0
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001906:	492f      	ldr	r1, [pc, #188]	; (80019c4 <HAL_GPIO_Init+0x2bc>)
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	492c      	ldr	r1, [pc, #176]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	4928      	ldr	r1, [pc, #160]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4922      	ldr	r1, [pc, #136]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	491e      	ldr	r1, [pc, #120]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4918      	ldr	r1, [pc, #96]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	4914      	ldr	r1, [pc, #80]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d021      	beq.n	80019dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
 80019a4:	e021      	b.n	80019ea <HAL_GPIO_Init+0x2e2>
 80019a6:	bf00      	nop
 80019a8:	10320000 	.word	0x10320000
 80019ac:	10310000 	.word	0x10310000
 80019b0:	10220000 	.word	0x10220000
 80019b4:	10210000 	.word	0x10210000
 80019b8:	10120000 	.word	0x10120000
 80019bc:	10110000 	.word	0x10110000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40011400 	.word	0x40011400
 80019d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4909      	ldr	r1, [pc, #36]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f47f ae8e 	bne.w	800171c <HAL_GPIO_Init+0x14>
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	372c      	adds	r7, #44	; 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001a1e:	e09a      	b.n	8001b56 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a20:	2201      	movs	r2, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 808d 	beq.w	8001b50 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001a36:	4a4e      	ldr	r2, [pc, #312]	; (8001b70 <HAL_GPIO_DeInit+0x160>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a46      	ldr	r2, [pc, #280]	; (8001b74 <HAL_GPIO_DeInit+0x164>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_DeInit+0x78>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_GPIO_DeInit+0x168>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_DeInit+0x74>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_GPIO_DeInit+0x16c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_DeInit+0x70>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a43      	ldr	r2, [pc, #268]	; (8001b80 <HAL_GPIO_DeInit+0x170>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_DeInit+0x6c>
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_DeInit+0x7a>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_DeInit+0x7a>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_DeInit+0x7a>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_DeInit+0x7a>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d132      	bne.n	8001b00 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001aaa:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_GPIO_DeInit+0x160>)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	482d      	ldr	r0, [pc, #180]	; (8001b70 <HAL_GPIO_DeInit+0x160>)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	492c      	ldr	r1, [pc, #176]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4929      	ldr	r1, [pc, #164]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4925      	ldr	r1, [pc, #148]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4922      	ldr	r1, [pc, #136]	; (8001b84 <HAL_GPIO_DeInit+0x174>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d801      	bhi.n	8001b0a <HAL_GPIO_DeInit+0xfa>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_DeInit+0xfe>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d802      	bhi.n	8001b1c <HAL_GPIO_DeInit+0x10c>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_DeInit+0x112>
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3b08      	subs	r3, #8
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	210f      	movs	r1, #15
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	2104      	movs	r1, #4
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	3301      	adds	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f47f af5e 	bne.w	8001a20 <HAL_GPIO_DeInit+0x10>
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010800 	.word	0x40010800
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40011400 	.word	0x40011400
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fe0a 	bl	80037f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e272      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c14:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d112      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
 8001c20:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x12c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d168      	bne.n	8001d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e24c      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x76>
 8001c50:	4b80      	ldr	r3, [pc, #512]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a7f      	ldr	r2, [pc, #508]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b78      	ldr	r3, [pc, #480]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a77      	ldr	r2, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xbc>
 8001c8a:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a71      	ldr	r2, [pc, #452]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff faf6 	bl	80012b4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff faf2 	bl	80012b4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e200      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe4>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fae2 	bl	80012b4 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fade 	bl	80012b4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1ec      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x10c>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d22:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
 8001d3a:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1c0      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4939      	ldr	r1, [pc, #228]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e03a      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fa97 	bl	80012b4 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fa93 	bl	80012b4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1a1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4927      	ldr	r1, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa76 	bl	80012b4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fa72 	bl	80012b4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e180      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03a      	beq.n	8001e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fa56 	bl	80012b4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fa52 	bl	80012b4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e160      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fad8 	bl	80023e0 <RCC_Delay>
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa3c 	bl	80012b4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff fa38 	bl	80012b4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e146      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420000 	.word	0x42420000
 8001e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	4b92      	ldr	r3, [pc, #584]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e9      	bne.n	8001e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a6 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a87      	ldr	r2, [pc, #540]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b85      	ldr	r3, [pc, #532]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f9f9 	bl	80012b4 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f9f5 	bl	80012b4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	; 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e103      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b75      	ldr	r3, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x312>
 8001eec:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e02d      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x334>
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a69      	ldr	r2, [pc, #420]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a66      	ldr	r2, [pc, #408]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x356>
 8001f24:	4b61      	ldr	r3, [pc, #388]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a60      	ldr	r2, [pc, #384]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a5d      	ldr	r2, [pc, #372]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a5a      	ldr	r2, [pc, #360]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b58      	ldr	r3, [pc, #352]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a57      	ldr	r2, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f9a9 	bl	80012b4 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff f9a5 	bl	80012b4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0b1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x37e>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f993 	bl	80012b4 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff f98f 	bl	80012b4 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d061      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d146      	bne.n	8002072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff f963 	bl	80012b4 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f95f 	bl	80012b4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e06d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4921      	ldr	r1, [pc, #132]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a19      	ldr	r1, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	430b      	orrs	r3, r1
 800203e:	491b      	ldr	r1, [pc, #108]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff f933 	bl	80012b4 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff f92f 	bl	80012b4 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e03d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x46a>
 8002070:	e035      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f91c 	bl	80012b4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff f918 	bl	80012b4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e026      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x498>
 800209e:	e01e      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e019      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_OscConfig+0x500>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7ff f86a 	bl	80012b4 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7ff f866 	bl	80012b4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe ffc8 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08005b58 	.word	0x08005b58
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b490      	push	{r4, r7}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022c6:	4b29      	ldr	r3, [pc, #164]	; (800236c <HAL_RCC_GetSysClockFreq+0xac>)
 80022c8:	1d3c      	adds	r4, r7, #4
 80022ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022d0:	f240 2301 	movw	r3, #513	; 0x201
 80022d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x46>
 80022fe:	e02b      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002302:	623b      	str	r3, [r7, #32]
      break;
 8002304:	e02b      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3328      	adds	r3, #40	; 0x28
 8002310:	443b      	add	r3, r7
 8002312:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002316:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	0c5b      	lsrs	r3, r3, #17
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	3328      	adds	r3, #40	; 0x28
 800232e:	443b      	add	r3, r7
 8002330:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002334:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb4>)
 800233a:	fb03 f202 	mul.w	r2, r3, r2
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	e004      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	623b      	str	r3, [r7, #32]
      break;
 8002356:	e002      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb4>)
 800235a:	623b      	str	r3, [r7, #32]
      break;
 800235c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235e:	6a3b      	ldr	r3, [r7, #32]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bc90      	pop	{r4, r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	08005974 	.word	0x08005974
 8002370:	40021000 	.word	0x40021000
 8002374:	007a1200 	.word	0x007a1200
 8002378:	003d0900 	.word	0x003d0900

0800237c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <HAL_RCC_GetHCLKFreq+0x10>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002394:	f7ff fff2 	bl	800237c <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08005b68 	.word	0x08005b68

080023b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023bc:	f7ff ffde 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	0adb      	lsrs	r3, r3, #11
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08005b68 	.word	0x08005b68

080023e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <RCC_Delay+0x34>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <RCC_Delay+0x38>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0a5b      	lsrs	r3, r3, #9
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023fc:	bf00      	nop
  }
  while (Delay --);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e5a      	subs	r2, r3, #1
 8002402:	60fa      	str	r2, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f9      	bne.n	80023fc <RCC_Delay+0x1c>
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	20000000 	.word	0x20000000
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fc76 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fa9e 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d001      	beq.n	80024d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e03a      	b.n	800254a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_TIM_Base_Start_IT+0x98>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00e      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x58>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d009      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x58>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a14      	ldr	r2, [pc, #80]	; (8002558 <HAL_TIM_Base_Start_IT+0x9c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x58>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <HAL_TIM_Base_Start_IT+0xa0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d111      	bne.n	8002538 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b06      	cmp	r3, #6
 8002524:	d010      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	e007      	b.n	8002548 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800

08002560 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10f      	bne.n	80025a8 <HAL_TIM_Base_Stop_IT+0x48>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a1a      	ldr	r2, [r3, #32]
 800258e:	f240 4344 	movw	r3, #1092	; 0x444
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_Base_Stop_IT+0x48>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d122      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d11b      	bne.n	8002618 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0202 	mvn.w	r2, #2
 80025e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f9b1 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 8002604:	e005      	b.n	8002612 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9a4 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9b3 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d122      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0204 	mvn.w	r2, #4
 800263c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f987 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 8002658:	e005      	b.n	8002666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f97a 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f989 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d122      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b08      	cmp	r3, #8
 8002686:	d11b      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0208 	mvn.w	r2, #8
 8002690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2204      	movs	r2, #4
 8002696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f95d 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 80026ac:	e005      	b.n	80026ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f950 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f95f 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d122      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d11b      	bne.n	8002714 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0210 	mvn.w	r2, #16
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2208      	movs	r2, #8
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f933 	bl	8002966 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f926 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f935 	bl	8002978 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0201 	mvn.w	r2, #1
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f001 fb86 	bl	8003e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d10e      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d107      	bne.n	800276c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa77 	bl	8002c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d10e      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d107      	bne.n	8002798 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8f9 	bl	800298a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0220 	mvn.w	r2, #32
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa42 	bl	8002c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x18>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0b3      	b.n	800294c <HAL_TIM_ConfigClockSource+0x180>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d03e      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xd0>
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	f200 8087 	bhi.w	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	f000 8085 	beq.w	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d87f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d01a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xa2>
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d87b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d050      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x116>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d877      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d03c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xf6>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d873      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d058      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x136>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d86f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d064      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d86b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d060      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d867      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
 8002868:	2b10      	cmp	r3, #16
 800286a:	d05a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800286c:	e062      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f000 f966 	bl	8002b4e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002890:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e04e      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f000 f94f 	bl	8002b4e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028be:	609a      	str	r2, [r3, #8]
      break;
 80028c0:	e03b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 f8c6 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2150      	movs	r1, #80	; 0x50
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f91d 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 80028e0:	e02b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 f8e4 	bl	8002abc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2160      	movs	r1, #96	; 0x60
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f90d 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 8002900:	e01b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	f000 f8a6 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f8fd 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 8002920:	e00b      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f000 f8f4 	bl	8002b1a <TIM_ITRx_SetConfig>
        break;
 8002932:	e002      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002938:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <TIM_Base_SetConfig+0xbc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00b      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d007      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <TIM_Base_SetConfig+0xbc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d108      	bne.n	8002a10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <TIM_Base_SetConfig+0xb8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d103      	bne.n	8002a44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	615a      	str	r2, [r3, #20]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800

08002a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 030a 	bic.w	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f023 0210 	bic.w	r2, r3, #16
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ae6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	031b      	lsls	r3, r3, #12
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002af8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f043 0307 	orr.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b087      	sub	sp, #28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	021a      	lsls	r2, r3, #8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	609a      	str	r2, [r3, #8]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e046      	b.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00e      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d009      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d004      	beq.n	8002c06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10c      	bne.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800

08002c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e03f      	b.n	8002cfe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe f874 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fd0f 	bl	80036d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e021      	b.n	8002d5c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	; 0x24
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d2e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fe f8f5 	bl	8000f20 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d17c      	bne.n	8002e7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_UART_Transmit+0x2c>
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d101      	bne.n	8002d94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e075      	b.n	8002e80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_UART_Transmit+0x3e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e06e      	b.n	8002e80 <HAL_UART_Transmit+0x11c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2221      	movs	r2, #33	; 0x21
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fa7c 	bl	80012b4 <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	d108      	bne.n	8002de6 <HAL_UART_Transmit+0x82>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e003      	b.n	8002dee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002df6:	e02a      	b.n	8002e4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fa93 	bl	800332e <UART_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e036      	b.n	8002e80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e007      	b.n	8002e40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1cf      	bne.n	8002df8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2140      	movs	r1, #64	; 0x40
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa63 	bl	800332e <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e006      	b.n	8002e80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d11d      	bne.n	8002ede <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_UART_Receive_IT+0x26>
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e016      	b.n	8002ee0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_UART_Receive_IT+0x38>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e00f      	b.n	8002ee0 <HAL_UART_Receive_IT+0x58>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fa74 	bl	80033c2 <UART_Start_Receive_IT>
 8002eda:	4603      	mov	r3, r0
 8002edc:	e000      	b.n	8002ee0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002efe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0210 	bic.w	r2, r2, #16
 8002f26:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d024      	beq.n	8002f80 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f44:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fb17 	bl	800158e <HAL_DMA_Abort>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fbc0 	bl	80016f0 <HAL_DMA_GetError>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d104      	bne.n	8002f80 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e00a      	b.n	8002f96 <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x52>
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fac9 	bl	8003582 <UART_Receive_IT>
      return;
 8002ff0:	e17b      	b.n	80032ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80b1 	beq.w	800315c <HAL_UART_IRQHandler+0x1bc>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_UART_IRQHandler+0x70>
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80a6 	beq.w	800315c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_UART_IRQHandler+0x90>
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_UART_IRQHandler+0xb0>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 0202 	orr.w	r2, r3, #2
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_UART_IRQHandler+0xd0>
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00f      	beq.n	800309a <HAL_UART_IRQHandler+0xfa>
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <HAL_UART_IRQHandler+0xee>
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0208 	orr.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 811e 	beq.w	80032e0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f003 0320 	and.w	r3, r3, #32
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_UART_IRQHandler+0x11e>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fa62 	bl	8003582 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <HAL_UART_IRQHandler+0x146>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d031      	beq.n	800314a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f9a4 	bl	8003434 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d023      	beq.n	8003142 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003108:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	2b00      	cmp	r3, #0
 8003110:	d013      	beq.n	800313a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	4a76      	ldr	r2, [pc, #472]	; (80032f0 <HAL_UART_IRQHandler+0x350>)
 8003118:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fa70 	bl	8001604 <HAL_DMA_Abort_IT>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003134:	4610      	mov	r0, r2
 8003136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003138:	e00e      	b.n	8003158 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8e3 	bl	8003306 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	e00a      	b.n	8003158 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8df 	bl	8003306 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	e006      	b.n	8003158 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8db 	bl	8003306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003156:	e0c3      	b.n	80032e0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003158:	bf00      	nop
    return;
 800315a:	e0c1      	b.n	80032e0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	2b01      	cmp	r3, #1
 8003162:	f040 80a1 	bne.w	80032a8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 809b 	beq.w	80032a8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8095 	beq.w	80032a8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04e      	beq.n	8003240 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80031ac:	8a3b      	ldrh	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8098 	beq.w	80032e4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031b8:	8a3a      	ldrh	r2, [r7, #16]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	f080 8092 	bcs.w	80032e4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8a3a      	ldrh	r2, [r7, #16]
 80031c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d02b      	beq.n	8003228 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031de:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0210 	bic.w	r2, r2, #16
 800321c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe f9b3 	bl	800158e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	b29b      	uxth	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f86d 	bl	8003318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800323e:	e051      	b.n	80032e4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003248:	b29b      	uxth	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d047      	beq.n	80032e8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003258:	8a7b      	ldrh	r3, [r7, #18]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d044      	beq.n	80032e8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800326c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0210 	bic.w	r2, r2, #16
 800329a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800329c:	8a7b      	ldrh	r3, [r7, #18]
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f839 	bl	8003318 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032a6:	e01f      	b.n	80032e8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_UART_IRQHandler+0x324>
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f8f9 	bl	80034b4 <UART_Transmit_IT>
    return;
 80032c2:	e012      	b.n	80032ea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <HAL_UART_IRQHandler+0x34a>
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f93a 	bl	8003552 <UART_EndTransmit_IT>
    return;
 80032de:	e004      	b.n	80032ea <HAL_UART_IRQHandler+0x34a>
    return;
 80032e0:	bf00      	nop
 80032e2:	e002      	b.n	80032ea <HAL_UART_IRQHandler+0x34a>
      return;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_UART_IRQHandler+0x34a>
      return;
 80032e8:	bf00      	nop
  }
}
 80032ea:	3728      	adds	r7, #40	; 0x28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	0800348d 	.word	0x0800348d

080032f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	4613      	mov	r3, r2
 800333c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800333e:	e02c      	b.n	800339a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d028      	beq.n	800339a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <UART_WaitOnFlagUntilTimeout+0x30>
 800334e:	f7fd ffb1 	bl	80012b4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	429a      	cmp	r2, r3
 800335c:	d21d      	bcs.n	800339a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800336c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e00f      	b.n	80033ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	bf0c      	ite	eq
 80033aa:	2301      	moveq	r3, #1
 80033ac:	2300      	movne	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d0c3      	beq.n	8003340 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	88fa      	ldrh	r2, [r7, #6]
 80033da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2222      	movs	r2, #34	; 0x22
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003406:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800344a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0210 	bic.w	r2, r2, #16
 8003472:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff ff2d 	bl	8003306 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b21      	cmp	r3, #33	; 0x21
 80034c6:	d13e      	bne.n	8003546 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d0:	d114      	bne.n	80034fc <UART_Transmit_IT+0x48>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d110      	bne.n	80034fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]
 80034fa:	e008      	b.n	800350e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	1c59      	adds	r1, r3, #1
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6211      	str	r1, [r2, #32]
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29b      	uxth	r3, r3
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4619      	mov	r1, r3
 800351c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003530:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003540:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
  }
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003568:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff febe 	bl	80032f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b22      	cmp	r3, #34	; 0x22
 8003594:	f040 8099 	bne.w	80036ca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d117      	bne.n	80035d2 <UART_Receive_IT+0x50>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d113      	bne.n	80035d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
 80035d0:	e026      	b.n	8003620 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e4:	d007      	beq.n	80035f6 <UART_Receive_IT+0x74>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <UART_Receive_IT+0x82>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e008      	b.n	8003616 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003610:	b2da      	uxtb	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003630:	2b00      	cmp	r3, #0
 8003632:	d148      	bne.n	80036c6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0220 	bic.w	r2, r2, #32
 8003642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	2b01      	cmp	r3, #1
 8003672:	d123      	bne.n	80036bc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0210 	bic.w	r2, r2, #16
 8003688:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b10      	cmp	r3, #16
 8003696:	d10a      	bne.n	80036ae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fe2f 	bl	8003318 <HAL_UARTEx_RxEventCallback>
 80036ba:	e002      	b.n	80036c2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fbdd 	bl	8003e7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e002      	b.n	80036cc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
  }
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800370e:	f023 030c 	bic.w	r3, r3, #12
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	430b      	orrs	r3, r1
 800371a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <UART_SetConfig+0x114>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d103      	bne.n	8003744 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800373c:	f7fe fe3c 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	e002      	b.n	800374a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003744:	f7fe fe24 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003748:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009a      	lsls	r2, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <UART_SetConfig+0x118>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	0119      	lsls	r1, r3, #4
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	009a      	lsls	r2, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <UART_SetConfig+0x118>)
 8003782:	fba3 0302 	umull	r0, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2064      	movs	r0, #100	; 0x64
 800378a:	fb00 f303 	mul.w	r3, r0, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	3332      	adds	r3, #50	; 0x32
 8003794:	4a15      	ldr	r2, [pc, #84]	; (80037ec <UART_SetConfig+0x118>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a0:	4419      	add	r1, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	009a      	lsls	r2, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <UART_SetConfig+0x118>)
 80037ba:	fba3 0302 	umull	r0, r3, r3, r2
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2064      	movs	r0, #100	; 0x64
 80037c2:	fb00 f303 	mul.w	r3, r0, r3
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	3332      	adds	r3, #50	; 0x32
 80037cc:	4a07      	ldr	r2, [pc, #28]	; (80037ec <UART_SetConfig+0x118>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	f003 020f 	and.w	r2, r3, #15
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	440a      	add	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40013800 	.word	0x40013800
 80037ec:	51eb851f 	.word	0x51eb851f

080037f0 <HAL_GPIO_EXTI_Callback>:
int count = 0;

extern bool MQTT_Connected;
extern bool endNmea;
extern nmeaData_t EvtData;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPS_PPS_Pin) {
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003800:	d11b      	bne.n	800383a <HAL_GPIO_EXTI_Callback+0x4a>
		if (!fix_gps)
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HAL_GPIO_EXTI_Callback+0x88>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <HAL_GPIO_EXTI_Callback+0x20>
			fix_gps = true;
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_GPIO_EXTI_Callback+0x88>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
		if (startSample && !start_timer) {
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_GPIO_EXTI_Callback+0x8c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02b      	beq.n	8003870 <HAL_GPIO_EXTI_Callback+0x80>
 8003818:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_GPIO_EXTI_Callback+0x90>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d127      	bne.n	8003870 <HAL_GPIO_EXTI_Callback+0x80>
			tick = 0;
 8003820:	4b18      	ldr	r3, [pc, #96]	; (8003884 <HAL_GPIO_EXTI_Callback+0x94>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
			lastTick[0] = 0;
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <HAL_GPIO_EXTI_Callback+0x98>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim4);
 800382c:	4817      	ldr	r0, [pc, #92]	; (800388c <HAL_GPIO_EXTI_Callback+0x9c>)
 800382e:	f7fe fe45 	bl	80024bc <HAL_TIM_Base_Start_IT>
			start_timer = 1;
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_GPIO_EXTI_Callback+0x90>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
		if (start_timer == 1) {
			phaseA_time[phaseA_cnt++] = (uint16_t)(tick - lastTick[0]);
			lastTick[0] = tick;
		}
	}
}
 8003838:	e01a      	b.n	8003870 <HAL_GPIO_EXTI_Callback+0x80>
	else if (GPIO_Pin == L1_Pin) {
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b20      	cmp	r3, #32
 800383e:	d117      	bne.n	8003870 <HAL_GPIO_EXTI_Callback+0x80>
		if (start_timer == 1) {
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_GPIO_EXTI_Callback+0x90>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d113      	bne.n	8003870 <HAL_GPIO_EXTI_Callback+0x80>
			phaseA_time[phaseA_cnt++] = (uint16_t)(tick - lastTick[0]);
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <HAL_GPIO_EXTI_Callback+0x94>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b299      	uxth	r1, r3
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_GPIO_EXTI_Callback+0x98>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29a      	uxth	r2, r3
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_GPIO_EXTI_Callback+0xa0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	1c58      	adds	r0, r3, #1
 800385a:	4c0d      	ldr	r4, [pc, #52]	; (8003890 <HAL_GPIO_EXTI_Callback+0xa0>)
 800385c:	6020      	str	r0, [r4, #0]
 800385e:	1a8a      	subs	r2, r1, r2
 8003860:	b291      	uxth	r1, r2
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_GPIO_EXTI_Callback+0xa4>)
 8003864:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lastTick[0] = tick;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <HAL_GPIO_EXTI_Callback+0x94>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a06      	ldr	r2, [pc, #24]	; (8003888 <HAL_GPIO_EXTI_Callback+0x98>)
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}
 8003878:	200001ac 	.word	0x200001ac
 800387c:	200001b0 	.word	0x200001b0
 8003880:	200001b4 	.word	0x200001b4
 8003884:	200003bc 	.word	0x200003bc
 8003888:	200003c8 	.word	0x200003c8
 800388c:	2000008c 	.word	0x2000008c
 8003890:	200003b8 	.word	0x200003b8
 8003894:	200001b8 	.word	0x200001b8

08003898 <UartReInit>:

static bool UartReInit(uint32_t baud) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	bool ret = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_AbortReceive(&huart1);
 80038a4:	480d      	ldr	r0, [pc, #52]	; (80038dc <UartReInit+0x44>)
 80038a6:	f7ff fb1f 	bl	8002ee8 <HAL_UART_AbortReceive>
	HAL_UART_DeInit(&huart1);
 80038aa:	480c      	ldr	r0, [pc, #48]	; (80038dc <UartReInit+0x44>)
 80038ac:	f7ff fa2b 	bl	8002d06 <HAL_UART_DeInit>
	huart1.Init.BaudRate = baud;
 80038b0:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <UartReInit+0x44>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6053      	str	r3, [r2, #4]
	if (HAL_UART_Init(&huart1) == HAL_OK) {
 80038b6:	4809      	ldr	r0, [pc, #36]	; (80038dc <UartReInit+0x44>)
 80038b8:	f7ff f9d8 	bl	8002c6c <HAL_UART_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <UartReInit+0x38>
		ret = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Receive_IT(&huart1, &gps_rx, 1);;
 80038c6:	2201      	movs	r2, #1
 80038c8:	4905      	ldr	r1, [pc, #20]	; (80038e0 <UartReInit+0x48>)
 80038ca:	4804      	ldr	r0, [pc, #16]	; (80038dc <UartReInit+0x44>)
 80038cc:	f7ff fadc 	bl	8002e88 <HAL_UART_Receive_IT>
	}
	return ret;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200000d4 	.word	0x200000d4
 80038e0:	200001a8 	.word	0x200001a8

080038e4 <findBaudRate>:
uint32_t findBaudRate(void) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
	uint32_t baud[] = { 9600, 115200, 19200};
 80038ea:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <findBaudRate+0xb0>)
 80038ec:	463b      	mov	r3, r7
 80038ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80038f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t baudrate = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < (sizeof(baud)/sizeof(baud[0])); i++) {
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e042      	b.n	8003984 <findBaudRate+0xa0>
		if (!UartReInit(baud[i])) continue;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3318      	adds	r3, #24
 8003904:	443b      	add	r3, r7
 8003906:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ffc4 	bl	8003898 <UartReInit>
 8003910:	4603      	mov	r3, r0
 8003912:	f083 0301 	eor.w	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d12f      	bne.n	800397c <findBaudRate+0x98>
		uint32_t start = HAL_GetTick();
 800391c:	f7fd fcca 	bl	80012b4 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]
		while (HAL_GetTick() - start < 5000) {
 8003922:	e00f      	b.n	8003944 <findBaudRate+0x60>
			if (endNmea) {
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <findBaudRate+0xb4>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <findBaudRate+0x60>
				endNmea = false;
 800392c:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <findBaudRate+0xb4>)
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
				baudrate = baud[i];
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	3318      	adds	r3, #24
 8003938:	443b      	add	r3, r7
 800393a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800393e:	613b      	str	r3, [r7, #16]
				return baudrate;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	e023      	b.n	800398c <findBaudRate+0xa8>
		while (HAL_GetTick() - start < 5000) {
 8003944:	f7fd fcb6 	bl	80012b4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3287 	movw	r2, #4999	; 0x1387
 8003952:	4293      	cmp	r3, r2
 8003954:	d9e6      	bls.n	8003924 <findBaudRate+0x40>
			}
		}
		Logi("Try Baudrate = %ld timeout", baud[i]);
 8003956:	f7fd fcad 	bl	80012b4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	490f      	ldr	r1, [pc, #60]	; (800399c <findBaudRate+0xb8>)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	3318      	adds	r3, #24
 8003964:	443b      	add	r3, r7
 8003966:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	235c      	movs	r3, #92	; 0x5c
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	460b      	mov	r3, r1
 8003972:	490b      	ldr	r1, [pc, #44]	; (80039a0 <findBaudRate+0xbc>)
 8003974:	480b      	ldr	r0, [pc, #44]	; (80039a4 <findBaudRate+0xc0>)
 8003976:	f001 f879 	bl	8004a6c <iprintf>
 800397a:	e000      	b.n	800397e <findBaudRate+0x9a>
		if (!UartReInit(baud[i])) continue;
 800397c:	bf00      	nop
	for (int i = 0; i < (sizeof(baud)/sizeof(baud[0])); i++) {
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	3301      	adds	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d9b9      	bls.n	80038fe <findBaudRate+0x1a>
	}
	return baudrate;
 800398a:	693b      	ldr	r3, [r7, #16]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	080059e0 	.word	0x080059e0
 8003998:	20000538 	.word	0x20000538
 800399c:	08005990 	.word	0x08005990
 80039a0:	080059a0 	.word	0x080059a0
 80039a4:	080059ac 	.word	0x080059ac

080039a8 <processMeasure>:
void processMeasure(void) {
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af02      	add	r7, sp, #8
	static uint8_t fixStatus = 0;
	if (phaseA_cnt >= 5) {
 80039ae:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <processMeasure+0x148>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	dd12      	ble.n	80039dc <processMeasure+0x34>
//		  for (int i = 0; i < phaseA_cnt; i++)
//			  printf("%d ", phaseA_time[i]);
//		  printf("\r\n ");
		  phaseA_cnt = 0;
 80039b6:	4b4e      	ldr	r3, [pc, #312]	; (8003af0 <processMeasure+0x148>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Stop_IT(&htim4);
 80039bc:	484d      	ldr	r0, [pc, #308]	; (8003af4 <processMeasure+0x14c>)
 80039be:	f7fe fdcf 	bl	8002560 <HAL_TIM_Base_Stop_IT>
		  start_timer = false;
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <processMeasure+0x150>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
		  offset[0] = phaseA_time[0];
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <processMeasure+0x154>)
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	4b4c      	ldr	r3, [pc, #304]	; (8003b00 <processMeasure+0x158>)
 80039ce:	801a      	strh	r2, [r3, #0]
		  memset(phaseA_time, 0, sizeof(phaseA_time));
 80039d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d4:	2100      	movs	r1, #0
 80039d6:	4849      	ldr	r0, [pc, #292]	; (8003afc <processMeasure+0x154>)
 80039d8:	f000 ff64 	bl	80048a4 <memset>
	}

	if (endNmea) {
 80039dc:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <processMeasure+0x15c>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8081 	beq.w	8003ae8 <processMeasure+0x140>
		endNmea = false;
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <processMeasure+0x15c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
#if (NMEA_DEBUG)
		printf("%s\n", EvtData.buffer);
#endif
		lwgps_process(&nmea, EvtData.buffer, EvtData.size);
 80039ec:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <processMeasure+0x160>)
 80039ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80039f2:	461a      	mov	r2, r3
 80039f4:	4944      	ldr	r1, [pc, #272]	; (8003b08 <processMeasure+0x160>)
 80039f6:	4845      	ldr	r0, [pc, #276]	; (8003b0c <processMeasure+0x164>)
 80039f8:	f000 fe57 	bl	80046aa <lwgps_process>
		if (nmea.is_valid != fixStatus) {
 80039fc:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <processMeasure+0x164>)
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <processMeasure+0x168>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d028      	beq.n	8003a5a <processMeasure+0xb2>
			fixStatus = nmea.is_valid;
 8003a08:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <processMeasure+0x164>)
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	4b40      	ldr	r3, [pc, #256]	; (8003b10 <processMeasure+0x168>)
 8003a0e:	701a      	strb	r2, [r3, #0]
			if (nmea.is_valid) {
 8003a10:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <processMeasure+0x164>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <processMeasure+0x8e>
				startSample = true;
 8003a18:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <processMeasure+0x16c>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
				Logi("GNSS fix, start sample");
 8003a1e:	f7fd fc49 	bl	80012b4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	493c      	ldr	r1, [pc, #240]	; (8003b18 <processMeasure+0x170>)
 8003a26:	2377      	movs	r3, #119	; 0x77
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	493b      	ldr	r1, [pc, #236]	; (8003b1c <processMeasure+0x174>)
 8003a2e:	483c      	ldr	r0, [pc, #240]	; (8003b20 <processMeasure+0x178>)
 8003a30:	f001 f81c 	bl	8004a6c <iprintf>
 8003a34:	e011      	b.n	8003a5a <processMeasure+0xb2>
			}
			else if (!nmea.is_valid) {
 8003a36:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <processMeasure+0x164>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <processMeasure+0xb2>
				startSample = false;
 8003a3e:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <processMeasure+0x16c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
				Logi("GNSS no fix, stop sample");
 8003a44:	f7fd fc36 	bl	80012b4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4933      	ldr	r1, [pc, #204]	; (8003b18 <processMeasure+0x170>)
 8003a4c:	237b      	movs	r3, #123	; 0x7b
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	460b      	mov	r3, r1
 8003a52:	4932      	ldr	r1, [pc, #200]	; (8003b1c <processMeasure+0x174>)
 8003a54:	4833      	ldr	r0, [pc, #204]	; (8003b24 <processMeasure+0x17c>)
 8003a56:	f001 f809 	bl	8004a6c <iprintf>
			}
		}
		if (startSample) {
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	; (8003b14 <processMeasure+0x16c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d030      	beq.n	8003ac4 <processMeasure+0x11c>
				DateTime_t dt = {0};
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
				dt.year = nmea.year;
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <processMeasure+0x164>)
 8003a6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	80bb      	strh	r3, [r7, #4]
				dt.month = nmea.month;
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <processMeasure+0x164>)
 8003a78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a7c:	71bb      	strb	r3, [r7, #6]
				dt.day = nmea.date;
 8003a7e:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <processMeasure+0x164>)
 8003a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a84:	71fb      	strb	r3, [r7, #7]
				dt.hour = nmea.hours;
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <processMeasure+0x164>)
 8003a88:	785b      	ldrb	r3, [r3, #1]
 8003a8a:	723b      	strb	r3, [r7, #8]
				dt.minute = nmea.minutes;
 8003a8c:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <processMeasure+0x164>)
 8003a8e:	789b      	ldrb	r3, [r3, #2]
 8003a90:	727b      	strb	r3, [r7, #9]
				dt.second = nmea.seconds;
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <processMeasure+0x164>)
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	72bb      	strb	r3, [r7, #10]
				measureData[count].ts = dt2epoch(dt);
 8003a98:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <processMeasure+0x180>)
 8003a9a:	681c      	ldr	r4, [r3, #0]
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aa2:	f000 fb3d 	bl	8004120 <dt2epoch>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4920      	ldr	r1, [pc, #128]	; (8003b2c <processMeasure+0x184>)
 8003aaa:	0123      	lsls	r3, r4, #4
 8003aac:	440b      	add	r3, r1
 8003aae:	601a      	str	r2, [r3, #0]
				measureData[count].phaseA = offset[0];
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <processMeasure+0x180>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <processMeasure+0x158>)
 8003ab6:	8811      	ldrh	r1, [r2, #0]
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <processMeasure+0x184>)
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	801a      	strh	r2, [r3, #0]
//				printf("SAM data: [%ld] %d \r\n", dt2epoch(dt), offset[0]);
		}
		if (count < SAMPLE_CNT - 1) count++;
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <processMeasure+0x180>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	dc05      	bgt.n	8003ad8 <processMeasure+0x130>
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <processMeasure+0x180>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <processMeasure+0x180>)
 8003ad4:	6013      	str	r3, [r2, #0]
		else {
			count = 0;
			memset(&measureData[0], 0, sizeof(measureData));
		}
	}
}
 8003ad6:	e007      	b.n	8003ae8 <processMeasure+0x140>
			count = 0;
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <processMeasure+0x180>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
			memset(&measureData[0], 0, sizeof(measureData));
 8003ade:	22a0      	movs	r2, #160	; 0xa0
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4812      	ldr	r0, [pc, #72]	; (8003b2c <processMeasure+0x184>)
 8003ae4:	f000 fede 	bl	80048a4 <memset>
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}
 8003af0:	200003b8 	.word	0x200003b8
 8003af4:	2000008c 	.word	0x2000008c
 8003af8:	200001b4 	.word	0x200001b4
 8003afc:	200001b8 	.word	0x200001b8
 8003b00:	200003c0 	.word	0x200003c0
 8003b04:	20000538 	.word	0x20000538
 8003b08:	20000540 	.word	0x20000540
 8003b0c:	200003d8 	.word	0x200003d8
 8003b10:	200004dc 	.word	0x200004dc
 8003b14:	200001b0 	.word	0x200001b0
 8003b18:	08005990 	.word	0x08005990
 8003b1c:	080059a0 	.word	0x080059a0
 8003b20:	080059ec 	.word	0x080059ec
 8003b24:	08005a1c 	.word	0x08005a1c
 8003b28:	200004d8 	.word	0x200004d8
 8003b2c:	20000438 	.word	0x20000438

08003b30 <gnssInit>:
void gnssInit(void){
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b3c:	482f      	ldr	r0, [pc, #188]	; (8003bfc <gnssInit+0xcc>)
 8003b3e:	f7fe f823 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003b42:	2064      	movs	r0, #100	; 0x64
 8003b44:	f7fd fbc0 	bl	80012c8 <HAL_Delay>
	HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, 1);
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4e:	482b      	ldr	r0, [pc, #172]	; (8003bfc <gnssInit+0xcc>)
 8003b50:	f7fe f81a 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_Delay(900);
 8003b54:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003b58:	f7fd fbb6 	bl	80012c8 <HAL_Delay>
	lwgps_init(&nmea);
 8003b5c:	4828      	ldr	r0, [pc, #160]	; (8003c00 <gnssInit+0xd0>)
 8003b5e:	f000 fd96 	bl	800468e <lwgps_init>
	uint32_t baud = findBaudRate();
 8003b62:	f7ff febf 	bl	80038e4 <findBaudRate>
 8003b66:	60f8      	str	r0, [r7, #12]
	if (baud == 0)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d041      	beq.n	8003bf2 <gnssInit+0xc2>
		return;
	if (baud != 9600) {
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8003b74:	d01e      	beq.n	8003bb4 <gnssInit+0x84>
		Logi("current baudrate = %ld -> switch to 9600", baud);
 8003b76:	f7fd fb9d 	bl	80012b4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4921      	ldr	r1, [pc, #132]	; (8003c04 <gnssInit+0xd4>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	239b      	movs	r3, #155	; 0x9b
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	460b      	mov	r3, r1
 8003b88:	491f      	ldr	r1, [pc, #124]	; (8003c08 <gnssInit+0xd8>)
 8003b8a:	4820      	ldr	r0, [pc, #128]	; (8003c0c <gnssInit+0xdc>)
 8003b8c:	f000 ff6e 	bl	8004a6c <iprintf>
		uint8_t *cmd = (uint8_t*)"$PMTK251,9600*17\r\n";
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <gnssInit+0xe0>)
 8003b92:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1, cmd, strlen((char*)cmd), 1000);
 8003b94:	68b8      	ldr	r0, [r7, #8]
 8003b96:	f7fc fae3 	bl	8000160 <strlen>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	481b      	ldr	r0, [pc, #108]	; (8003c14 <gnssInit+0xe4>)
 8003ba6:	f7ff f8dd 	bl	8002d64 <HAL_UART_Transmit>
		UartReInit(9600);
 8003baa:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003bae:	f7ff fe73 	bl	8003898 <UartReInit>
 8003bb2:	e00c      	b.n	8003bce <gnssInit+0x9e>
	}
	else Logi("current baudrate = %ld", baud);
 8003bb4:	f7fd fb7e 	bl	80012b4 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4912      	ldr	r1, [pc, #72]	; (8003c04 <gnssInit+0xd4>)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	23a0      	movs	r3, #160	; 0xa0
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4910      	ldr	r1, [pc, #64]	; (8003c08 <gnssInit+0xd8>)
 8003bc8:	4813      	ldr	r0, [pc, #76]	; (8003c18 <gnssInit+0xe8>)
 8003bca:	f000 ff4f 	bl	8004a6c <iprintf>
	HAL_Delay(1000);
 8003bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bd2:	f7fd fb79 	bl	80012c8 <HAL_Delay>
	uint8_t *cmd = (uint8_t*)"$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <gnssInit+0xec>)
 8003bd8:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, cmd, strlen((char*)cmd), 1000);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fc fac0 	bl	8000160 <strlen>
 8003be0:	4603      	mov	r3, r0
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	480a      	ldr	r0, [pc, #40]	; (8003c14 <gnssInit+0xe4>)
 8003bec:	f7ff f8ba 	bl	8002d64 <HAL_UART_Transmit>
 8003bf0:	e000      	b.n	8003bf4 <gnssInit+0xc4>
		return;
 8003bf2:	bf00      	nop
}
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40010800 	.word	0x40010800
 8003c00:	200003d8 	.word	0x200003d8
 8003c04:	08005990 	.word	0x08005990
 8003c08:	080059a0 	.word	0x080059a0
 8003c0c:	08005a50 	.word	0x08005a50
 8003c10:	08005a94 	.word	0x08005a94
 8003c14:	200000d4 	.word	0x200000d4
 8003c18:	08005aa8 	.word	0x08005aa8
 8003c1c:	08005ad8 	.word	0x08005ad8

08003c20 <appMeasureInit>:
void appMeasureInit(void) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	gnssInit();
 8003c24:	f7ff ff84 	bl	8003b30 <gnssInit>
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <appUartInit>:
extern uint8_t 	refData ;

measureData_t refDataPhase = {0};
extern measureData_t measureData[];
extern int count;
void appUartInit(void) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &refData, 1);
 8003c30:	2201      	movs	r2, #1
 8003c32:	4903      	ldr	r1, [pc, #12]	; (8003c40 <appUartInit+0x14>)
 8003c34:	4803      	ldr	r0, [pc, #12]	; (8003c44 <appUartInit+0x18>)
 8003c36:	f7ff f927 	bl	8002e88 <HAL_UART_Receive_IT>
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000536 	.word	0x20000536
 8003c44:	20000118 	.word	0x20000118

08003c48 <parseRefData>:
static void parseRefData(void) {
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b08f      	sub	sp, #60	; 0x3c
 8003c4c:	af02      	add	r7, sp, #8
	int idx = 0, i = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c52:	2300      	movs	r3, #0
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t pos = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t temp[32] = {0};
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	605a      	str	r2, [r3, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	615a      	str	r2, [r3, #20]
 8003c72:	619a      	str	r2, [r3, #24]
	for (i = 0; i < refDataIdx; i++) {
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c78:	e070      	b.n	8003d5c <parseRefData+0x114>
		if (refDataBuffer[i] == ',') {
 8003c7a:	4a47      	ldr	r2, [pc, #284]	; (8003d98 <parseRefData+0x150>)
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	4413      	add	r3, r2
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b2c      	cmp	r3, #44	; 0x2c
 8003c84:	d167      	bne.n	8003d56 <parseRefData+0x10e>
			memcpy(temp, &refDataBuffer[idx], i - idx);
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	4a43      	ldr	r2, [pc, #268]	; (8003d98 <parseRefData+0x150>)
 8003c8a:	1899      	adds	r1, r3, r2
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fdf6 	bl	8004888 <memcpy>
			if (pos == 1)
 8003c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d108      	bne.n	8003cb6 <parseRefData+0x6e>
				refDataPhase.ts = atoi((char*)temp);
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fdbf 	bl	800482a <atoi>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b3a      	ldr	r3, [pc, #232]	; (8003d9c <parseRefData+0x154>)
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e041      	b.n	8003d3a <parseRefData+0xf2>
			else if (pos == 2)
 8003cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d108      	bne.n	8003cd0 <parseRefData+0x88>
				refDataPhase.phaseA = atoi((char*)temp);
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fdb2 	bl	800482a <atoi>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <parseRefData+0x154>)
 8003ccc:	809a      	strh	r2, [r3, #4]
 8003cce:	e034      	b.n	8003d3a <parseRefData+0xf2>
			else if (pos == 3)
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d108      	bne.n	8003cea <parseRefData+0xa2>
				refDataPhase.phaseB = atoi((char*)temp);
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fda5 	bl	800482a <atoi>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <parseRefData+0x154>)
 8003ce6:	80da      	strh	r2, [r3, #6]
 8003ce8:	e027      	b.n	8003d3a <parseRefData+0xf2>
			else if (pos == 4)
 8003cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d108      	bne.n	8003d04 <parseRefData+0xbc>
				refDataPhase.phaseC = atoi((char*)temp);
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fd98 	bl	800482a <atoi>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <parseRefData+0x154>)
 8003d00:	811a      	strh	r2, [r3, #8]
 8003d02:	e01a      	b.n	8003d3a <parseRefData+0xf2>
			else if (pos == 5) {
 8003d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d116      	bne.n	8003d3a <parseRefData+0xf2>
				if (!strcmp((char*)temp, "ABC"))
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	4924      	ldr	r1, [pc, #144]	; (8003da0 <parseRefData+0x158>)
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fa1b 	bl	800014c <strcmp>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <parseRefData+0xdc>
					refDataPhase.seq = "ABC";
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <parseRefData+0x154>)
 8003d1e:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <parseRefData+0x158>)
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	e00a      	b.n	8003d3a <parseRefData+0xf2>
				else if (!strcmp((char*)temp, "ACB"))
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	491f      	ldr	r1, [pc, #124]	; (8003da4 <parseRefData+0x15c>)
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fa0f 	bl	800014c <strcmp>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <parseRefData+0xf2>
					refDataPhase.seq = "ACB";
 8003d34:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <parseRefData+0x154>)
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <parseRefData+0x15c>)
 8003d38:	60da      	str	r2, [r3, #12]
			}
			memset(temp, 0, sizeof(temp));
 8003d3a:	1d3b      	adds	r3, r7, #4
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fdaf 	bl	80048a4 <memset>
			idx = i+1;
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	3301      	adds	r3, #1
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			pos ++;
 8003d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d50:	3301      	adds	r3, #1
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i < refDataIdx; i++) {
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	3301      	adds	r3, #1
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <parseRefData+0x160>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d62:	429a      	cmp	r2, r3
 8003d64:	db89      	blt.n	8003c7a <parseRefData+0x32>
		}
	}
	printf("REF data: [%ld] %d %d %d - %s\r\n", refDataPhase.ts,
 8003d66:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <parseRefData+0x154>)
 8003d68:	6819      	ldr	r1, [r3, #0]
			refDataPhase.phaseA, refDataPhase.phaseB, refDataPhase.phaseC, refDataPhase.seq);
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <parseRefData+0x154>)
 8003d6c:	889b      	ldrh	r3, [r3, #4]
	printf("REF data: [%ld] %d %d %d - %s\r\n", refDataPhase.ts,
 8003d6e:	4618      	mov	r0, r3
			refDataPhase.phaseA, refDataPhase.phaseB, refDataPhase.phaseC, refDataPhase.seq);
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <parseRefData+0x154>)
 8003d72:	88db      	ldrh	r3, [r3, #6]
	printf("REF data: [%ld] %d %d %d - %s\r\n", refDataPhase.ts,
 8003d74:	461c      	mov	r4, r3
			refDataPhase.phaseA, refDataPhase.phaseB, refDataPhase.phaseC, refDataPhase.seq);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <parseRefData+0x154>)
 8003d78:	891b      	ldrh	r3, [r3, #8]
	printf("REF data: [%ld] %d %d %d - %s\r\n", refDataPhase.ts,
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <parseRefData+0x154>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	9200      	str	r2, [sp, #0]
 8003d84:	4623      	mov	r3, r4
 8003d86:	4602      	mov	r2, r0
 8003d88:	4808      	ldr	r0, [pc, #32]	; (8003dac <parseRefData+0x164>)
 8003d8a:	f000 fe6f 	bl	8004a6c <iprintf>
}
 8003d8e:	bf00      	nop
 8003d90:	3734      	adds	r7, #52	; 0x34
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd90      	pop	{r4, r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200004f0 	.word	0x200004f0
 8003d9c:	200004e0 	.word	0x200004e0
 8003da0:	08005b0c 	.word	0x08005b0c
 8003da4:	08005b10 	.word	0x08005b10
 8003da8:	20000530 	.word	0x20000530
 8003dac:	08005b14 	.word	0x08005b14

08003db0 <processSimData>:
int processSimData(void) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af02      	add	r7, sp, #8
	if (endRefData) {
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <processSimData+0x80>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d033      	beq.n	8003e26 <processSimData+0x76>
		endRefData = 0;
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <processSimData+0x80>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
		parseRefData();
 8003dc4:	f7ff ff40 	bl	8003c48 <parseRefData>
		for (int i = 0; i < count ;i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	e024      	b.n	8003e18 <processSimData+0x68>
			if (measureData[i].ts == refDataPhase.ts) {
 8003dce:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <processSimData+0x84>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	4413      	add	r3, r2
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <processSimData+0x88>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d118      	bne.n	8003e12 <processSimData+0x62>
//				if (measureData[i].phaseA < refDataPhase.phaseA)
//					measureData[i].phaseA = measureData[i].phaseA + 200;
//				uint16_t offset = abs (measureData[i].phaseA - refDataPhase.phaseA - OFFSET) ;
//				int offset =  (measureData[i].phaseA - refDataPhase.phaseA);
				printf("%ld, %d, %d, %s \r\n", refDataPhase.ts,
 8003de0:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <processSimData+0x88>)
 8003de2:	6819      	ldr	r1, [r3, #0]
						refDataPhase.phaseA, measureData[i].phaseA, (measureData->seq) ? "ACB" : "ABC");
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <processSimData+0x88>)
 8003de6:	889b      	ldrh	r3, [r3, #4]
				printf("%ld, %d, %d, %s \r\n", refDataPhase.ts,
 8003de8:	4618      	mov	r0, r3
						refDataPhase.phaseA, measureData[i].phaseA, (measureData->seq) ? "ACB" : "ABC");
 8003dea:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <processSimData+0x84>)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	4413      	add	r3, r2
 8003df2:	3304      	adds	r3, #4
 8003df4:	881b      	ldrh	r3, [r3, #0]
				printf("%ld, %d, %d, %s \r\n", refDataPhase.ts,
 8003df6:	461a      	mov	r2, r3
						refDataPhase.phaseA, measureData[i].phaseA, (measureData->seq) ? "ACB" : "ABC");
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <processSimData+0x84>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
				printf("%ld, %d, %d, %s \r\n", refDataPhase.ts,
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <processSimData+0x54>
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <processSimData+0x8c>)
 8003e02:	e000      	b.n	8003e06 <processSimData+0x56>
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <processSimData+0x90>)
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	480d      	ldr	r0, [pc, #52]	; (8003e44 <processSimData+0x94>)
 8003e0e:	f000 fe2d 	bl	8004a6c <iprintf>
		for (int i = 0; i < count ;i++)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3301      	adds	r3, #1
 8003e16:	607b      	str	r3, [r7, #4]
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <processSimData+0x98>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	dbd5      	blt.n	8003dce <processSimData+0x1e>
			}
		return 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <processSimData+0x78>
	}
	return 0;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000534 	.word	0x20000534
 8003e34:	20000438 	.word	0x20000438
 8003e38:	200004e0 	.word	0x200004e0
 8003e3c:	08005b10 	.word	0x08005b10
 8003e40:	08005b0c 	.word	0x08005b0c
 8003e44:	08005b34 	.word	0x08005b34
 8003e48:	200004d8 	.word	0x200004d8

08003e4c <HAL_TIM_PeriodElapsedCallback>:
bool endNmea = false;
int idx = 0;
nmeaData_t EvtData = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d104      	bne.n	8003e68 <HAL_TIM_PeriodElapsedCallback+0x1c>
    tick++;
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3301      	adds	r3, #1
 8003e64:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003e66:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40000800 	.word	0x40000800
 8003e78:	200003bc 	.word	0x200003bc

08003e7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	static uint8_t lastData = 0;
	static uint8_t lastRefData = 0;
	if (huart == &huart1){
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a4b      	ldr	r2, [pc, #300]	; (8003fb4 <HAL_UART_RxCpltCallback+0x138>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d148      	bne.n	8003f1e <HAL_UART_RxCpltCallback+0xa2>
		if (gps_rx == '$' && !begin) {
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <HAL_UART_RxCpltCallback+0x13c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b24      	cmp	r3, #36	; 0x24
 8003e92:	d116      	bne.n	8003ec2 <HAL_UART_RxCpltCallback+0x46>
 8003e94:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <HAL_UART_RxCpltCallback+0x140>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	f083 0301 	eor.w	r3, r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00f      	beq.n	8003ec2 <HAL_UART_RxCpltCallback+0x46>
			begin = true;
 8003ea2:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <HAL_UART_RxCpltCallback+0x140>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
			idx = 0;
 8003ea8:	4b45      	ldr	r3, [pc, #276]	; (8003fc0 <HAL_UART_RxCpltCallback+0x144>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
			lastData = 0;
 8003eae:	4b45      	ldr	r3, [pc, #276]	; (8003fc4 <HAL_UART_RxCpltCallback+0x148>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
			memset(&EvtData, 0 , sizeof(nmeaData_t));
 8003eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4843      	ldr	r0, [pc, #268]	; (8003fc8 <HAL_UART_RxCpltCallback+0x14c>)
 8003ebc:	f000 fcf2 	bl	80048a4 <memset>
 8003ec0:	e016      	b.n	8003ef0 <HAL_UART_RxCpltCallback+0x74>
		}
		else if (gps_rx == 10 && lastData == 13 && begin) {
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <HAL_UART_RxCpltCallback+0x13c>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b0a      	cmp	r3, #10
 8003ec8:	d112      	bne.n	8003ef0 <HAL_UART_RxCpltCallback+0x74>
 8003eca:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <HAL_UART_RxCpltCallback+0x148>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b0d      	cmp	r3, #13
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_UART_RxCpltCallback+0x74>
 8003ed2:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_UART_RxCpltCallback+0x140>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_UART_RxCpltCallback+0x74>
			begin = false;
 8003eda:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <HAL_UART_RxCpltCallback+0x140>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
			endNmea = true;
 8003ee0:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <HAL_UART_RxCpltCallback+0x150>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
			EvtData.size = idx;
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <HAL_UART_RxCpltCallback+0x144>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a37      	ldr	r2, [pc, #220]	; (8003fc8 <HAL_UART_RxCpltCallback+0x14c>)
 8003eec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
		if (begin) {
 8003ef0:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <HAL_UART_RxCpltCallback+0x140>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00c      	beq.n	8003f12 <HAL_UART_RxCpltCallback+0x96>
			EvtData.buffer[idx++] = gps_rx;
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <HAL_UART_RxCpltCallback+0x144>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	4930      	ldr	r1, [pc, #192]	; (8003fc0 <HAL_UART_RxCpltCallback+0x144>)
 8003f00:	600a      	str	r2, [r1, #0]
 8003f02:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <HAL_UART_RxCpltCallback+0x13c>)
 8003f04:	7811      	ldrb	r1, [r2, #0]
 8003f06:	4a30      	ldr	r2, [pc, #192]	; (8003fc8 <HAL_UART_RxCpltCallback+0x14c>)
 8003f08:	54d1      	strb	r1, [r2, r3]
			lastData = gps_rx;
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_UART_RxCpltCallback+0x13c>)
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_UART_RxCpltCallback+0x148>)
 8003f10:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &gps_rx, 1);
 8003f12:	2201      	movs	r2, #1
 8003f14:	4928      	ldr	r1, [pc, #160]	; (8003fb8 <HAL_UART_RxCpltCallback+0x13c>)
 8003f16:	4827      	ldr	r0, [pc, #156]	; (8003fb4 <HAL_UART_RxCpltCallback+0x138>)
 8003f18:	f7fe ffb6 	bl	8002e88 <HAL_UART_Receive_IT>
			refDataBuffer[refDataIdx++] = refData;
			lastRefData = refData;
		}
		HAL_UART_Receive_IT(&huart2, &refData, 1);
	}
}
 8003f1c:	e045      	b.n	8003faa <HAL_UART_RxCpltCallback+0x12e>
	else if (huart == &huart2) {
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <HAL_UART_RxCpltCallback+0x154>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d141      	bne.n	8003faa <HAL_UART_RxCpltCallback+0x12e>
		if (refData == '$' && !beginRefData) {
 8003f26:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <HAL_UART_RxCpltCallback+0x158>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b24      	cmp	r3, #36	; 0x24
 8003f2c:	d115      	bne.n	8003f5a <HAL_UART_RxCpltCallback+0xde>
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <HAL_UART_RxCpltCallback+0x15c>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d111      	bne.n	8003f5a <HAL_UART_RxCpltCallback+0xde>
			beginRefData = 1;
 8003f36:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <HAL_UART_RxCpltCallback+0x15c>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
			endRefData = 0;
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_UART_RxCpltCallback+0x160>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
			refDataIdx = 0;
 8003f42:	4b27      	ldr	r3, [pc, #156]	; (8003fe0 <HAL_UART_RxCpltCallback+0x164>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
			lastRefData = 0;
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_UART_RxCpltCallback+0x168>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
			memset(refDataBuffer, 0, sizeof(refDataBuffer));
 8003f4e:	2240      	movs	r2, #64	; 0x40
 8003f50:	2100      	movs	r1, #0
 8003f52:	4825      	ldr	r0, [pc, #148]	; (8003fe8 <HAL_UART_RxCpltCallback+0x16c>)
 8003f54:	f000 fca6 	bl	80048a4 <memset>
 8003f58:	e011      	b.n	8003f7e <HAL_UART_RxCpltCallback+0x102>
		else if (refData == 10 && lastRefData == 13 && beginRefData) {
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <HAL_UART_RxCpltCallback+0x158>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b0a      	cmp	r3, #10
 8003f60:	d10d      	bne.n	8003f7e <HAL_UART_RxCpltCallback+0x102>
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_UART_RxCpltCallback+0x168>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b0d      	cmp	r3, #13
 8003f68:	d109      	bne.n	8003f7e <HAL_UART_RxCpltCallback+0x102>
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_UART_RxCpltCallback+0x15c>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_RxCpltCallback+0x102>
			beginRefData = false;
 8003f72:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_UART_RxCpltCallback+0x15c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
			endRefData = true;
 8003f78:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_UART_RxCpltCallback+0x160>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
		if (beginRefData) {
 8003f7e:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_UART_RxCpltCallback+0x15c>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <HAL_UART_RxCpltCallback+0x124>
			refDataBuffer[refDataIdx++] = refData;
 8003f86:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <HAL_UART_RxCpltCallback+0x164>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	4914      	ldr	r1, [pc, #80]	; (8003fe0 <HAL_UART_RxCpltCallback+0x164>)
 8003f8e:	600a      	str	r2, [r1, #0]
 8003f90:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <HAL_UART_RxCpltCallback+0x158>)
 8003f92:	7811      	ldrb	r1, [r2, #0]
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <HAL_UART_RxCpltCallback+0x16c>)
 8003f96:	54d1      	strb	r1, [r2, r3]
			lastRefData = refData;
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HAL_UART_RxCpltCallback+0x158>)
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_UART_RxCpltCallback+0x168>)
 8003f9e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &refData, 1);
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	490c      	ldr	r1, [pc, #48]	; (8003fd4 <HAL_UART_RxCpltCallback+0x158>)
 8003fa4:	480a      	ldr	r0, [pc, #40]	; (8003fd0 <HAL_UART_RxCpltCallback+0x154>)
 8003fa6:	f7fe ff6f 	bl	8002e88 <HAL_UART_Receive_IT>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200000d4 	.word	0x200000d4
 8003fb8:	200001a8 	.word	0x200001a8
 8003fbc:	20000537 	.word	0x20000537
 8003fc0:	2000053c 	.word	0x2000053c
 8003fc4:	20000644 	.word	0x20000644
 8003fc8:	20000540 	.word	0x20000540
 8003fcc:	20000538 	.word	0x20000538
 8003fd0:	20000118 	.word	0x20000118
 8003fd4:	20000536 	.word	0x20000536
 8003fd8:	20000535 	.word	0x20000535
 8003fdc:	20000534 	.word	0x20000534
 8003fe0:	20000530 	.word	0x20000530
 8003fe4:	20000645 	.word	0x20000645
 8003fe8:	200004f0 	.word	0x200004f0

08003fec <date2days>:
#include "datetime.h"

const uint8_t daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	80fb      	strh	r3, [r7, #6]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	717b      	strb	r3, [r7, #5]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	713b      	strb	r3, [r7, #4]
    if (y >= 2000)
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004004:	d303      	bcc.n	800400e <date2days+0x22>
        y -= 2000;
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800400c:	80fb      	strh	r3, [r7, #6]
    uint16_t days = d;
 800400e:	793b      	ldrb	r3, [r7, #4]
 8004010:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 1; i < m; ++i) // Add number of days for each month
 8004012:	2301      	movs	r3, #1
 8004014:	737b      	strb	r3, [r7, #13]
 8004016:	e00a      	b.n	800402e <date2days+0x42>
    {
        days += daysInMonth[i - 1];
 8004018:	7b7b      	ldrb	r3, [r7, #13]
 800401a:	3b01      	subs	r3, #1
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <date2days+0xd8>)
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	b29a      	uxth	r2, r3
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	4413      	add	r3, r2
 8004026:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 1; i < m; ++i) // Add number of days for each month
 8004028:	7b7b      	ldrb	r3, [r7, #13]
 800402a:	3301      	adds	r3, #1
 800402c:	737b      	strb	r3, [r7, #13]
 800402e:	7b7a      	ldrb	r2, [r7, #13]
 8004030:	797b      	ldrb	r3, [r7, #5]
 8004032:	429a      	cmp	r2, r3
 8004034:	d3f0      	bcc.n	8004018 <date2days+0x2c>
    }                        // of for-next loop for each month
    if (m > 2 && y % 4 == 0) // Deal with leap years
 8004036:	797b      	ldrb	r3, [r7, #5]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d908      	bls.n	800404e <date2days+0x62>
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <date2days+0x62>
    {
        ++days;
 8004048:	89fb      	ldrh	r3, [r7, #14]
 800404a:	3301      	adds	r3, #1
 800404c:	81fb      	strh	r3, [r7, #14]
    }                                         // of if-then a leap year
    if (((y % 100) == 0) && ((y % 400) != 0)) // if / by 100 but not by 400 then it is not a l.y.
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <date2days+0xdc>)
 8004052:	fba2 1203 	umull	r1, r2, r2, r3
 8004056:	0952      	lsrs	r2, r2, #5
 8004058:	2164      	movs	r1, #100	; 0x64
 800405a:	fb01 f202 	mul.w	r2, r1, r2
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <date2days+0x9a>
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <date2days+0xdc>)
 800406a:	fba2 1203 	umull	r1, r2, r2, r3
 800406e:	09d2      	lsrs	r2, r2, #7
 8004070:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004074:	fb01 f202 	mul.w	r2, r1, r2
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <date2days+0x9a>
    {
        --days;
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	3b01      	subs	r3, #1
 8004084:	81fb      	strh	r3, [r7, #14]
    }                                        // of if-then special leap year
    return days + 365 * y + (y + 3) / 4 - 1; // Return computed value
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	461a      	mov	r2, r3
 800408a:	00d2      	lsls	r2, r2, #3
 800408c:	441a      	add	r2, r3
 800408e:	00d2      	lsls	r2, r2, #3
 8004090:	4413      	add	r3, r2
 8004092:	461a      	mov	r2, r3
 8004094:	0091      	lsls	r1, r2, #2
 8004096:	461a      	mov	r2, r3
 8004098:	460b      	mov	r3, r1
 800409a:	4413      	add	r3, r2
 800409c:	b29a      	uxth	r2, r3
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	4413      	add	r3, r2
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	3303      	adds	r3, #3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da00      	bge.n	80040ae <date2days+0xc2>
 80040ac:	3303      	adds	r3, #3
 80040ae:	109b      	asrs	r3, r3, #2
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29b      	uxth	r3, r3
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	08005b70 	.word	0x08005b70
 80040c8:	51eb851f 	.word	0x51eb851f

080040cc <time2long>:
static long time2long(uint16_t days, uint8_t h, uint8_t m, uint8_t s)
{
 80040cc:	b490      	push	{r4, r7}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4623      	mov	r3, r4
 80040dc:	80fb      	strh	r3, [r7, #6]
 80040de:	4603      	mov	r3, r0
 80040e0:	717b      	strb	r3, [r7, #5]
 80040e2:	460b      	mov	r3, r1
 80040e4:	713b      	strb	r3, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	70fb      	strb	r3, [r7, #3]
    return ((days * 24L + h) * 60 + m) * 60 + s;
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	4613      	mov	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	461a      	mov	r2, r3
 80040f6:	797b      	ldrb	r3, [r7, #5]
 80040f8:	441a      	add	r2, r3
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	461a      	mov	r2, r3
 8004104:	793b      	ldrb	r3, [r7, #4]
 8004106:	441a      	add	r2, r3
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	461a      	mov	r2, r3
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	4413      	add	r3, r2
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bc90      	pop	{r4, r7}
 800411e:	4770      	bx	lr

08004120 <dt2epoch>:
    uint16_t temp = date2days(this->year, this->month, this->day);
    uint8_t dow = ((temp + 6) % 7);
    this->dayOfTheWeek = (dow == 0) ? 7 : dow; 
}
uint32_t dt2epoch(DateTime_t dt)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t days = date2days(dt.year, dt.month, dt.day);
 800412c:	88bb      	ldrh	r3, [r7, #4]
 800412e:	79b9      	ldrb	r1, [r7, #6]
 8004130:	79fa      	ldrb	r2, [r7, #7]
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff5a 	bl	8003fec <date2days>
 8004138:	4603      	mov	r3, r0
 800413a:	82fb      	strh	r3, [r7, #22]
    uint32_t t = time2long(days, dt.hour, dt.minute, dt.second);
 800413c:	7a39      	ldrb	r1, [r7, #8]
 800413e:	7a7a      	ldrb	r2, [r7, #9]
 8004140:	7abb      	ldrb	r3, [r7, #10]
 8004142:	8af8      	ldrh	r0, [r7, #22]
 8004144:	f7ff ffc2 	bl	80040cc <time2long>
 8004148:	4603      	mov	r3, r0
 800414a:	613b      	str	r3, [r7, #16]
    t += SECS_1970_TO_2000;
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <dt2epoch+0x40>)
 8004150:	4413      	add	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    return t;
 8004154:	693b      	ldr	r3, [r7, #16]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	386d4380 	.word	0x386d4380

08004164 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8004164:	b5b0      	push	{r4, r5, r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <prv_parse_float_number+0x148>)
 8004180:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8004184:	2301      	movs	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <prv_parse_float_number+0x38>
        t = gh->p.term_str;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3329      	adds	r3, #41	; 0x29
 8004192:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8004194:	e002      	b.n	800419c <prv_parse_float_number+0x38>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <prv_parse_float_number+0x46>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d0f5      	beq.n	8004196 <prv_parse_float_number+0x32>

    if (*t == '-') { /* Check sign */
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b2d      	cmp	r3, #45	; 0x2d
 80041b0:	d124      	bne.n	80041fc <prv_parse_float_number+0x98>
        sign = -1;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	60fb      	str	r3, [r7, #12]
        ++t;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	3301      	adds	r3, #1
 80041bc:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 80041be:	e01d      	b.n	80041fc <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*t);
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <prv_parse_float_number+0x14c>)
 80041c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80041ca:	f7fc f98d 	bl	80004e8 <__aeabi_dmul>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4614      	mov	r4, r2
 80041d4:	461d      	mov	r5, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	3b30      	subs	r3, #48	; 0x30
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f919 	bl	8000414 <__aeabi_i2d>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7fb ffc7 	bl	800017c <__adddf3>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++t;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b2f      	cmp	r3, #47	; 0x2f
 8004202:	d903      	bls.n	800420c <prv_parse_float_number+0xa8>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b39      	cmp	r3, #57	; 0x39
 800420a:	d9d9      	bls.n	80041c0 <prv_parse_float_number+0x5c>
    }
    if (*t == '.') { /* Skip the dot character */
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b2e      	cmp	r3, #46	; 0x2e
 8004212:	d12c      	bne.n	800426e <prv_parse_float_number+0x10a>
        ++t;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 800421a:	e028      	b.n	800426e <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*t);
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <prv_parse_float_number+0x14c>)
 8004222:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004226:	f7fc f95f 	bl	80004e8 <__aeabi_dmul>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4614      	mov	r4, r2
 8004230:	461d      	mov	r5, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	3b30      	subs	r3, #48	; 0x30
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc f8eb 	bl	8000414 <__aeabi_i2d>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4620      	mov	r0, r4
 8004244:	4629      	mov	r1, r5
 8004246:	f7fb ff99 	bl	800017c <__adddf3>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= 10.0;
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <prv_parse_float_number+0x14c>)
 8004258:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800425c:	f7fc f944 	bl	80004e8 <__aeabi_dmul>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++t;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b2f      	cmp	r3, #47	; 0x2f
 8004274:	d903      	bls.n	800427e <prv_parse_float_number+0x11a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b39      	cmp	r3, #57	; 0x39
 800427c:	d9ce      	bls.n	800421c <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7fc f8c8 	bl	8000414 <__aeabi_i2d>
 8004284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004288:	f7fc f92e 	bl	80004e8 <__aeabi_dmul>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004298:	f7fc fa50 	bl	800073c <__aeabi_ddiv>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
}
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bdb0      	pop	{r4, r5, r7, pc}
 80042aa:	bf00      	nop
 80042ac:	3ff00000 	.word	0x3ff00000
 80042b0:	40240000 	.word	0x40240000

080042b4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d11e      	bne.n	8004304 <prv_parse_term+0x50>
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
            gh->p.stat = STAT_GSV;
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3329      	adds	r3, #41	; 0x29
 80042ca:	2206      	movs	r2, #6
 80042cc:	4985      	ldr	r1, [pc, #532]	; (80044e4 <prv_parse_term+0x230>)
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fbf4 	bl	8004abc <strncmp>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <prv_parse_term+0x3a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3329      	adds	r3, #41	; 0x29
 80042de:	2206      	movs	r2, #6
 80042e0:	4981      	ldr	r1, [pc, #516]	; (80044e8 <prv_parse_term+0x234>)
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fbea 	bl	8004abc <strncmp>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d104      	bne.n	80042f8 <prv_parse_term+0x44>
            gh->p.stat = STAT_RMC;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80042f6:	e003      	b.n	8004300 <prv_parse_term+0x4c>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }
        return 1;
 8004300:	2301      	movs	r3, #1
 8004302:	e0ea      	b.n	80044da <prv_parse_term+0x226>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800430a:	2900      	cmp	r1, #0
 800430c:	f000 80e4 	beq.w	80044d8 <prv_parse_term+0x224>
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004316:	2904      	cmp	r1, #4
 8004318:	f040 80d9 	bne.w	80044ce <prv_parse_term+0x21a>
        switch (gh->p.term_num) {
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
 8004322:	3901      	subs	r1, #1
 8004324:	290a      	cmp	r1, #10
 8004326:	f200 80d4 	bhi.w	80044d2 <prv_parse_term+0x21e>
 800432a:	a001      	add	r0, pc, #4	; (adr r0, 8004330 <prv_parse_term+0x7c>)
 800432c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004330:	0800435d 	.word	0x0800435d
 8004334:	080043d7 	.word	0x080043d7
 8004338:	080044d3 	.word	0x080044d3
 800433c:	080044d3 	.word	0x080044d3
 8004340:	080044d3 	.word	0x080044d3
 8004344:	080044d3 	.word	0x080044d3
 8004348:	080043f1 	.word	0x080043f1
 800434c:	08004405 	.word	0x08004405
 8004350:	08004419 	.word	0x08004419
 8004354:	08004493 	.word	0x08004493
 8004358:	080044a7 	.word	0x080044a7
       		case 1: /* Process valid status */
                gh->p.data.rmc.hours = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004362:	3b30      	subs	r3, #48	; 0x30
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	4413      	add	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004376:	4413      	add	r3, r2
 8004378:	b2db      	uxtb	r3, r3
 800437a:	3b30      	subs	r3, #48	; 0x30
 800437c:	b2da      	uxtb	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                gh->p.data.rmc.minutes = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800438a:	3b30      	subs	r3, #48	; 0x30
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	0092      	lsls	r2, r2, #2
 8004392:	4413      	add	r3, r2
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800439e:	4413      	add	r3, r2
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3b30      	subs	r3, #48	; 0x30
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                gh->p.data.rmc.seconds = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043b2:	3b30      	subs	r3, #48	; 0x30
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	0092      	lsls	r2, r2, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80043c6:	4413      	add	r3, r2
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	3b30      	subs	r3, #48	; 0x30
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
            	break;
 80043d4:	e080      	b.n	80044d8 <prv_parse_term+0x224>
            case 2: /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043dc:	2b41      	cmp	r3, #65	; 0x41
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                break;
 80043ee:	e073      	b.n	80044d8 <prv_parse_term+0x224>
            case 7: /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80043f0:	2100      	movs	r1, #0
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff feb6 	bl	8004164 <prv_parse_float_number>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                break;
 8004402:	e069      	b.n	80044d8 <prv_parse_term+0x224>
            case 8: /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8004404:	2100      	movs	r1, #0
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff feac 	bl	8004164 <prv_parse_float_number>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
                break;
 8004416:	e05f      	b.n	80044d8 <prv_parse_term+0x224>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800441e:	3b30      	subs	r3, #48	; 0x30
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	0092      	lsls	r2, r2, #2
 8004426:	4413      	add	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	b2da      	uxtb	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004432:	4413      	add	r3, r2
 8004434:	b2db      	uxtb	r3, r3
 8004436:	3b30      	subs	r3, #48	; 0x30
 8004438:	b2da      	uxtb	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004446:	3b30      	subs	r3, #48	; 0x30
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	0092      	lsls	r2, r2, #2
 800444e:	4413      	add	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800445a:	4413      	add	r3, r2
 800445c:	b2db      	uxtb	r3, r3
 800445e:	3b30      	subs	r3, #48	; 0x30
 8004460:	b2da      	uxtb	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800446e:	3b30      	subs	r3, #48	; 0x30
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	0092      	lsls	r2, r2, #2
 8004476:	4413      	add	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004482:	4413      	add	r3, r2
 8004484:	b2db      	uxtb	r3, r3
 8004486:	3b30      	subs	r3, #48	; 0x30
 8004488:	b2da      	uxtb	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                break;
 8004490:	e022      	b.n	80044d8 <prv_parse_term+0x224>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8004492:	2100      	movs	r1, #0
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fe65 	bl	8004164 <prv_parse_float_number>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                break;
 80044a4:	e018      	b.n	80044d8 <prv_parse_term+0x224>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 80044ac:	2957      	cmp	r1, #87	; 0x57
 80044ae:	d004      	beq.n	80044ba <prv_parse_term+0x206>
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 80044b6:	2977      	cmp	r1, #119	; 0x77
 80044b8:	d10d      	bne.n	80044d6 <prv_parse_term+0x222>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	e9d1 0116 	ldrd	r0, r1, [r1, #88]	; 0x58
 80044c0:	4602      	mov	r2, r0
 80044c2:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                }
                break;
 80044cc:	e003      	b.n	80044d6 <prv_parse_term+0x222>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <prv_parse_term+0x224>
                break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <prv_parse_term+0x224>
                break;
 80044d6:	bf00      	nop
    return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	08005b48 	.word	0x08005b48
 80044e8:	08005b50 	.word	0x08005b50

080044ec <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80044fa:	2b2f      	cmp	r3, #47	; 0x2f
 80044fc:	d90d      	bls.n	800451a <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004504:	2b39      	cmp	r3, #57	; 0x39
 8004506:	d808      	bhi.n	800451a <prv_check_crc+0x2e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800450e:	3b30      	subs	r3, #48	; 0x30
 8004510:	b2db      	uxtb	r3, r3
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004516:	b25a      	sxtb	r2, r3
 8004518:	e026      	b.n	8004568 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004520:	2b60      	cmp	r3, #96	; 0x60
 8004522:	d90d      	bls.n	8004540 <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800452a:	2b7a      	cmp	r3, #122	; 0x7a
 800452c:	d808      	bhi.n	8004540 <prv_check_crc+0x54>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004534:	3b57      	subs	r3, #87	; 0x57
 8004536:	b2db      	uxtb	r3, r3
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800453c:	b25a      	sxtb	r2, r3
 800453e:	e013      	b.n	8004568 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d90d      	bls.n	8004566 <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004550:	2b5a      	cmp	r3, #90	; 0x5a
 8004552:	d808      	bhi.n	8004566 <prv_check_crc+0x7a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800455a:	3b37      	subs	r3, #55	; 0x37
 800455c:	b2db      	uxtb	r3, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004562:	b25a      	sxtb	r2, r3
 8004564:	e000      	b.n	8004568 <prv_check_crc+0x7c>
 8004566:	2200      	movs	r2, #0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800456e:	2b2f      	cmp	r3, #47	; 0x2f
 8004570:	d90c      	bls.n	800458c <prv_check_crc+0xa0>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004578:	2b39      	cmp	r3, #57	; 0x39
 800457a:	d807      	bhi.n	800458c <prv_check_crc+0xa0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004582:	b25b      	sxtb	r3, r3
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	b25b      	sxtb	r3, r3
 800458a:	e028      	b.n	80045de <prv_check_crc+0xf2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004592:	2b60      	cmp	r3, #96	; 0x60
 8004594:	d90e      	bls.n	80045b4 <prv_check_crc+0xc8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800459c:	2b7a      	cmp	r3, #122	; 0x7a
 800459e:	d809      	bhi.n	80045b4 <prv_check_crc+0xc8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045a6:	3b57      	subs	r3, #87	; 0x57
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	b25b      	sxtb	r3, r3
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	b25b      	sxtb	r3, r3
 80045b2:	e014      	b.n	80045de <prv_check_crc+0xf2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d90e      	bls.n	80045dc <prv_check_crc+0xf0>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045c4:	2b5a      	cmp	r3, #90	; 0x5a
 80045c6:	d809      	bhi.n	80045dc <prv_check_crc+0xf0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045ce:	3b37      	subs	r3, #55	; 0x37
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	e000      	b.n	80045de <prv_check_crc+0xf2>
 80045dc:	2300      	movs	r3, #0
 80045de:	4313      	orrs	r3, r2
 80045e0:	b25b      	sxtb	r3, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80045e2:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;             /* They must match! */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800460e:	2b04      	cmp	r3, #4
 8004610:	d137      	bne.n	8004682 <prv_copy_from_tmp_memory+0x82>
        gh->course = gh->p.data.rmc.course;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->is_valid = gh->p.data.rmc.is_valid;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	701a      	strb	r2, [r3, #0]
        gh->speed = gh->p.data.rmc.speed;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->variation = gh->p.data.rmc.variation;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->date = gh->p.data.rmc.date;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f883 2020 	strb.w	r2, [r3, #32]
        gh->month = gh->p.data.rmc.month;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->year = gh->p.data.rmc.year;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->hours = gh->p.data.rmc.hours;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	705a      	strb	r2, [r3, #1]
        gh->minutes = gh->p.data.rmc.minutes;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	709a      	strb	r2, [r3, #2]
        gh->seconds = gh->p.data.rmc.seconds;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	70da      	strb	r2, [r3, #3]
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 8004696:	2260      	movs	r2, #96	; 0x60
 8004698:	2100      	movs	r1, #0
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f902 	bl	80048a4 <memset>
    return 1;
 80046a0:	2301      	movs	r3, #1
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 80046ba:	e0ad      	b.n	8004818 <lwgps_process+0x16e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b24      	cmp	r3, #36	; 0x24
 80046c2:	d128      	bne.n	8004716 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3328      	adds	r3, #40	; 0x28
 80046c8:	2238      	movs	r2, #56	; 0x38
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f8e9 	bl	80048a4 <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046d8:	2b0b      	cmp	r3, #11
 80046da:	f200 8097 	bhi.w	800480c <lwgps_process+0x162>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046e4:	4619      	mov	r1, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	440b      	add	r3, r1
 80046ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046f8:	3301      	adds	r3, #1
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004708:	461a      	mov	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004714:	e07a      	b.n	800480c <lwgps_process+0x162>
        } else if (*d == ',') {                  /* Term separator character */
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b2c      	cmp	r3, #44	; 0x2c
 800471c:	d11d      	bne.n	800475a <lwgps_process+0xb0>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fdc8 	bl	80042b4 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	4053      	eors	r3, r2
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            TERM_NEXT(gh);                       /* Start with next term */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800474e:	3301      	adds	r3, #1
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004758:	e058      	b.n	800480c <lwgps_process+0x162>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b2a      	cmp	r3, #42	; 0x2a
 8004760:	d117      	bne.n	8004792 <lwgps_process+0xe8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fda6 	bl	80042b4 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            TERM_NEXT(gh);                       /* Start with next term */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004786:	3301      	adds	r3, #1
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8004790:	e03c      	b.n	800480c <lwgps_process+0x162>
        } else if (*d == '\r') {
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b0d      	cmp	r3, #13
 8004798:	d109      	bne.n	80047ae <lwgps_process+0x104>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff fea6 	bl	80044ec <prv_check_crc>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d032      	beq.n	800480c <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff ff2a 	bl	8004600 <prv_copy_from_tmp_memory>
 80047ac:	e02e      	b.n	800480c <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <lwgps_process+0x122>
                CRC_ADD(gh, *d); /* Add to CRC */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	4053      	eors	r3, r2
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            TERM_ADD(gh, *d); /* Add character to term */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80047d2:	2b0b      	cmp	r3, #11
 80047d4:	d81a      	bhi.n	800480c <lwgps_process+0x162>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80047dc:	4619      	mov	r1, r3
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	440b      	add	r3, r1
 80047e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80047f0:	3301      	adds	r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004800:	461a      	mov	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3301      	adds	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3b01      	subs	r3, #1
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f47f af4e 	bne.w	80046bc <lwgps_process+0x12>
        }
    }
    return 1;
 8004820:	2301      	movs	r3, #1
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <atoi>:
 800482a:	220a      	movs	r2, #10
 800482c:	2100      	movs	r1, #0
 800482e:	f000 b9d5 	b.w	8004bdc <strtol>
	...

08004834 <__errno>:
 8004834:	4b01      	ldr	r3, [pc, #4]	; (800483c <__errno+0x8>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	2000000c 	.word	0x2000000c

08004840 <__libc_init_array>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	2600      	movs	r6, #0
 8004844:	4d0c      	ldr	r5, [pc, #48]	; (8004878 <__libc_init_array+0x38>)
 8004846:	4c0d      	ldr	r4, [pc, #52]	; (800487c <__libc_init_array+0x3c>)
 8004848:	1b64      	subs	r4, r4, r5
 800484a:	10a4      	asrs	r4, r4, #2
 800484c:	42a6      	cmp	r6, r4
 800484e:	d109      	bne.n	8004864 <__libc_init_array+0x24>
 8004850:	f001 f85e 	bl	8005910 <_init>
 8004854:	2600      	movs	r6, #0
 8004856:	4d0a      	ldr	r5, [pc, #40]	; (8004880 <__libc_init_array+0x40>)
 8004858:	4c0a      	ldr	r4, [pc, #40]	; (8004884 <__libc_init_array+0x44>)
 800485a:	1b64      	subs	r4, r4, r5
 800485c:	10a4      	asrs	r4, r4, #2
 800485e:	42a6      	cmp	r6, r4
 8004860:	d105      	bne.n	800486e <__libc_init_array+0x2e>
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	f855 3b04 	ldr.w	r3, [r5], #4
 8004868:	4798      	blx	r3
 800486a:	3601      	adds	r6, #1
 800486c:	e7ee      	b.n	800484c <__libc_init_array+0xc>
 800486e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004872:	4798      	blx	r3
 8004874:	3601      	adds	r6, #1
 8004876:	e7f2      	b.n	800485e <__libc_init_array+0x1e>
 8004878:	08005d18 	.word	0x08005d18
 800487c:	08005d18 	.word	0x08005d18
 8004880:	08005d18 	.word	0x08005d18
 8004884:	08005d1c 	.word	0x08005d1c

08004888 <memcpy>:
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004890:	d100      	bne.n	8004894 <memcpy+0xc>
 8004892:	4770      	bx	lr
 8004894:	b510      	push	{r4, lr}
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	4291      	cmp	r1, r2
 800489c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a0:	d1f9      	bne.n	8004896 <memcpy+0xe>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <memset>:
 80048a4:	4603      	mov	r3, r0
 80048a6:	4402      	add	r2, r0
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d100      	bne.n	80048ae <memset+0xa>
 80048ac:	4770      	bx	lr
 80048ae:	f803 1b01 	strb.w	r1, [r3], #1
 80048b2:	e7f9      	b.n	80048a8 <memset+0x4>

080048b4 <_free_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4605      	mov	r5, r0
 80048b8:	2900      	cmp	r1, #0
 80048ba:	d040      	beq.n	800493e <_free_r+0x8a>
 80048bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c0:	1f0c      	subs	r4, r1, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bfb8      	it	lt
 80048c6:	18e4      	addlt	r4, r4, r3
 80048c8:	f000 fa8a 	bl	8004de0 <__malloc_lock>
 80048cc:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <_free_r+0x8c>)
 80048ce:	6813      	ldr	r3, [r2, #0]
 80048d0:	b933      	cbnz	r3, 80048e0 <_free_r+0x2c>
 80048d2:	6063      	str	r3, [r4, #4]
 80048d4:	6014      	str	r4, [r2, #0]
 80048d6:	4628      	mov	r0, r5
 80048d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048dc:	f000 ba86 	b.w	8004dec <__malloc_unlock>
 80048e0:	42a3      	cmp	r3, r4
 80048e2:	d908      	bls.n	80048f6 <_free_r+0x42>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	1821      	adds	r1, r4, r0
 80048e8:	428b      	cmp	r3, r1
 80048ea:	bf01      	itttt	eq
 80048ec:	6819      	ldreq	r1, [r3, #0]
 80048ee:	685b      	ldreq	r3, [r3, #4]
 80048f0:	1809      	addeq	r1, r1, r0
 80048f2:	6021      	streq	r1, [r4, #0]
 80048f4:	e7ed      	b.n	80048d2 <_free_r+0x1e>
 80048f6:	461a      	mov	r2, r3
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	b10b      	cbz	r3, 8004900 <_free_r+0x4c>
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	d9fa      	bls.n	80048f6 <_free_r+0x42>
 8004900:	6811      	ldr	r1, [r2, #0]
 8004902:	1850      	adds	r0, r2, r1
 8004904:	42a0      	cmp	r0, r4
 8004906:	d10b      	bne.n	8004920 <_free_r+0x6c>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	4401      	add	r1, r0
 800490c:	1850      	adds	r0, r2, r1
 800490e:	4283      	cmp	r3, r0
 8004910:	6011      	str	r1, [r2, #0]
 8004912:	d1e0      	bne.n	80048d6 <_free_r+0x22>
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4401      	add	r1, r0
 800491a:	6011      	str	r1, [r2, #0]
 800491c:	6053      	str	r3, [r2, #4]
 800491e:	e7da      	b.n	80048d6 <_free_r+0x22>
 8004920:	d902      	bls.n	8004928 <_free_r+0x74>
 8004922:	230c      	movs	r3, #12
 8004924:	602b      	str	r3, [r5, #0]
 8004926:	e7d6      	b.n	80048d6 <_free_r+0x22>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	1821      	adds	r1, r4, r0
 800492c:	428b      	cmp	r3, r1
 800492e:	bf01      	itttt	eq
 8004930:	6819      	ldreq	r1, [r3, #0]
 8004932:	685b      	ldreq	r3, [r3, #4]
 8004934:	1809      	addeq	r1, r1, r0
 8004936:	6021      	streq	r1, [r4, #0]
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	6054      	str	r4, [r2, #4]
 800493c:	e7cb      	b.n	80048d6 <_free_r+0x22>
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	20000648 	.word	0x20000648

08004944 <sbrk_aligned>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4e0e      	ldr	r6, [pc, #56]	; (8004980 <sbrk_aligned+0x3c>)
 8004948:	460c      	mov	r4, r1
 800494a:	6831      	ldr	r1, [r6, #0]
 800494c:	4605      	mov	r5, r0
 800494e:	b911      	cbnz	r1, 8004956 <sbrk_aligned+0x12>
 8004950:	f000 f8a4 	bl	8004a9c <_sbrk_r>
 8004954:	6030      	str	r0, [r6, #0]
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 f89f 	bl	8004a9c <_sbrk_r>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	d00a      	beq.n	8004978 <sbrk_aligned+0x34>
 8004962:	1cc4      	adds	r4, r0, #3
 8004964:	f024 0403 	bic.w	r4, r4, #3
 8004968:	42a0      	cmp	r0, r4
 800496a:	d007      	beq.n	800497c <sbrk_aligned+0x38>
 800496c:	1a21      	subs	r1, r4, r0
 800496e:	4628      	mov	r0, r5
 8004970:	f000 f894 	bl	8004a9c <_sbrk_r>
 8004974:	3001      	adds	r0, #1
 8004976:	d101      	bne.n	800497c <sbrk_aligned+0x38>
 8004978:	f04f 34ff 	mov.w	r4, #4294967295
 800497c:	4620      	mov	r0, r4
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	2000064c 	.word	0x2000064c

08004984 <_malloc_r>:
 8004984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004988:	1ccd      	adds	r5, r1, #3
 800498a:	f025 0503 	bic.w	r5, r5, #3
 800498e:	3508      	adds	r5, #8
 8004990:	2d0c      	cmp	r5, #12
 8004992:	bf38      	it	cc
 8004994:	250c      	movcc	r5, #12
 8004996:	2d00      	cmp	r5, #0
 8004998:	4607      	mov	r7, r0
 800499a:	db01      	blt.n	80049a0 <_malloc_r+0x1c>
 800499c:	42a9      	cmp	r1, r5
 800499e:	d905      	bls.n	80049ac <_malloc_r+0x28>
 80049a0:	230c      	movs	r3, #12
 80049a2:	2600      	movs	r6, #0
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	4630      	mov	r0, r6
 80049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ac:	4e2e      	ldr	r6, [pc, #184]	; (8004a68 <_malloc_r+0xe4>)
 80049ae:	f000 fa17 	bl	8004de0 <__malloc_lock>
 80049b2:	6833      	ldr	r3, [r6, #0]
 80049b4:	461c      	mov	r4, r3
 80049b6:	bb34      	cbnz	r4, 8004a06 <_malloc_r+0x82>
 80049b8:	4629      	mov	r1, r5
 80049ba:	4638      	mov	r0, r7
 80049bc:	f7ff ffc2 	bl	8004944 <sbrk_aligned>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	4604      	mov	r4, r0
 80049c4:	d14d      	bne.n	8004a62 <_malloc_r+0xde>
 80049c6:	6834      	ldr	r4, [r6, #0]
 80049c8:	4626      	mov	r6, r4
 80049ca:	2e00      	cmp	r6, #0
 80049cc:	d140      	bne.n	8004a50 <_malloc_r+0xcc>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	4631      	mov	r1, r6
 80049d2:	4638      	mov	r0, r7
 80049d4:	eb04 0803 	add.w	r8, r4, r3
 80049d8:	f000 f860 	bl	8004a9c <_sbrk_r>
 80049dc:	4580      	cmp	r8, r0
 80049de:	d13a      	bne.n	8004a56 <_malloc_r+0xd2>
 80049e0:	6821      	ldr	r1, [r4, #0]
 80049e2:	3503      	adds	r5, #3
 80049e4:	1a6d      	subs	r5, r5, r1
 80049e6:	f025 0503 	bic.w	r5, r5, #3
 80049ea:	3508      	adds	r5, #8
 80049ec:	2d0c      	cmp	r5, #12
 80049ee:	bf38      	it	cc
 80049f0:	250c      	movcc	r5, #12
 80049f2:	4638      	mov	r0, r7
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7ff ffa5 	bl	8004944 <sbrk_aligned>
 80049fa:	3001      	adds	r0, #1
 80049fc:	d02b      	beq.n	8004a56 <_malloc_r+0xd2>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	442b      	add	r3, r5
 8004a02:	6023      	str	r3, [r4, #0]
 8004a04:	e00e      	b.n	8004a24 <_malloc_r+0xa0>
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	1b52      	subs	r2, r2, r5
 8004a0a:	d41e      	bmi.n	8004a4a <_malloc_r+0xc6>
 8004a0c:	2a0b      	cmp	r2, #11
 8004a0e:	d916      	bls.n	8004a3e <_malloc_r+0xba>
 8004a10:	1961      	adds	r1, r4, r5
 8004a12:	42a3      	cmp	r3, r4
 8004a14:	6025      	str	r5, [r4, #0]
 8004a16:	bf18      	it	ne
 8004a18:	6059      	strne	r1, [r3, #4]
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	bf08      	it	eq
 8004a1e:	6031      	streq	r1, [r6, #0]
 8004a20:	5162      	str	r2, [r4, r5]
 8004a22:	604b      	str	r3, [r1, #4]
 8004a24:	4638      	mov	r0, r7
 8004a26:	f104 060b 	add.w	r6, r4, #11
 8004a2a:	f000 f9df 	bl	8004dec <__malloc_unlock>
 8004a2e:	f026 0607 	bic.w	r6, r6, #7
 8004a32:	1d23      	adds	r3, r4, #4
 8004a34:	1af2      	subs	r2, r6, r3
 8004a36:	d0b6      	beq.n	80049a6 <_malloc_r+0x22>
 8004a38:	1b9b      	subs	r3, r3, r6
 8004a3a:	50a3      	str	r3, [r4, r2]
 8004a3c:	e7b3      	b.n	80049a6 <_malloc_r+0x22>
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	bf0c      	ite	eq
 8004a44:	6032      	streq	r2, [r6, #0]
 8004a46:	605a      	strne	r2, [r3, #4]
 8004a48:	e7ec      	b.n	8004a24 <_malloc_r+0xa0>
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	6864      	ldr	r4, [r4, #4]
 8004a4e:	e7b2      	b.n	80049b6 <_malloc_r+0x32>
 8004a50:	4634      	mov	r4, r6
 8004a52:	6876      	ldr	r6, [r6, #4]
 8004a54:	e7b9      	b.n	80049ca <_malloc_r+0x46>
 8004a56:	230c      	movs	r3, #12
 8004a58:	4638      	mov	r0, r7
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	f000 f9c6 	bl	8004dec <__malloc_unlock>
 8004a60:	e7a1      	b.n	80049a6 <_malloc_r+0x22>
 8004a62:	6025      	str	r5, [r4, #0]
 8004a64:	e7de      	b.n	8004a24 <_malloc_r+0xa0>
 8004a66:	bf00      	nop
 8004a68:	20000648 	.word	0x20000648

08004a6c <iprintf>:
 8004a6c:	b40f      	push	{r0, r1, r2, r3}
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <iprintf+0x2c>)
 8004a70:	b513      	push	{r0, r1, r4, lr}
 8004a72:	681c      	ldr	r4, [r3, #0]
 8004a74:	b124      	cbz	r4, 8004a80 <iprintf+0x14>
 8004a76:	69a3      	ldr	r3, [r4, #24]
 8004a78:	b913      	cbnz	r3, 8004a80 <iprintf+0x14>
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 f910 	bl	8004ca0 <__sinit>
 8004a80:	ab05      	add	r3, sp, #20
 8004a82:	4620      	mov	r0, r4
 8004a84:	9a04      	ldr	r2, [sp, #16]
 8004a86:	68a1      	ldr	r1, [r4, #8]
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	f000 f9dd 	bl	8004e48 <_vfiprintf_r>
 8004a8e:	b002      	add	sp, #8
 8004a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a94:	b004      	add	sp, #16
 8004a96:	4770      	bx	lr
 8004a98:	2000000c 	.word	0x2000000c

08004a9c <_sbrk_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4d05      	ldr	r5, [pc, #20]	; (8004ab8 <_sbrk_r+0x1c>)
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	f7fc fb4a 	bl	8001140 <_sbrk>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_sbrk_r+0x1a>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_sbrk_r+0x1a>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	20000654 	.word	0x20000654

08004abc <strncmp>:
 8004abc:	4603      	mov	r3, r0
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	b172      	cbz	r2, 8004ae0 <strncmp+0x24>
 8004ac2:	3901      	subs	r1, #1
 8004ac4:	1884      	adds	r4, r0, r2
 8004ac6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004aca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004ace:	4290      	cmp	r0, r2
 8004ad0:	d101      	bne.n	8004ad6 <strncmp+0x1a>
 8004ad2:	42a3      	cmp	r3, r4
 8004ad4:	d101      	bne.n	8004ada <strncmp+0x1e>
 8004ad6:	1a80      	subs	r0, r0, r2
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d1f3      	bne.n	8004ac6 <strncmp+0xa>
 8004ade:	e7fa      	b.n	8004ad6 <strncmp+0x1a>
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	e7f9      	b.n	8004ad8 <strncmp+0x1c>

08004ae4 <_strtol_l.constprop.0>:
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aea:	4680      	mov	r8, r0
 8004aec:	d001      	beq.n	8004af2 <_strtol_l.constprop.0+0xe>
 8004aee:	2b24      	cmp	r3, #36	; 0x24
 8004af0:	d906      	bls.n	8004b00 <_strtol_l.constprop.0+0x1c>
 8004af2:	f7ff fe9f 	bl	8004834 <__errno>
 8004af6:	2316      	movs	r3, #22
 8004af8:	6003      	str	r3, [r0, #0]
 8004afa:	2000      	movs	r0, #0
 8004afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b00:	460d      	mov	r5, r1
 8004b02:	4f35      	ldr	r7, [pc, #212]	; (8004bd8 <_strtol_l.constprop.0+0xf4>)
 8004b04:	4628      	mov	r0, r5
 8004b06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b0a:	5de6      	ldrb	r6, [r4, r7]
 8004b0c:	f016 0608 	ands.w	r6, r6, #8
 8004b10:	d1f8      	bne.n	8004b04 <_strtol_l.constprop.0+0x20>
 8004b12:	2c2d      	cmp	r4, #45	; 0x2d
 8004b14:	d12f      	bne.n	8004b76 <_strtol_l.constprop.0+0x92>
 8004b16:	2601      	movs	r6, #1
 8004b18:	782c      	ldrb	r4, [r5, #0]
 8004b1a:	1c85      	adds	r5, r0, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d057      	beq.n	8004bd0 <_strtol_l.constprop.0+0xec>
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d109      	bne.n	8004b38 <_strtol_l.constprop.0+0x54>
 8004b24:	2c30      	cmp	r4, #48	; 0x30
 8004b26:	d107      	bne.n	8004b38 <_strtol_l.constprop.0+0x54>
 8004b28:	7828      	ldrb	r0, [r5, #0]
 8004b2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b2e:	2858      	cmp	r0, #88	; 0x58
 8004b30:	d149      	bne.n	8004bc6 <_strtol_l.constprop.0+0xe2>
 8004b32:	2310      	movs	r3, #16
 8004b34:	786c      	ldrb	r4, [r5, #1]
 8004b36:	3502      	adds	r5, #2
 8004b38:	2700      	movs	r7, #0
 8004b3a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004b3e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004b42:	fbbe f9f3 	udiv	r9, lr, r3
 8004b46:	4638      	mov	r0, r7
 8004b48:	fb03 ea19 	mls	sl, r3, r9, lr
 8004b4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b50:	f1bc 0f09 	cmp.w	ip, #9
 8004b54:	d814      	bhi.n	8004b80 <_strtol_l.constprop.0+0x9c>
 8004b56:	4664      	mov	r4, ip
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	dd22      	ble.n	8004ba2 <_strtol_l.constprop.0+0xbe>
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	db1d      	blt.n	8004b9c <_strtol_l.constprop.0+0xb8>
 8004b60:	4581      	cmp	r9, r0
 8004b62:	d31b      	bcc.n	8004b9c <_strtol_l.constprop.0+0xb8>
 8004b64:	d101      	bne.n	8004b6a <_strtol_l.constprop.0+0x86>
 8004b66:	45a2      	cmp	sl, r4
 8004b68:	db18      	blt.n	8004b9c <_strtol_l.constprop.0+0xb8>
 8004b6a:	2701      	movs	r7, #1
 8004b6c:	fb00 4003 	mla	r0, r0, r3, r4
 8004b70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b74:	e7ea      	b.n	8004b4c <_strtol_l.constprop.0+0x68>
 8004b76:	2c2b      	cmp	r4, #43	; 0x2b
 8004b78:	bf04      	itt	eq
 8004b7a:	782c      	ldrbeq	r4, [r5, #0]
 8004b7c:	1c85      	addeq	r5, r0, #2
 8004b7e:	e7cd      	b.n	8004b1c <_strtol_l.constprop.0+0x38>
 8004b80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b84:	f1bc 0f19 	cmp.w	ip, #25
 8004b88:	d801      	bhi.n	8004b8e <_strtol_l.constprop.0+0xaa>
 8004b8a:	3c37      	subs	r4, #55	; 0x37
 8004b8c:	e7e4      	b.n	8004b58 <_strtol_l.constprop.0+0x74>
 8004b8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b92:	f1bc 0f19 	cmp.w	ip, #25
 8004b96:	d804      	bhi.n	8004ba2 <_strtol_l.constprop.0+0xbe>
 8004b98:	3c57      	subs	r4, #87	; 0x57
 8004b9a:	e7dd      	b.n	8004b58 <_strtol_l.constprop.0+0x74>
 8004b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ba0:	e7e6      	b.n	8004b70 <_strtol_l.constprop.0+0x8c>
 8004ba2:	2f00      	cmp	r7, #0
 8004ba4:	da07      	bge.n	8004bb6 <_strtol_l.constprop.0+0xd2>
 8004ba6:	2322      	movs	r3, #34	; 0x22
 8004ba8:	4670      	mov	r0, lr
 8004baa:	f8c8 3000 	str.w	r3, [r8]
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	d0a4      	beq.n	8004afc <_strtol_l.constprop.0+0x18>
 8004bb2:	1e69      	subs	r1, r5, #1
 8004bb4:	e005      	b.n	8004bc2 <_strtol_l.constprop.0+0xde>
 8004bb6:	b106      	cbz	r6, 8004bba <_strtol_l.constprop.0+0xd6>
 8004bb8:	4240      	negs	r0, r0
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	d09e      	beq.n	8004afc <_strtol_l.constprop.0+0x18>
 8004bbe:	2f00      	cmp	r7, #0
 8004bc0:	d1f7      	bne.n	8004bb2 <_strtol_l.constprop.0+0xce>
 8004bc2:	6011      	str	r1, [r2, #0]
 8004bc4:	e79a      	b.n	8004afc <_strtol_l.constprop.0+0x18>
 8004bc6:	2430      	movs	r4, #48	; 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1b5      	bne.n	8004b38 <_strtol_l.constprop.0+0x54>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	e7b3      	b.n	8004b38 <_strtol_l.constprop.0+0x54>
 8004bd0:	2c30      	cmp	r4, #48	; 0x30
 8004bd2:	d0a9      	beq.n	8004b28 <_strtol_l.constprop.0+0x44>
 8004bd4:	230a      	movs	r3, #10
 8004bd6:	e7af      	b.n	8004b38 <_strtol_l.constprop.0+0x54>
 8004bd8:	08005b81 	.word	0x08005b81

08004bdc <strtol>:
 8004bdc:	4613      	mov	r3, r2
 8004bde:	460a      	mov	r2, r1
 8004be0:	4601      	mov	r1, r0
 8004be2:	4802      	ldr	r0, [pc, #8]	; (8004bec <strtol+0x10>)
 8004be4:	6800      	ldr	r0, [r0, #0]
 8004be6:	f7ff bf7d 	b.w	8004ae4 <_strtol_l.constprop.0>
 8004bea:	bf00      	nop
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <std>:
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bfe:	6083      	str	r3, [r0, #8]
 8004c00:	8181      	strh	r1, [r0, #12]
 8004c02:	6643      	str	r3, [r0, #100]	; 0x64
 8004c04:	81c2      	strh	r2, [r0, #14]
 8004c06:	6183      	str	r3, [r0, #24]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	305c      	adds	r0, #92	; 0x5c
 8004c0e:	f7ff fe49 	bl	80048a4 <memset>
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <std+0x38>)
 8004c14:	6224      	str	r4, [r4, #32]
 8004c16:	6263      	str	r3, [r4, #36]	; 0x24
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <std+0x3c>)
 8004c1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <std+0x40>)
 8004c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <std+0x44>)
 8004c22:	6323      	str	r3, [r4, #48]	; 0x30
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	080053d5 	.word	0x080053d5
 8004c2c:	080053f7 	.word	0x080053f7
 8004c30:	0800542f 	.word	0x0800542f
 8004c34:	08005453 	.word	0x08005453

08004c38 <_cleanup_r>:
 8004c38:	4901      	ldr	r1, [pc, #4]	; (8004c40 <_cleanup_r+0x8>)
 8004c3a:	f000 b8af 	b.w	8004d9c <_fwalk_reent>
 8004c3e:	bf00      	nop
 8004c40:	08005725 	.word	0x08005725

08004c44 <__sfmoreglue>:
 8004c44:	2268      	movs	r2, #104	; 0x68
 8004c46:	b570      	push	{r4, r5, r6, lr}
 8004c48:	1e4d      	subs	r5, r1, #1
 8004c4a:	4355      	muls	r5, r2
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c52:	f7ff fe97 	bl	8004984 <_malloc_r>
 8004c56:	4604      	mov	r4, r0
 8004c58:	b140      	cbz	r0, 8004c6c <__sfmoreglue+0x28>
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c60:	300c      	adds	r0, #12
 8004c62:	60a0      	str	r0, [r4, #8]
 8004c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c68:	f7ff fe1c 	bl	80048a4 <memset>
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}

08004c70 <__sfp_lock_acquire>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__sfp_lock_acquire+0x8>)
 8004c72:	f000 b8b3 	b.w	8004ddc <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	20000651 	.word	0x20000651

08004c7c <__sfp_lock_release>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__sfp_lock_release+0x8>)
 8004c7e:	f000 b8ae 	b.w	8004dde <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	20000651 	.word	0x20000651

08004c88 <__sinit_lock_acquire>:
 8004c88:	4801      	ldr	r0, [pc, #4]	; (8004c90 <__sinit_lock_acquire+0x8>)
 8004c8a:	f000 b8a7 	b.w	8004ddc <__retarget_lock_acquire_recursive>
 8004c8e:	bf00      	nop
 8004c90:	20000652 	.word	0x20000652

08004c94 <__sinit_lock_release>:
 8004c94:	4801      	ldr	r0, [pc, #4]	; (8004c9c <__sinit_lock_release+0x8>)
 8004c96:	f000 b8a2 	b.w	8004dde <__retarget_lock_release_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	20000652 	.word	0x20000652

08004ca0 <__sinit>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	f7ff fff0 	bl	8004c88 <__sinit_lock_acquire>
 8004ca8:	69a3      	ldr	r3, [r4, #24]
 8004caa:	b11b      	cbz	r3, 8004cb4 <__sinit+0x14>
 8004cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb0:	f7ff bff0 	b.w	8004c94 <__sinit_lock_release>
 8004cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <__sinit+0x68>)
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <__sinit+0x6c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	bf08      	it	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	4620      	mov	r0, r4
 8004cca:	bf08      	it	eq
 8004ccc:	61a3      	streq	r3, [r4, #24]
 8004cce:	f000 f81f 	bl	8004d10 <__sfp>
 8004cd2:	6060      	str	r0, [r4, #4]
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f000 f81b 	bl	8004d10 <__sfp>
 8004cda:	60a0      	str	r0, [r4, #8]
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 f817 	bl	8004d10 <__sfp>
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	60e0      	str	r0, [r4, #12]
 8004ce8:	6860      	ldr	r0, [r4, #4]
 8004cea:	f7ff ff81 	bl	8004bf0 <std>
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2109      	movs	r1, #9
 8004cf2:	68a0      	ldr	r0, [r4, #8]
 8004cf4:	f7ff ff7c 	bl	8004bf0 <std>
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	2112      	movs	r1, #18
 8004cfc:	68e0      	ldr	r0, [r4, #12]
 8004cfe:	f7ff ff77 	bl	8004bf0 <std>
 8004d02:	2301      	movs	r3, #1
 8004d04:	61a3      	str	r3, [r4, #24]
 8004d06:	e7d1      	b.n	8004cac <__sinit+0xc>
 8004d08:	08005b7c 	.word	0x08005b7c
 8004d0c:	08004c39 	.word	0x08004c39

08004d10 <__sfp>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	4607      	mov	r7, r0
 8004d14:	f7ff ffac 	bl	8004c70 <__sfp_lock_acquire>
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <__sfp+0x84>)
 8004d1a:	681e      	ldr	r6, [r3, #0]
 8004d1c:	69b3      	ldr	r3, [r6, #24]
 8004d1e:	b913      	cbnz	r3, 8004d26 <__sfp+0x16>
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff ffbd 	bl	8004ca0 <__sinit>
 8004d26:	3648      	adds	r6, #72	; 0x48
 8004d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	d503      	bpl.n	8004d38 <__sfp+0x28>
 8004d30:	6833      	ldr	r3, [r6, #0]
 8004d32:	b30b      	cbz	r3, 8004d78 <__sfp+0x68>
 8004d34:	6836      	ldr	r6, [r6, #0]
 8004d36:	e7f7      	b.n	8004d28 <__sfp+0x18>
 8004d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d3c:	b9d5      	cbnz	r5, 8004d74 <__sfp+0x64>
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <__sfp+0x88>)
 8004d40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d44:	60e3      	str	r3, [r4, #12]
 8004d46:	6665      	str	r5, [r4, #100]	; 0x64
 8004d48:	f000 f847 	bl	8004dda <__retarget_lock_init_recursive>
 8004d4c:	f7ff ff96 	bl	8004c7c <__sfp_lock_release>
 8004d50:	2208      	movs	r2, #8
 8004d52:	4629      	mov	r1, r5
 8004d54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d5c:	6025      	str	r5, [r4, #0]
 8004d5e:	61a5      	str	r5, [r4, #24]
 8004d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d64:	f7ff fd9e 	bl	80048a4 <memset>
 8004d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d70:	4620      	mov	r0, r4
 8004d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d74:	3468      	adds	r4, #104	; 0x68
 8004d76:	e7d9      	b.n	8004d2c <__sfp+0x1c>
 8004d78:	2104      	movs	r1, #4
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	f7ff ff62 	bl	8004c44 <__sfmoreglue>
 8004d80:	4604      	mov	r4, r0
 8004d82:	6030      	str	r0, [r6, #0]
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d1d5      	bne.n	8004d34 <__sfp+0x24>
 8004d88:	f7ff ff78 	bl	8004c7c <__sfp_lock_release>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	e7ee      	b.n	8004d70 <__sfp+0x60>
 8004d92:	bf00      	nop
 8004d94:	08005b7c 	.word	0x08005b7c
 8004d98:	ffff0001 	.word	0xffff0001

08004d9c <_fwalk_reent>:
 8004d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da0:	4606      	mov	r6, r0
 8004da2:	4688      	mov	r8, r1
 8004da4:	2700      	movs	r7, #0
 8004da6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dae:	f1b9 0901 	subs.w	r9, r9, #1
 8004db2:	d505      	bpl.n	8004dc0 <_fwalk_reent+0x24>
 8004db4:	6824      	ldr	r4, [r4, #0]
 8004db6:	2c00      	cmp	r4, #0
 8004db8:	d1f7      	bne.n	8004daa <_fwalk_reent+0xe>
 8004dba:	4638      	mov	r0, r7
 8004dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc0:	89ab      	ldrh	r3, [r5, #12]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d907      	bls.n	8004dd6 <_fwalk_reent+0x3a>
 8004dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	d003      	beq.n	8004dd6 <_fwalk_reent+0x3a>
 8004dce:	4629      	mov	r1, r5
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	47c0      	blx	r8
 8004dd4:	4307      	orrs	r7, r0
 8004dd6:	3568      	adds	r5, #104	; 0x68
 8004dd8:	e7e9      	b.n	8004dae <_fwalk_reent+0x12>

08004dda <__retarget_lock_init_recursive>:
 8004dda:	4770      	bx	lr

08004ddc <__retarget_lock_acquire_recursive>:
 8004ddc:	4770      	bx	lr

08004dde <__retarget_lock_release_recursive>:
 8004dde:	4770      	bx	lr

08004de0 <__malloc_lock>:
 8004de0:	4801      	ldr	r0, [pc, #4]	; (8004de8 <__malloc_lock+0x8>)
 8004de2:	f7ff bffb 	b.w	8004ddc <__retarget_lock_acquire_recursive>
 8004de6:	bf00      	nop
 8004de8:	20000650 	.word	0x20000650

08004dec <__malloc_unlock>:
 8004dec:	4801      	ldr	r0, [pc, #4]	; (8004df4 <__malloc_unlock+0x8>)
 8004dee:	f7ff bff6 	b.w	8004dde <__retarget_lock_release_recursive>
 8004df2:	bf00      	nop
 8004df4:	20000650 	.word	0x20000650

08004df8 <__sfputc_r>:
 8004df8:	6893      	ldr	r3, [r2, #8]
 8004dfa:	b410      	push	{r4}
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	6093      	str	r3, [r2, #8]
 8004e02:	da07      	bge.n	8004e14 <__sfputc_r+0x1c>
 8004e04:	6994      	ldr	r4, [r2, #24]
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	db01      	blt.n	8004e0e <__sfputc_r+0x16>
 8004e0a:	290a      	cmp	r1, #10
 8004e0c:	d102      	bne.n	8004e14 <__sfputc_r+0x1c>
 8004e0e:	bc10      	pop	{r4}
 8004e10:	f000 bb24 	b.w	800545c <__swbuf_r>
 8004e14:	6813      	ldr	r3, [r2, #0]
 8004e16:	1c58      	adds	r0, r3, #1
 8004e18:	6010      	str	r0, [r2, #0]
 8004e1a:	7019      	strb	r1, [r3, #0]
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	bc10      	pop	{r4}
 8004e20:	4770      	bx	lr

08004e22 <__sfputs_r>:
 8004e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e24:	4606      	mov	r6, r0
 8004e26:	460f      	mov	r7, r1
 8004e28:	4614      	mov	r4, r2
 8004e2a:	18d5      	adds	r5, r2, r3
 8004e2c:	42ac      	cmp	r4, r5
 8004e2e:	d101      	bne.n	8004e34 <__sfputs_r+0x12>
 8004e30:	2000      	movs	r0, #0
 8004e32:	e007      	b.n	8004e44 <__sfputs_r+0x22>
 8004e34:	463a      	mov	r2, r7
 8004e36:	4630      	mov	r0, r6
 8004e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3c:	f7ff ffdc 	bl	8004df8 <__sfputc_r>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d1f3      	bne.n	8004e2c <__sfputs_r+0xa>
 8004e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e48 <_vfiprintf_r>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	4614      	mov	r4, r2
 8004e50:	4698      	mov	r8, r3
 8004e52:	4606      	mov	r6, r0
 8004e54:	b09d      	sub	sp, #116	; 0x74
 8004e56:	b118      	cbz	r0, 8004e60 <_vfiprintf_r+0x18>
 8004e58:	6983      	ldr	r3, [r0, #24]
 8004e5a:	b90b      	cbnz	r3, 8004e60 <_vfiprintf_r+0x18>
 8004e5c:	f7ff ff20 	bl	8004ca0 <__sinit>
 8004e60:	4b89      	ldr	r3, [pc, #548]	; (8005088 <_vfiprintf_r+0x240>)
 8004e62:	429d      	cmp	r5, r3
 8004e64:	d11b      	bne.n	8004e9e <_vfiprintf_r+0x56>
 8004e66:	6875      	ldr	r5, [r6, #4]
 8004e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e6a:	07d9      	lsls	r1, r3, #31
 8004e6c:	d405      	bmi.n	8004e7a <_vfiprintf_r+0x32>
 8004e6e:	89ab      	ldrh	r3, [r5, #12]
 8004e70:	059a      	lsls	r2, r3, #22
 8004e72:	d402      	bmi.n	8004e7a <_vfiprintf_r+0x32>
 8004e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e76:	f7ff ffb1 	bl	8004ddc <__retarget_lock_acquire_recursive>
 8004e7a:	89ab      	ldrh	r3, [r5, #12]
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	d501      	bpl.n	8004e84 <_vfiprintf_r+0x3c>
 8004e80:	692b      	ldr	r3, [r5, #16]
 8004e82:	b9eb      	cbnz	r3, 8004ec0 <_vfiprintf_r+0x78>
 8004e84:	4629      	mov	r1, r5
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 fb4c 	bl	8005524 <__swsetup_r>
 8004e8c:	b1c0      	cbz	r0, 8004ec0 <_vfiprintf_r+0x78>
 8004e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e90:	07dc      	lsls	r4, r3, #31
 8004e92:	d50e      	bpl.n	8004eb2 <_vfiprintf_r+0x6a>
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	b01d      	add	sp, #116	; 0x74
 8004e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9e:	4b7b      	ldr	r3, [pc, #492]	; (800508c <_vfiprintf_r+0x244>)
 8004ea0:	429d      	cmp	r5, r3
 8004ea2:	d101      	bne.n	8004ea8 <_vfiprintf_r+0x60>
 8004ea4:	68b5      	ldr	r5, [r6, #8]
 8004ea6:	e7df      	b.n	8004e68 <_vfiprintf_r+0x20>
 8004ea8:	4b79      	ldr	r3, [pc, #484]	; (8005090 <_vfiprintf_r+0x248>)
 8004eaa:	429d      	cmp	r5, r3
 8004eac:	bf08      	it	eq
 8004eae:	68f5      	ldreq	r5, [r6, #12]
 8004eb0:	e7da      	b.n	8004e68 <_vfiprintf_r+0x20>
 8004eb2:	89ab      	ldrh	r3, [r5, #12]
 8004eb4:	0598      	lsls	r0, r3, #22
 8004eb6:	d4ed      	bmi.n	8004e94 <_vfiprintf_r+0x4c>
 8004eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eba:	f7ff ff90 	bl	8004dde <__retarget_lock_release_recursive>
 8004ebe:	e7e9      	b.n	8004e94 <_vfiprintf_r+0x4c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eca:	2330      	movs	r3, #48	; 0x30
 8004ecc:	f04f 0901 	mov.w	r9, #1
 8004ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ed4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005094 <_vfiprintf_r+0x24c>
 8004ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004edc:	4623      	mov	r3, r4
 8004ede:	469a      	mov	sl, r3
 8004ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee4:	b10a      	cbz	r2, 8004eea <_vfiprintf_r+0xa2>
 8004ee6:	2a25      	cmp	r2, #37	; 0x25
 8004ee8:	d1f9      	bne.n	8004ede <_vfiprintf_r+0x96>
 8004eea:	ebba 0b04 	subs.w	fp, sl, r4
 8004eee:	d00b      	beq.n	8004f08 <_vfiprintf_r+0xc0>
 8004ef0:	465b      	mov	r3, fp
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff ff93 	bl	8004e22 <__sfputs_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	f000 80aa 	beq.w	8005056 <_vfiprintf_r+0x20e>
 8004f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f04:	445a      	add	r2, fp
 8004f06:	9209      	str	r2, [sp, #36]	; 0x24
 8004f08:	f89a 3000 	ldrb.w	r3, [sl]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a2 	beq.w	8005056 <_vfiprintf_r+0x20e>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295
 8004f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f1c:	f10a 0a01 	add.w	sl, sl, #1
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	9307      	str	r3, [sp, #28]
 8004f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f28:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2a:	4654      	mov	r4, sl
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f32:	4858      	ldr	r0, [pc, #352]	; (8005094 <_vfiprintf_r+0x24c>)
 8004f34:	f000 fcaa 	bl	800588c <memchr>
 8004f38:	9a04      	ldr	r2, [sp, #16]
 8004f3a:	b9d8      	cbnz	r0, 8004f74 <_vfiprintf_r+0x12c>
 8004f3c:	06d1      	lsls	r1, r2, #27
 8004f3e:	bf44      	itt	mi
 8004f40:	2320      	movmi	r3, #32
 8004f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f46:	0713      	lsls	r3, r2, #28
 8004f48:	bf44      	itt	mi
 8004f4a:	232b      	movmi	r3, #43	; 0x2b
 8004f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f50:	f89a 3000 	ldrb.w	r3, [sl]
 8004f54:	2b2a      	cmp	r3, #42	; 0x2a
 8004f56:	d015      	beq.n	8004f84 <_vfiprintf_r+0x13c>
 8004f58:	4654      	mov	r4, sl
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	f04f 0c0a 	mov.w	ip, #10
 8004f60:	9a07      	ldr	r2, [sp, #28]
 8004f62:	4621      	mov	r1, r4
 8004f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f68:	3b30      	subs	r3, #48	; 0x30
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	d94e      	bls.n	800500c <_vfiprintf_r+0x1c4>
 8004f6e:	b1b0      	cbz	r0, 8004f9e <_vfiprintf_r+0x156>
 8004f70:	9207      	str	r2, [sp, #28]
 8004f72:	e014      	b.n	8004f9e <_vfiprintf_r+0x156>
 8004f74:	eba0 0308 	sub.w	r3, r0, r8
 8004f78:	fa09 f303 	lsl.w	r3, r9, r3
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	46a2      	mov	sl, r4
 8004f80:	9304      	str	r3, [sp, #16]
 8004f82:	e7d2      	b.n	8004f2a <_vfiprintf_r+0xe2>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	1d19      	adds	r1, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	9103      	str	r1, [sp, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfbb      	ittet	lt
 8004f90:	425b      	neglt	r3, r3
 8004f92:	f042 0202 	orrlt.w	r2, r2, #2
 8004f96:	9307      	strge	r3, [sp, #28]
 8004f98:	9307      	strlt	r3, [sp, #28]
 8004f9a:	bfb8      	it	lt
 8004f9c:	9204      	strlt	r2, [sp, #16]
 8004f9e:	7823      	ldrb	r3, [r4, #0]
 8004fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa2:	d10c      	bne.n	8004fbe <_vfiprintf_r+0x176>
 8004fa4:	7863      	ldrb	r3, [r4, #1]
 8004fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa8:	d135      	bne.n	8005016 <_vfiprintf_r+0x1ce>
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	3402      	adds	r4, #2
 8004fae:	1d1a      	adds	r2, r3, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	9203      	str	r2, [sp, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bfb8      	it	lt
 8004fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005098 <_vfiprintf_r+0x250>
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	7821      	ldrb	r1, [r4, #0]
 8004fc8:	f000 fc60 	bl	800588c <memchr>
 8004fcc:	b140      	cbz	r0, 8004fe0 <_vfiprintf_r+0x198>
 8004fce:	2340      	movs	r3, #64	; 0x40
 8004fd0:	eba0 000a 	sub.w	r0, r0, sl
 8004fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8004fd8:	9b04      	ldr	r3, [sp, #16]
 8004fda:	3401      	adds	r4, #1
 8004fdc:	4303      	orrs	r3, r0
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe4:	2206      	movs	r2, #6
 8004fe6:	482d      	ldr	r0, [pc, #180]	; (800509c <_vfiprintf_r+0x254>)
 8004fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fec:	f000 fc4e 	bl	800588c <memchr>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d03f      	beq.n	8005074 <_vfiprintf_r+0x22c>
 8004ff4:	4b2a      	ldr	r3, [pc, #168]	; (80050a0 <_vfiprintf_r+0x258>)
 8004ff6:	bb1b      	cbnz	r3, 8005040 <_vfiprintf_r+0x1f8>
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	3307      	adds	r3, #7
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	3308      	adds	r3, #8
 8005002:	9303      	str	r3, [sp, #12]
 8005004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005006:	443b      	add	r3, r7
 8005008:	9309      	str	r3, [sp, #36]	; 0x24
 800500a:	e767      	b.n	8004edc <_vfiprintf_r+0x94>
 800500c:	460c      	mov	r4, r1
 800500e:	2001      	movs	r0, #1
 8005010:	fb0c 3202 	mla	r2, ip, r2, r3
 8005014:	e7a5      	b.n	8004f62 <_vfiprintf_r+0x11a>
 8005016:	2300      	movs	r3, #0
 8005018:	f04f 0c0a 	mov.w	ip, #10
 800501c:	4619      	mov	r1, r3
 800501e:	3401      	adds	r4, #1
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	4620      	mov	r0, r4
 8005024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005028:	3a30      	subs	r2, #48	; 0x30
 800502a:	2a09      	cmp	r2, #9
 800502c:	d903      	bls.n	8005036 <_vfiprintf_r+0x1ee>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0c5      	beq.n	8004fbe <_vfiprintf_r+0x176>
 8005032:	9105      	str	r1, [sp, #20]
 8005034:	e7c3      	b.n	8004fbe <_vfiprintf_r+0x176>
 8005036:	4604      	mov	r4, r0
 8005038:	2301      	movs	r3, #1
 800503a:	fb0c 2101 	mla	r1, ip, r1, r2
 800503e:	e7f0      	b.n	8005022 <_vfiprintf_r+0x1da>
 8005040:	ab03      	add	r3, sp, #12
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	462a      	mov	r2, r5
 8005046:	4630      	mov	r0, r6
 8005048:	4b16      	ldr	r3, [pc, #88]	; (80050a4 <_vfiprintf_r+0x25c>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	f3af 8000 	nop.w
 8005050:	4607      	mov	r7, r0
 8005052:	1c78      	adds	r0, r7, #1
 8005054:	d1d6      	bne.n	8005004 <_vfiprintf_r+0x1bc>
 8005056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005058:	07d9      	lsls	r1, r3, #31
 800505a:	d405      	bmi.n	8005068 <_vfiprintf_r+0x220>
 800505c:	89ab      	ldrh	r3, [r5, #12]
 800505e:	059a      	lsls	r2, r3, #22
 8005060:	d402      	bmi.n	8005068 <_vfiprintf_r+0x220>
 8005062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005064:	f7ff febb 	bl	8004dde <__retarget_lock_release_recursive>
 8005068:	89ab      	ldrh	r3, [r5, #12]
 800506a:	065b      	lsls	r3, r3, #25
 800506c:	f53f af12 	bmi.w	8004e94 <_vfiprintf_r+0x4c>
 8005070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005072:	e711      	b.n	8004e98 <_vfiprintf_r+0x50>
 8005074:	ab03      	add	r3, sp, #12
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	462a      	mov	r2, r5
 800507a:	4630      	mov	r0, r6
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <_vfiprintf_r+0x25c>)
 800507e:	a904      	add	r1, sp, #16
 8005080:	f000 f882 	bl	8005188 <_printf_i>
 8005084:	e7e4      	b.n	8005050 <_vfiprintf_r+0x208>
 8005086:	bf00      	nop
 8005088:	08005ca4 	.word	0x08005ca4
 800508c:	08005cc4 	.word	0x08005cc4
 8005090:	08005c84 	.word	0x08005c84
 8005094:	08005ce4 	.word	0x08005ce4
 8005098:	08005cea 	.word	0x08005cea
 800509c:	08005cee 	.word	0x08005cee
 80050a0:	00000000 	.word	0x00000000
 80050a4:	08004e23 	.word	0x08004e23

080050a8 <_printf_common>:
 80050a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ac:	4616      	mov	r6, r2
 80050ae:	4699      	mov	r9, r3
 80050b0:	688a      	ldr	r2, [r1, #8]
 80050b2:	690b      	ldr	r3, [r1, #16]
 80050b4:	4607      	mov	r7, r0
 80050b6:	4293      	cmp	r3, r2
 80050b8:	bfb8      	it	lt
 80050ba:	4613      	movlt	r3, r2
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c2:	460c      	mov	r4, r1
 80050c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050c8:	b10a      	cbz	r2, 80050ce <_printf_common+0x26>
 80050ca:	3301      	adds	r3, #1
 80050cc:	6033      	str	r3, [r6, #0]
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	0699      	lsls	r1, r3, #26
 80050d2:	bf42      	ittt	mi
 80050d4:	6833      	ldrmi	r3, [r6, #0]
 80050d6:	3302      	addmi	r3, #2
 80050d8:	6033      	strmi	r3, [r6, #0]
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	f015 0506 	ands.w	r5, r5, #6
 80050e0:	d106      	bne.n	80050f0 <_printf_common+0x48>
 80050e2:	f104 0a19 	add.w	sl, r4, #25
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	6832      	ldr	r2, [r6, #0]
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	42ab      	cmp	r3, r5
 80050ee:	dc28      	bgt.n	8005142 <_printf_common+0x9a>
 80050f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f4:	1e13      	subs	r3, r2, #0
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	bf18      	it	ne
 80050fa:	2301      	movne	r3, #1
 80050fc:	0692      	lsls	r2, r2, #26
 80050fe:	d42d      	bmi.n	800515c <_printf_common+0xb4>
 8005100:	4649      	mov	r1, r9
 8005102:	4638      	mov	r0, r7
 8005104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005108:	47c0      	blx	r8
 800510a:	3001      	adds	r0, #1
 800510c:	d020      	beq.n	8005150 <_printf_common+0xa8>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	68e5      	ldr	r5, [r4, #12]
 8005112:	f003 0306 	and.w	r3, r3, #6
 8005116:	2b04      	cmp	r3, #4
 8005118:	bf18      	it	ne
 800511a:	2500      	movne	r5, #0
 800511c:	6832      	ldr	r2, [r6, #0]
 800511e:	f04f 0600 	mov.w	r6, #0
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	bf08      	it	eq
 8005126:	1aad      	subeq	r5, r5, r2
 8005128:	6922      	ldr	r2, [r4, #16]
 800512a:	bf08      	it	eq
 800512c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005130:	4293      	cmp	r3, r2
 8005132:	bfc4      	itt	gt
 8005134:	1a9b      	subgt	r3, r3, r2
 8005136:	18ed      	addgt	r5, r5, r3
 8005138:	341a      	adds	r4, #26
 800513a:	42b5      	cmp	r5, r6
 800513c:	d11a      	bne.n	8005174 <_printf_common+0xcc>
 800513e:	2000      	movs	r0, #0
 8005140:	e008      	b.n	8005154 <_printf_common+0xac>
 8005142:	2301      	movs	r3, #1
 8005144:	4652      	mov	r2, sl
 8005146:	4649      	mov	r1, r9
 8005148:	4638      	mov	r0, r7
 800514a:	47c0      	blx	r8
 800514c:	3001      	adds	r0, #1
 800514e:	d103      	bne.n	8005158 <_printf_common+0xb0>
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005158:	3501      	adds	r5, #1
 800515a:	e7c4      	b.n	80050e6 <_printf_common+0x3e>
 800515c:	2030      	movs	r0, #48	; 0x30
 800515e:	18e1      	adds	r1, r4, r3
 8005160:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800516a:	4422      	add	r2, r4
 800516c:	3302      	adds	r3, #2
 800516e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005172:	e7c5      	b.n	8005100 <_printf_common+0x58>
 8005174:	2301      	movs	r3, #1
 8005176:	4622      	mov	r2, r4
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d0e6      	beq.n	8005150 <_printf_common+0xa8>
 8005182:	3601      	adds	r6, #1
 8005184:	e7d9      	b.n	800513a <_printf_common+0x92>
	...

08005188 <_printf_i>:
 8005188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	7e0f      	ldrb	r7, [r1, #24]
 800518e:	4691      	mov	r9, r2
 8005190:	2f78      	cmp	r7, #120	; 0x78
 8005192:	4680      	mov	r8, r0
 8005194:	460c      	mov	r4, r1
 8005196:	469a      	mov	sl, r3
 8005198:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800519a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800519e:	d807      	bhi.n	80051b0 <_printf_i+0x28>
 80051a0:	2f62      	cmp	r7, #98	; 0x62
 80051a2:	d80a      	bhi.n	80051ba <_printf_i+0x32>
 80051a4:	2f00      	cmp	r7, #0
 80051a6:	f000 80d9 	beq.w	800535c <_printf_i+0x1d4>
 80051aa:	2f58      	cmp	r7, #88	; 0x58
 80051ac:	f000 80a4 	beq.w	80052f8 <_printf_i+0x170>
 80051b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b8:	e03a      	b.n	8005230 <_printf_i+0xa8>
 80051ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051be:	2b15      	cmp	r3, #21
 80051c0:	d8f6      	bhi.n	80051b0 <_printf_i+0x28>
 80051c2:	a101      	add	r1, pc, #4	; (adr r1, 80051c8 <_printf_i+0x40>)
 80051c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005235 	.word	0x08005235
 80051d0:	080051b1 	.word	0x080051b1
 80051d4:	080051b1 	.word	0x080051b1
 80051d8:	080051b1 	.word	0x080051b1
 80051dc:	080051b1 	.word	0x080051b1
 80051e0:	08005235 	.word	0x08005235
 80051e4:	080051b1 	.word	0x080051b1
 80051e8:	080051b1 	.word	0x080051b1
 80051ec:	080051b1 	.word	0x080051b1
 80051f0:	080051b1 	.word	0x080051b1
 80051f4:	08005343 	.word	0x08005343
 80051f8:	08005265 	.word	0x08005265
 80051fc:	08005325 	.word	0x08005325
 8005200:	080051b1 	.word	0x080051b1
 8005204:	080051b1 	.word	0x080051b1
 8005208:	08005365 	.word	0x08005365
 800520c:	080051b1 	.word	0x080051b1
 8005210:	08005265 	.word	0x08005265
 8005214:	080051b1 	.word	0x080051b1
 8005218:	080051b1 	.word	0x080051b1
 800521c:	0800532d 	.word	0x0800532d
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	602a      	str	r2, [r5, #0]
 8005228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800522c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005230:	2301      	movs	r3, #1
 8005232:	e0a4      	b.n	800537e <_printf_i+0x1f6>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	6829      	ldr	r1, [r5, #0]
 8005238:	0606      	lsls	r6, r0, #24
 800523a:	f101 0304 	add.w	r3, r1, #4
 800523e:	d50a      	bpl.n	8005256 <_printf_i+0xce>
 8005240:	680e      	ldr	r6, [r1, #0]
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	2e00      	cmp	r6, #0
 8005246:	da03      	bge.n	8005250 <_printf_i+0xc8>
 8005248:	232d      	movs	r3, #45	; 0x2d
 800524a:	4276      	negs	r6, r6
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005250:	230a      	movs	r3, #10
 8005252:	485e      	ldr	r0, [pc, #376]	; (80053cc <_printf_i+0x244>)
 8005254:	e019      	b.n	800528a <_printf_i+0x102>
 8005256:	680e      	ldr	r6, [r1, #0]
 8005258:	f010 0f40 	tst.w	r0, #64	; 0x40
 800525c:	602b      	str	r3, [r5, #0]
 800525e:	bf18      	it	ne
 8005260:	b236      	sxthne	r6, r6
 8005262:	e7ef      	b.n	8005244 <_printf_i+0xbc>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	6820      	ldr	r0, [r4, #0]
 8005268:	1d19      	adds	r1, r3, #4
 800526a:	6029      	str	r1, [r5, #0]
 800526c:	0601      	lsls	r1, r0, #24
 800526e:	d501      	bpl.n	8005274 <_printf_i+0xec>
 8005270:	681e      	ldr	r6, [r3, #0]
 8005272:	e002      	b.n	800527a <_printf_i+0xf2>
 8005274:	0646      	lsls	r6, r0, #25
 8005276:	d5fb      	bpl.n	8005270 <_printf_i+0xe8>
 8005278:	881e      	ldrh	r6, [r3, #0]
 800527a:	2f6f      	cmp	r7, #111	; 0x6f
 800527c:	bf0c      	ite	eq
 800527e:	2308      	moveq	r3, #8
 8005280:	230a      	movne	r3, #10
 8005282:	4852      	ldr	r0, [pc, #328]	; (80053cc <_printf_i+0x244>)
 8005284:	2100      	movs	r1, #0
 8005286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800528a:	6865      	ldr	r5, [r4, #4]
 800528c:	2d00      	cmp	r5, #0
 800528e:	bfa8      	it	ge
 8005290:	6821      	ldrge	r1, [r4, #0]
 8005292:	60a5      	str	r5, [r4, #8]
 8005294:	bfa4      	itt	ge
 8005296:	f021 0104 	bicge.w	r1, r1, #4
 800529a:	6021      	strge	r1, [r4, #0]
 800529c:	b90e      	cbnz	r6, 80052a2 <_printf_i+0x11a>
 800529e:	2d00      	cmp	r5, #0
 80052a0:	d04d      	beq.n	800533e <_printf_i+0x1b6>
 80052a2:	4615      	mov	r5, r2
 80052a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80052a8:	fb03 6711 	mls	r7, r3, r1, r6
 80052ac:	5dc7      	ldrb	r7, [r0, r7]
 80052ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052b2:	4637      	mov	r7, r6
 80052b4:	42bb      	cmp	r3, r7
 80052b6:	460e      	mov	r6, r1
 80052b8:	d9f4      	bls.n	80052a4 <_printf_i+0x11c>
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d10b      	bne.n	80052d6 <_printf_i+0x14e>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	07de      	lsls	r6, r3, #31
 80052c2:	d508      	bpl.n	80052d6 <_printf_i+0x14e>
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	6861      	ldr	r1, [r4, #4]
 80052c8:	4299      	cmp	r1, r3
 80052ca:	bfde      	ittt	le
 80052cc:	2330      	movle	r3, #48	; 0x30
 80052ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052d6:	1b52      	subs	r2, r2, r5
 80052d8:	6122      	str	r2, [r4, #16]
 80052da:	464b      	mov	r3, r9
 80052dc:	4621      	mov	r1, r4
 80052de:	4640      	mov	r0, r8
 80052e0:	f8cd a000 	str.w	sl, [sp]
 80052e4:	aa03      	add	r2, sp, #12
 80052e6:	f7ff fedf 	bl	80050a8 <_printf_common>
 80052ea:	3001      	adds	r0, #1
 80052ec:	d14c      	bne.n	8005388 <_printf_i+0x200>
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	b004      	add	sp, #16
 80052f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f8:	4834      	ldr	r0, [pc, #208]	; (80053cc <_printf_i+0x244>)
 80052fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052fe:	6829      	ldr	r1, [r5, #0]
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	f851 6b04 	ldr.w	r6, [r1], #4
 8005306:	6029      	str	r1, [r5, #0]
 8005308:	061d      	lsls	r5, r3, #24
 800530a:	d514      	bpl.n	8005336 <_printf_i+0x1ae>
 800530c:	07df      	lsls	r7, r3, #31
 800530e:	bf44      	itt	mi
 8005310:	f043 0320 	orrmi.w	r3, r3, #32
 8005314:	6023      	strmi	r3, [r4, #0]
 8005316:	b91e      	cbnz	r6, 8005320 <_printf_i+0x198>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f023 0320 	bic.w	r3, r3, #32
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	2310      	movs	r3, #16
 8005322:	e7af      	b.n	8005284 <_printf_i+0xfc>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	f043 0320 	orr.w	r3, r3, #32
 800532a:	6023      	str	r3, [r4, #0]
 800532c:	2378      	movs	r3, #120	; 0x78
 800532e:	4828      	ldr	r0, [pc, #160]	; (80053d0 <_printf_i+0x248>)
 8005330:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005334:	e7e3      	b.n	80052fe <_printf_i+0x176>
 8005336:	0659      	lsls	r1, r3, #25
 8005338:	bf48      	it	mi
 800533a:	b2b6      	uxthmi	r6, r6
 800533c:	e7e6      	b.n	800530c <_printf_i+0x184>
 800533e:	4615      	mov	r5, r2
 8005340:	e7bb      	b.n	80052ba <_printf_i+0x132>
 8005342:	682b      	ldr	r3, [r5, #0]
 8005344:	6826      	ldr	r6, [r4, #0]
 8005346:	1d18      	adds	r0, r3, #4
 8005348:	6961      	ldr	r1, [r4, #20]
 800534a:	6028      	str	r0, [r5, #0]
 800534c:	0635      	lsls	r5, r6, #24
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	d501      	bpl.n	8005356 <_printf_i+0x1ce>
 8005352:	6019      	str	r1, [r3, #0]
 8005354:	e002      	b.n	800535c <_printf_i+0x1d4>
 8005356:	0670      	lsls	r0, r6, #25
 8005358:	d5fb      	bpl.n	8005352 <_printf_i+0x1ca>
 800535a:	8019      	strh	r1, [r3, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	4615      	mov	r5, r2
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	e7ba      	b.n	80052da <_printf_i+0x152>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	2100      	movs	r1, #0
 8005368:	1d1a      	adds	r2, r3, #4
 800536a:	602a      	str	r2, [r5, #0]
 800536c:	681d      	ldr	r5, [r3, #0]
 800536e:	6862      	ldr	r2, [r4, #4]
 8005370:	4628      	mov	r0, r5
 8005372:	f000 fa8b 	bl	800588c <memchr>
 8005376:	b108      	cbz	r0, 800537c <_printf_i+0x1f4>
 8005378:	1b40      	subs	r0, r0, r5
 800537a:	6060      	str	r0, [r4, #4]
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	2300      	movs	r3, #0
 8005382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005386:	e7a8      	b.n	80052da <_printf_i+0x152>
 8005388:	462a      	mov	r2, r5
 800538a:	4649      	mov	r1, r9
 800538c:	4640      	mov	r0, r8
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	47d0      	blx	sl
 8005392:	3001      	adds	r0, #1
 8005394:	d0ab      	beq.n	80052ee <_printf_i+0x166>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	079b      	lsls	r3, r3, #30
 800539a:	d413      	bmi.n	80053c4 <_printf_i+0x23c>
 800539c:	68e0      	ldr	r0, [r4, #12]
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	4298      	cmp	r0, r3
 80053a2:	bfb8      	it	lt
 80053a4:	4618      	movlt	r0, r3
 80053a6:	e7a4      	b.n	80052f2 <_printf_i+0x16a>
 80053a8:	2301      	movs	r3, #1
 80053aa:	4632      	mov	r2, r6
 80053ac:	4649      	mov	r1, r9
 80053ae:	4640      	mov	r0, r8
 80053b0:	47d0      	blx	sl
 80053b2:	3001      	adds	r0, #1
 80053b4:	d09b      	beq.n	80052ee <_printf_i+0x166>
 80053b6:	3501      	adds	r5, #1
 80053b8:	68e3      	ldr	r3, [r4, #12]
 80053ba:	9903      	ldr	r1, [sp, #12]
 80053bc:	1a5b      	subs	r3, r3, r1
 80053be:	42ab      	cmp	r3, r5
 80053c0:	dcf2      	bgt.n	80053a8 <_printf_i+0x220>
 80053c2:	e7eb      	b.n	800539c <_printf_i+0x214>
 80053c4:	2500      	movs	r5, #0
 80053c6:	f104 0619 	add.w	r6, r4, #25
 80053ca:	e7f5      	b.n	80053b8 <_printf_i+0x230>
 80053cc:	08005cf5 	.word	0x08005cf5
 80053d0:	08005d06 	.word	0x08005d06

080053d4 <__sread>:
 80053d4:	b510      	push	{r4, lr}
 80053d6:	460c      	mov	r4, r1
 80053d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053dc:	f000 fa64 	bl	80058a8 <_read_r>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	bfab      	itete	ge
 80053e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053e6:	89a3      	ldrhlt	r3, [r4, #12]
 80053e8:	181b      	addge	r3, r3, r0
 80053ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053ee:	bfac      	ite	ge
 80053f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80053f2:	81a3      	strhlt	r3, [r4, #12]
 80053f4:	bd10      	pop	{r4, pc}

080053f6 <__swrite>:
 80053f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fa:	461f      	mov	r7, r3
 80053fc:	898b      	ldrh	r3, [r1, #12]
 80053fe:	4605      	mov	r5, r0
 8005400:	05db      	lsls	r3, r3, #23
 8005402:	460c      	mov	r4, r1
 8005404:	4616      	mov	r6, r2
 8005406:	d505      	bpl.n	8005414 <__swrite+0x1e>
 8005408:	2302      	movs	r3, #2
 800540a:	2200      	movs	r2, #0
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	f000 f9c4 	bl	800579c <_lseek_r>
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	4632      	mov	r2, r6
 8005418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	4628      	mov	r0, r5
 8005420:	463b      	mov	r3, r7
 8005422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542a:	f000 b869 	b.w	8005500 <_write_r>

0800542e <__sseek>:
 800542e:	b510      	push	{r4, lr}
 8005430:	460c      	mov	r4, r1
 8005432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005436:	f000 f9b1 	bl	800579c <_lseek_r>
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	bf15      	itete	ne
 8005440:	6560      	strne	r0, [r4, #84]	; 0x54
 8005442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800544a:	81a3      	strheq	r3, [r4, #12]
 800544c:	bf18      	it	ne
 800544e:	81a3      	strhne	r3, [r4, #12]
 8005450:	bd10      	pop	{r4, pc}

08005452 <__sclose>:
 8005452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005456:	f000 b8d3 	b.w	8005600 <_close_r>
	...

0800545c <__swbuf_r>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	460e      	mov	r6, r1
 8005460:	4614      	mov	r4, r2
 8005462:	4605      	mov	r5, r0
 8005464:	b118      	cbz	r0, 800546e <__swbuf_r+0x12>
 8005466:	6983      	ldr	r3, [r0, #24]
 8005468:	b90b      	cbnz	r3, 800546e <__swbuf_r+0x12>
 800546a:	f7ff fc19 	bl	8004ca0 <__sinit>
 800546e:	4b21      	ldr	r3, [pc, #132]	; (80054f4 <__swbuf_r+0x98>)
 8005470:	429c      	cmp	r4, r3
 8005472:	d12b      	bne.n	80054cc <__swbuf_r+0x70>
 8005474:	686c      	ldr	r4, [r5, #4]
 8005476:	69a3      	ldr	r3, [r4, #24]
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	071a      	lsls	r2, r3, #28
 800547e:	d52f      	bpl.n	80054e0 <__swbuf_r+0x84>
 8005480:	6923      	ldr	r3, [r4, #16]
 8005482:	b36b      	cbz	r3, 80054e0 <__swbuf_r+0x84>
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	b2f6      	uxtb	r6, r6
 800548a:	1ac0      	subs	r0, r0, r3
 800548c:	6963      	ldr	r3, [r4, #20]
 800548e:	4637      	mov	r7, r6
 8005490:	4283      	cmp	r3, r0
 8005492:	dc04      	bgt.n	800549e <__swbuf_r+0x42>
 8005494:	4621      	mov	r1, r4
 8005496:	4628      	mov	r0, r5
 8005498:	f000 f944 	bl	8005724 <_fflush_r>
 800549c:	bb30      	cbnz	r0, 80054ec <__swbuf_r+0x90>
 800549e:	68a3      	ldr	r3, [r4, #8]
 80054a0:	3001      	adds	r0, #1
 80054a2:	3b01      	subs	r3, #1
 80054a4:	60a3      	str	r3, [r4, #8]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	6022      	str	r2, [r4, #0]
 80054ac:	701e      	strb	r6, [r3, #0]
 80054ae:	6963      	ldr	r3, [r4, #20]
 80054b0:	4283      	cmp	r3, r0
 80054b2:	d004      	beq.n	80054be <__swbuf_r+0x62>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	07db      	lsls	r3, r3, #31
 80054b8:	d506      	bpl.n	80054c8 <__swbuf_r+0x6c>
 80054ba:	2e0a      	cmp	r6, #10
 80054bc:	d104      	bne.n	80054c8 <__swbuf_r+0x6c>
 80054be:	4621      	mov	r1, r4
 80054c0:	4628      	mov	r0, r5
 80054c2:	f000 f92f 	bl	8005724 <_fflush_r>
 80054c6:	b988      	cbnz	r0, 80054ec <__swbuf_r+0x90>
 80054c8:	4638      	mov	r0, r7
 80054ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <__swbuf_r+0x9c>)
 80054ce:	429c      	cmp	r4, r3
 80054d0:	d101      	bne.n	80054d6 <__swbuf_r+0x7a>
 80054d2:	68ac      	ldr	r4, [r5, #8]
 80054d4:	e7cf      	b.n	8005476 <__swbuf_r+0x1a>
 80054d6:	4b09      	ldr	r3, [pc, #36]	; (80054fc <__swbuf_r+0xa0>)
 80054d8:	429c      	cmp	r4, r3
 80054da:	bf08      	it	eq
 80054dc:	68ec      	ldreq	r4, [r5, #12]
 80054de:	e7ca      	b.n	8005476 <__swbuf_r+0x1a>
 80054e0:	4621      	mov	r1, r4
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 f81e 	bl	8005524 <__swsetup_r>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d0cb      	beq.n	8005484 <__swbuf_r+0x28>
 80054ec:	f04f 37ff 	mov.w	r7, #4294967295
 80054f0:	e7ea      	b.n	80054c8 <__swbuf_r+0x6c>
 80054f2:	bf00      	nop
 80054f4:	08005ca4 	.word	0x08005ca4
 80054f8:	08005cc4 	.word	0x08005cc4
 80054fc:	08005c84 	.word	0x08005c84

08005500 <_write_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	2200      	movs	r2, #0
 800550a:	4d05      	ldr	r5, [pc, #20]	; (8005520 <_write_r+0x20>)
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fb fdc9 	bl	80010a6 <_write>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_write_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_write_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000654 	.word	0x20000654

08005524 <__swsetup_r>:
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <__swsetup_r+0xcc>)
 8005526:	b570      	push	{r4, r5, r6, lr}
 8005528:	681d      	ldr	r5, [r3, #0]
 800552a:	4606      	mov	r6, r0
 800552c:	460c      	mov	r4, r1
 800552e:	b125      	cbz	r5, 800553a <__swsetup_r+0x16>
 8005530:	69ab      	ldr	r3, [r5, #24]
 8005532:	b913      	cbnz	r3, 800553a <__swsetup_r+0x16>
 8005534:	4628      	mov	r0, r5
 8005536:	f7ff fbb3 	bl	8004ca0 <__sinit>
 800553a:	4b2e      	ldr	r3, [pc, #184]	; (80055f4 <__swsetup_r+0xd0>)
 800553c:	429c      	cmp	r4, r3
 800553e:	d10f      	bne.n	8005560 <__swsetup_r+0x3c>
 8005540:	686c      	ldr	r4, [r5, #4]
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005548:	0719      	lsls	r1, r3, #28
 800554a:	d42c      	bmi.n	80055a6 <__swsetup_r+0x82>
 800554c:	06dd      	lsls	r5, r3, #27
 800554e:	d411      	bmi.n	8005574 <__swsetup_r+0x50>
 8005550:	2309      	movs	r3, #9
 8005552:	6033      	str	r3, [r6, #0]
 8005554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	e03e      	b.n	80055de <__swsetup_r+0xba>
 8005560:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <__swsetup_r+0xd4>)
 8005562:	429c      	cmp	r4, r3
 8005564:	d101      	bne.n	800556a <__swsetup_r+0x46>
 8005566:	68ac      	ldr	r4, [r5, #8]
 8005568:	e7eb      	b.n	8005542 <__swsetup_r+0x1e>
 800556a:	4b24      	ldr	r3, [pc, #144]	; (80055fc <__swsetup_r+0xd8>)
 800556c:	429c      	cmp	r4, r3
 800556e:	bf08      	it	eq
 8005570:	68ec      	ldreq	r4, [r5, #12]
 8005572:	e7e6      	b.n	8005542 <__swsetup_r+0x1e>
 8005574:	0758      	lsls	r0, r3, #29
 8005576:	d512      	bpl.n	800559e <__swsetup_r+0x7a>
 8005578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800557a:	b141      	cbz	r1, 800558e <__swsetup_r+0x6a>
 800557c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005580:	4299      	cmp	r1, r3
 8005582:	d002      	beq.n	800558a <__swsetup_r+0x66>
 8005584:	4630      	mov	r0, r6
 8005586:	f7ff f995 	bl	80048b4 <_free_r>
 800558a:	2300      	movs	r3, #0
 800558c:	6363      	str	r3, [r4, #52]	; 0x34
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	2300      	movs	r3, #0
 8005598:	6063      	str	r3, [r4, #4]
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	f043 0308 	orr.w	r3, r3, #8
 80055a4:	81a3      	strh	r3, [r4, #12]
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	b94b      	cbnz	r3, 80055be <__swsetup_r+0x9a>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b4:	d003      	beq.n	80055be <__swsetup_r+0x9a>
 80055b6:	4621      	mov	r1, r4
 80055b8:	4630      	mov	r0, r6
 80055ba:	f000 f927 	bl	800580c <__smakebuf_r>
 80055be:	89a0      	ldrh	r0, [r4, #12]
 80055c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055c4:	f010 0301 	ands.w	r3, r0, #1
 80055c8:	d00a      	beq.n	80055e0 <__swsetup_r+0xbc>
 80055ca:	2300      	movs	r3, #0
 80055cc:	60a3      	str	r3, [r4, #8]
 80055ce:	6963      	ldr	r3, [r4, #20]
 80055d0:	425b      	negs	r3, r3
 80055d2:	61a3      	str	r3, [r4, #24]
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	b943      	cbnz	r3, 80055ea <__swsetup_r+0xc6>
 80055d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055dc:	d1ba      	bne.n	8005554 <__swsetup_r+0x30>
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	0781      	lsls	r1, r0, #30
 80055e2:	bf58      	it	pl
 80055e4:	6963      	ldrpl	r3, [r4, #20]
 80055e6:	60a3      	str	r3, [r4, #8]
 80055e8:	e7f4      	b.n	80055d4 <__swsetup_r+0xb0>
 80055ea:	2000      	movs	r0, #0
 80055ec:	e7f7      	b.n	80055de <__swsetup_r+0xba>
 80055ee:	bf00      	nop
 80055f0:	2000000c 	.word	0x2000000c
 80055f4:	08005ca4 	.word	0x08005ca4
 80055f8:	08005cc4 	.word	0x08005cc4
 80055fc:	08005c84 	.word	0x08005c84

08005600 <_close_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	2300      	movs	r3, #0
 8005604:	4d05      	ldr	r5, [pc, #20]	; (800561c <_close_r+0x1c>)
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	f7fb fd67 	bl	80010de <_close>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_close_r+0x1a>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_close_r+0x1a>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	20000654 	.word	0x20000654

08005620 <__sflush_r>:
 8005620:	898a      	ldrh	r2, [r1, #12]
 8005622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005624:	4605      	mov	r5, r0
 8005626:	0710      	lsls	r0, r2, #28
 8005628:	460c      	mov	r4, r1
 800562a:	d457      	bmi.n	80056dc <__sflush_r+0xbc>
 800562c:	684b      	ldr	r3, [r1, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	dc04      	bgt.n	800563c <__sflush_r+0x1c>
 8005632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc01      	bgt.n	800563c <__sflush_r+0x1c>
 8005638:	2000      	movs	r0, #0
 800563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800563c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563e:	2e00      	cmp	r6, #0
 8005640:	d0fa      	beq.n	8005638 <__sflush_r+0x18>
 8005642:	2300      	movs	r3, #0
 8005644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005648:	682f      	ldr	r7, [r5, #0]
 800564a:	602b      	str	r3, [r5, #0]
 800564c:	d032      	beq.n	80056b4 <__sflush_r+0x94>
 800564e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	075a      	lsls	r2, r3, #29
 8005654:	d505      	bpl.n	8005662 <__sflush_r+0x42>
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	1ac0      	subs	r0, r0, r3
 800565a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800565c:	b10b      	cbz	r3, 8005662 <__sflush_r+0x42>
 800565e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005660:	1ac0      	subs	r0, r0, r3
 8005662:	2300      	movs	r3, #0
 8005664:	4602      	mov	r2, r0
 8005666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005668:	4628      	mov	r0, r5
 800566a:	6a21      	ldr	r1, [r4, #32]
 800566c:	47b0      	blx	r6
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	d106      	bne.n	8005682 <__sflush_r+0x62>
 8005674:	6829      	ldr	r1, [r5, #0]
 8005676:	291d      	cmp	r1, #29
 8005678:	d82c      	bhi.n	80056d4 <__sflush_r+0xb4>
 800567a:	4a29      	ldr	r2, [pc, #164]	; (8005720 <__sflush_r+0x100>)
 800567c:	40ca      	lsrs	r2, r1
 800567e:	07d6      	lsls	r6, r2, #31
 8005680:	d528      	bpl.n	80056d4 <__sflush_r+0xb4>
 8005682:	2200      	movs	r2, #0
 8005684:	6062      	str	r2, [r4, #4]
 8005686:	6922      	ldr	r2, [r4, #16]
 8005688:	04d9      	lsls	r1, r3, #19
 800568a:	6022      	str	r2, [r4, #0]
 800568c:	d504      	bpl.n	8005698 <__sflush_r+0x78>
 800568e:	1c42      	adds	r2, r0, #1
 8005690:	d101      	bne.n	8005696 <__sflush_r+0x76>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	b903      	cbnz	r3, 8005698 <__sflush_r+0x78>
 8005696:	6560      	str	r0, [r4, #84]	; 0x54
 8005698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569a:	602f      	str	r7, [r5, #0]
 800569c:	2900      	cmp	r1, #0
 800569e:	d0cb      	beq.n	8005638 <__sflush_r+0x18>
 80056a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a4:	4299      	cmp	r1, r3
 80056a6:	d002      	beq.n	80056ae <__sflush_r+0x8e>
 80056a8:	4628      	mov	r0, r5
 80056aa:	f7ff f903 	bl	80048b4 <_free_r>
 80056ae:	2000      	movs	r0, #0
 80056b0:	6360      	str	r0, [r4, #52]	; 0x34
 80056b2:	e7c2      	b.n	800563a <__sflush_r+0x1a>
 80056b4:	6a21      	ldr	r1, [r4, #32]
 80056b6:	2301      	movs	r3, #1
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b0      	blx	r6
 80056bc:	1c41      	adds	r1, r0, #1
 80056be:	d1c7      	bne.n	8005650 <__sflush_r+0x30>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0c4      	beq.n	8005650 <__sflush_r+0x30>
 80056c6:	2b1d      	cmp	r3, #29
 80056c8:	d001      	beq.n	80056ce <__sflush_r+0xae>
 80056ca:	2b16      	cmp	r3, #22
 80056cc:	d101      	bne.n	80056d2 <__sflush_r+0xb2>
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	e7b2      	b.n	8005638 <__sflush_r+0x18>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	e7ae      	b.n	800563a <__sflush_r+0x1a>
 80056dc:	690f      	ldr	r7, [r1, #16]
 80056de:	2f00      	cmp	r7, #0
 80056e0:	d0aa      	beq.n	8005638 <__sflush_r+0x18>
 80056e2:	0793      	lsls	r3, r2, #30
 80056e4:	bf18      	it	ne
 80056e6:	2300      	movne	r3, #0
 80056e8:	680e      	ldr	r6, [r1, #0]
 80056ea:	bf08      	it	eq
 80056ec:	694b      	ldreq	r3, [r1, #20]
 80056ee:	1bf6      	subs	r6, r6, r7
 80056f0:	600f      	str	r7, [r1, #0]
 80056f2:	608b      	str	r3, [r1, #8]
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	dd9f      	ble.n	8005638 <__sflush_r+0x18>
 80056f8:	4633      	mov	r3, r6
 80056fa:	463a      	mov	r2, r7
 80056fc:	4628      	mov	r0, r5
 80056fe:	6a21      	ldr	r1, [r4, #32]
 8005700:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005704:	47e0      	blx	ip
 8005706:	2800      	cmp	r0, #0
 8005708:	dc06      	bgt.n	8005718 <__sflush_r+0xf8>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	e790      	b.n	800563a <__sflush_r+0x1a>
 8005718:	4407      	add	r7, r0
 800571a:	1a36      	subs	r6, r6, r0
 800571c:	e7ea      	b.n	80056f4 <__sflush_r+0xd4>
 800571e:	bf00      	nop
 8005720:	20400001 	.word	0x20400001

08005724 <_fflush_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b913      	cbnz	r3, 8005734 <_fflush_r+0x10>
 800572e:	2500      	movs	r5, #0
 8005730:	4628      	mov	r0, r5
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	b118      	cbz	r0, 800573e <_fflush_r+0x1a>
 8005736:	6983      	ldr	r3, [r0, #24]
 8005738:	b90b      	cbnz	r3, 800573e <_fflush_r+0x1a>
 800573a:	f7ff fab1 	bl	8004ca0 <__sinit>
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <_fflush_r+0x6c>)
 8005740:	429c      	cmp	r4, r3
 8005742:	d11b      	bne.n	800577c <_fflush_r+0x58>
 8005744:	686c      	ldr	r4, [r5, #4]
 8005746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ef      	beq.n	800572e <_fflush_r+0xa>
 800574e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005750:	07d0      	lsls	r0, r2, #31
 8005752:	d404      	bmi.n	800575e <_fflush_r+0x3a>
 8005754:	0599      	lsls	r1, r3, #22
 8005756:	d402      	bmi.n	800575e <_fflush_r+0x3a>
 8005758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575a:	f7ff fb3f 	bl	8004ddc <__retarget_lock_acquire_recursive>
 800575e:	4628      	mov	r0, r5
 8005760:	4621      	mov	r1, r4
 8005762:	f7ff ff5d 	bl	8005620 <__sflush_r>
 8005766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005768:	4605      	mov	r5, r0
 800576a:	07da      	lsls	r2, r3, #31
 800576c:	d4e0      	bmi.n	8005730 <_fflush_r+0xc>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	059b      	lsls	r3, r3, #22
 8005772:	d4dd      	bmi.n	8005730 <_fflush_r+0xc>
 8005774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005776:	f7ff fb32 	bl	8004dde <__retarget_lock_release_recursive>
 800577a:	e7d9      	b.n	8005730 <_fflush_r+0xc>
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <_fflush_r+0x70>)
 800577e:	429c      	cmp	r4, r3
 8005780:	d101      	bne.n	8005786 <_fflush_r+0x62>
 8005782:	68ac      	ldr	r4, [r5, #8]
 8005784:	e7df      	b.n	8005746 <_fflush_r+0x22>
 8005786:	4b04      	ldr	r3, [pc, #16]	; (8005798 <_fflush_r+0x74>)
 8005788:	429c      	cmp	r4, r3
 800578a:	bf08      	it	eq
 800578c:	68ec      	ldreq	r4, [r5, #12]
 800578e:	e7da      	b.n	8005746 <_fflush_r+0x22>
 8005790:	08005ca4 	.word	0x08005ca4
 8005794:	08005cc4 	.word	0x08005cc4
 8005798:	08005c84 	.word	0x08005c84

0800579c <_lseek_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	4611      	mov	r1, r2
 80057a4:	2200      	movs	r2, #0
 80057a6:	4d05      	ldr	r5, [pc, #20]	; (80057bc <_lseek_r+0x20>)
 80057a8:	602a      	str	r2, [r5, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f7fb fcbb 	bl	8001126 <_lseek>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_lseek_r+0x1e>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_lseek_r+0x1e>
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	20000654 	.word	0x20000654

080057c0 <__swhatbuf_r>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	460e      	mov	r6, r1
 80057c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c8:	4614      	mov	r4, r2
 80057ca:	2900      	cmp	r1, #0
 80057cc:	461d      	mov	r5, r3
 80057ce:	b096      	sub	sp, #88	; 0x58
 80057d0:	da08      	bge.n	80057e4 <__swhatbuf_r+0x24>
 80057d2:	2200      	movs	r2, #0
 80057d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80057d8:	602a      	str	r2, [r5, #0]
 80057da:	061a      	lsls	r2, r3, #24
 80057dc:	d410      	bmi.n	8005800 <__swhatbuf_r+0x40>
 80057de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e2:	e00e      	b.n	8005802 <__swhatbuf_r+0x42>
 80057e4:	466a      	mov	r2, sp
 80057e6:	f000 f871 	bl	80058cc <_fstat_r>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	dbf1      	blt.n	80057d2 <__swhatbuf_r+0x12>
 80057ee:	9a01      	ldr	r2, [sp, #4]
 80057f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057f8:	425a      	negs	r2, r3
 80057fa:	415a      	adcs	r2, r3
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	e7ee      	b.n	80057de <__swhatbuf_r+0x1e>
 8005800:	2340      	movs	r3, #64	; 0x40
 8005802:	2000      	movs	r0, #0
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	b016      	add	sp, #88	; 0x58
 8005808:	bd70      	pop	{r4, r5, r6, pc}
	...

0800580c <__smakebuf_r>:
 800580c:	898b      	ldrh	r3, [r1, #12]
 800580e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005810:	079d      	lsls	r5, r3, #30
 8005812:	4606      	mov	r6, r0
 8005814:	460c      	mov	r4, r1
 8005816:	d507      	bpl.n	8005828 <__smakebuf_r+0x1c>
 8005818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	6123      	str	r3, [r4, #16]
 8005820:	2301      	movs	r3, #1
 8005822:	6163      	str	r3, [r4, #20]
 8005824:	b002      	add	sp, #8
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	466a      	mov	r2, sp
 800582a:	ab01      	add	r3, sp, #4
 800582c:	f7ff ffc8 	bl	80057c0 <__swhatbuf_r>
 8005830:	9900      	ldr	r1, [sp, #0]
 8005832:	4605      	mov	r5, r0
 8005834:	4630      	mov	r0, r6
 8005836:	f7ff f8a5 	bl	8004984 <_malloc_r>
 800583a:	b948      	cbnz	r0, 8005850 <__smakebuf_r+0x44>
 800583c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005840:	059a      	lsls	r2, r3, #22
 8005842:	d4ef      	bmi.n	8005824 <__smakebuf_r+0x18>
 8005844:	f023 0303 	bic.w	r3, r3, #3
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	e7e3      	b.n	8005818 <__smakebuf_r+0xc>
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <__smakebuf_r+0x7c>)
 8005852:	62b3      	str	r3, [r6, #40]	; 0x28
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	6020      	str	r0, [r4, #0]
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	9b00      	ldr	r3, [sp, #0]
 8005860:	6120      	str	r0, [r4, #16]
 8005862:	6163      	str	r3, [r4, #20]
 8005864:	9b01      	ldr	r3, [sp, #4]
 8005866:	b15b      	cbz	r3, 8005880 <__smakebuf_r+0x74>
 8005868:	4630      	mov	r0, r6
 800586a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800586e:	f000 f83f 	bl	80058f0 <_isatty_r>
 8005872:	b128      	cbz	r0, 8005880 <__smakebuf_r+0x74>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	89a0      	ldrh	r0, [r4, #12]
 8005882:	4305      	orrs	r5, r0
 8005884:	81a5      	strh	r5, [r4, #12]
 8005886:	e7cd      	b.n	8005824 <__smakebuf_r+0x18>
 8005888:	08004c39 	.word	0x08004c39

0800588c <memchr>:
 800588c:	4603      	mov	r3, r0
 800588e:	b510      	push	{r4, lr}
 8005890:	b2c9      	uxtb	r1, r1
 8005892:	4402      	add	r2, r0
 8005894:	4293      	cmp	r3, r2
 8005896:	4618      	mov	r0, r3
 8005898:	d101      	bne.n	800589e <memchr+0x12>
 800589a:	2000      	movs	r0, #0
 800589c:	e003      	b.n	80058a6 <memchr+0x1a>
 800589e:	7804      	ldrb	r4, [r0, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	428c      	cmp	r4, r1
 80058a4:	d1f6      	bne.n	8005894 <memchr+0x8>
 80058a6:	bd10      	pop	{r4, pc}

080058a8 <_read_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	2200      	movs	r2, #0
 80058b2:	4d05      	ldr	r5, [pc, #20]	; (80058c8 <_read_r+0x20>)
 80058b4:	602a      	str	r2, [r5, #0]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f7fb fbd8 	bl	800106c <_read>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_read_r+0x1e>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_read_r+0x1e>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	20000654 	.word	0x20000654

080058cc <_fstat_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	2300      	movs	r3, #0
 80058d0:	4d06      	ldr	r5, [pc, #24]	; (80058ec <_fstat_r+0x20>)
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	f7fb fc0b 	bl	80010f4 <_fstat>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	d102      	bne.n	80058e8 <_fstat_r+0x1c>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	b103      	cbz	r3, 80058e8 <_fstat_r+0x1c>
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	bd38      	pop	{r3, r4, r5, pc}
 80058ea:	bf00      	nop
 80058ec:	20000654 	.word	0x20000654

080058f0 <_isatty_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	2300      	movs	r3, #0
 80058f4:	4d05      	ldr	r5, [pc, #20]	; (800590c <_isatty_r+0x1c>)
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f7fb fc09 	bl	8001112 <_isatty>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_isatty_r+0x1a>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_isatty_r+0x1a>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20000654 	.word	0x20000654

08005910 <_init>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr

0800591c <_fini>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr
