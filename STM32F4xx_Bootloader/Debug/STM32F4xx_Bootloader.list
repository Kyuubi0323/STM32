
STM32F4xx_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003308  08003308  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003310  08003310  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003314  08003314  00013314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000074  0800338c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800338c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008537  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001762  00000000  00000000  000285db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00029d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016423  00000000  00000000  0002aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009daf  00000000  00000000  00040edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861ef  00000000  00000000  0004ac8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0e79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000230c  00000000  00000000  000d0ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003204 	.word	0x08003204

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003204 	.word	0x08003204

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a1f      	ldr	r2, [pc, #124]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a18      	ldr	r2, [pc, #96]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_GPIO_Init+0x9c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0xa0>)
 80005f6:	f000 fd81 	bl	80010fc <HAL_GPIO_WritePin>
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	2301      	movs	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0xa0>)
 8000614:	f000 fbee 	bl	8000df4 <HAL_GPIO_Init>
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020800 	.word	0x40020800

08000628 <main>:
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	f000 fa65 	bl	8000afc <HAL_Init>
 8000632:	f000 f829 	bl	8000688 <SystemClock_Config>
 8000636:	f7ff ffa5 	bl	8000584 <MX_GPIO_Init>
 800063a:	f000 f9c3 	bl	80009c4 <MX_USART1_UART_Init>
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <main+0x54>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4619      	mov	r1, r3
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <main+0x54>)
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	461a      	mov	r2, r3
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <main+0x58>)
 800064c:	f001 fdd6 	bl	80021fc <iprintf>
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	e00b      	b.n	800066e <main+0x46>
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0x5c>)
 800065c:	f000 fd67 	bl	800112e <HAL_GPIO_TogglePin>
 8000660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000664:	f000 fabc 	bl	8000be0 <HAL_Delay>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b03      	cmp	r3, #3
 8000672:	ddf0      	ble.n	8000656 <main+0x2e>
 8000674:	f000 f884 	bl	8000780 <goto_application>
 8000678:	e7fe      	b.n	8000678 <main+0x50>
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000
 8000680:	0800321c 	.word	0x0800321c
 8000684:	40020800 	.word	0x40020800

08000688 <SystemClock_Config>:
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fda8 	bl	80021ec <memset>
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d4:	4a20      	ldr	r2, [pc, #128]	; (8000758 <SystemClock_Config+0xd0>)
 80006d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
 8000700:	2354      	movs	r3, #84	; 0x54
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fd27 	bl	8001164 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x98>
 800071c:	f000 f844 	bl	80007a8 <Error_Handler>
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2102      	movs	r1, #2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 ff89 	bl	8001654 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xc4>
 8000748:	f000 f82e 	bl	80007a8 <Error_Handler>
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	; 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <__io_putchar>:
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	1d39      	adds	r1, r7, #4
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2201      	movs	r2, #1
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <__io_putchar+0x20>)
 800076e:	f001 f99e 	bl	8001aae <HAL_UART_Transmit>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094

08000780 <goto_application>:
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4806      	ldr	r0, [pc, #24]	; (80007a0 <goto_application+0x20>)
 8000788:	f001 fdbe 	bl	8002308 <puts>
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <goto_application+0x24>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4798      	blx	r3
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08003238 	.word	0x08003238
 80007a4:	08004404 	.word	0x08004404

080007a8 <Error_Handler>:
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <NMI_Handler>:
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
 8000850:	f000 f9a6 	bl	8000ba0 <HAL_IncTick>
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <_read>:
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e00a      	b.n	8000880 <_read+0x28>
 800086a:	f3af 8000 	nop.w
 800086e:	4601      	mov	r1, r0
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	b2ca      	uxtb	r2, r1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf0      	blt.n	800086a <_read+0x12>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_write>:
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e009      	b.n	80008b8 <_write+0x26>
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff55 	bl	800075c <__io_putchar>
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf1      	blt.n	80008a4 <_write+0x12>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_close>:
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_fstat>:
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	2300      	movs	r3, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_isatty>:
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	2301      	movs	r3, #1
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_lseek>:
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	2300      	movs	r3, #0
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <_sbrk>:
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
 8000964:	f001 fc18 	bl	8002198 <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20010000 	.word	0x20010000
 8000994:	00000400 	.word	0x00000400
 8000998:	20000090 	.word	0x20000090
 800099c:	200000f0 	.word	0x200000f0

080009a0 <SystemInit>:
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <MX_USART1_UART_Init>:
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_USART1_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009fc:	f001 f80a 	bl	8001a14 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x46>
 8000a06:	f7ff fecf 	bl	80007a8 <Error_Handler>
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000094 	.word	0x20000094
 8000a14:	40011000 	.word	0x40011000

08000a18 <HAL_UART_MspInit>:
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_UART_MspInit+0x7c>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
 8000a84:	2307      	movs	r3, #7
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_UART_MspInit+0x8c>)
 8000a90:	f000 f9b0 	bl	8000df4 <HAL_GPIO_Init>
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <Reset_Handler>:
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0x12>
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
 8000aae:	490e      	ldr	r1, [pc, #56]	; (8000ae8 <LoopFillZerobss+0x1a>)
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <LoopFillZerobss+0x1e>)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:
 8000ab6:	58d4      	ldr	r4, [r2, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:
 8000abc:	18c4      	adds	r4, r0, r3
 8000abe:	428c      	cmp	r4, r1
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopFillZerobss+0x22>)
 8000ac4:	4c0b      	ldr	r4, [pc, #44]	; (8000af4 <LoopFillZerobss+0x26>)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:
 8000ace:	42a2      	cmp	r2, r4
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>
 8000ad2:	f7ff ff65 	bl	80009a0 <SystemInit>
 8000ad6:	f001 fb65 	bl	80021a4 <__libc_init_array>
 8000ada:	f7ff fda5 	bl	8000628 <main>
 8000ade:	4770      	bx	lr
 8000ae0:	20010000 	.word	0x20010000
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000074 	.word	0x20000074
 8000aec:	08003318 	.word	0x08003318
 8000af0:	20000074 	.word	0x20000074
 8000af4:	200000ec 	.word	0x200000ec

08000af8 <ADC_IRQHandler>:
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <HAL_Init+0x40>)
 8000b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_Init+0x40>)
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x40>)
 8000b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f931 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f808 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe40 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x54>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x58>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f93b 	bl	8000dda <HAL_SYSTICK_Config>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00e      	b.n	8000b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d80a      	bhi.n	8000b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f911 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <HAL_InitTick+0x5c>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000004 	.word	0x20000004
 8000b98:	2000000c 	.word	0x2000000c
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000000c 	.word	0x2000000c
 8000bc4:	200000d8 	.word	0x200000d8

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200000d8 	.word	0x200000d8

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000000c 	.word	0x2000000c

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff8e 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff47 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff5c 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff8e 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5d 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffb0 	bl	8000d48 <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e159      	b.n	80010c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8148 	bne.w	80010be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a2 	beq.w	80010be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b57      	ldr	r3, [pc, #348]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a56      	ldr	r2, [pc, #344]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b54      	ldr	r3, [pc, #336]	; (80010dc <HAL_GPIO_Init+0x2e8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a52      	ldr	r2, [pc, #328]	; (80010e0 <HAL_GPIO_Init+0x2ec>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <HAL_GPIO_Init+0x2f0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d019      	beq.n	8000ff6 <HAL_GPIO_Init+0x202>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_GPIO_Init+0x2f4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d013      	beq.n	8000ff2 <HAL_GPIO_Init+0x1fe>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a47      	ldr	r2, [pc, #284]	; (80010ec <HAL_GPIO_Init+0x2f8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00d      	beq.n	8000fee <HAL_GPIO_Init+0x1fa>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d007      	beq.n	8000fea <HAL_GPIO_Init+0x1f6>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a45      	ldr	r2, [pc, #276]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d101      	bne.n	8000fe6 <HAL_GPIO_Init+0x1f2>
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_GPIO_Init+0x2ec>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x304>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_GPIO_Init+0x304>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108e:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b8:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f aea2 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43d9      	mvns	r1, r3
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	400b      	ands	r3, r1
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e267      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d075      	beq.n	800126e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001182:	4b88      	ldr	r3, [pc, #544]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b04      	cmp	r3, #4
 800118c:	d00c      	beq.n	80011a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118e:	4b85      	ldr	r3, [pc, #532]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001196:	2b08      	cmp	r3, #8
 8001198:	d112      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a6:	d10b      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	4b7e      	ldr	r3, [pc, #504]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d05b      	beq.n	800126c <HAL_RCC_OscConfig+0x108>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d157      	bne.n	800126c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e242      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d106      	bne.n	80011d8 <HAL_RCC_OscConfig+0x74>
 80011ca:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a75      	ldr	r2, [pc, #468]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e01d      	b.n	8001214 <HAL_RCC_OscConfig+0xb0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x98>
 80011e2:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6f      	ldr	r2, [pc, #444]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b6d      	ldr	r3, [pc, #436]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6c      	ldr	r2, [pc, #432]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0xb0>
 80011fc:	4b69      	ldr	r3, [pc, #420]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a68      	ldr	r2, [pc, #416]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b66      	ldr	r3, [pc, #408]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a65      	ldr	r2, [pc, #404]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fcd4 	bl	8000bc8 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fcd0 	bl	8000bc8 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e207      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	4b5b      	ldr	r3, [pc, #364]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0xc0>
 8001242:	e014      	b.n	800126e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fcc0 	bl	8000bc8 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fcbc 	bl	8000bc8 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1f3      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0xe8>
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d063      	beq.n	8001342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127a:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b47      	ldr	r3, [pc, #284]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128e:	2b08      	cmp	r3, #8
 8001290:	d11c      	bne.n	80012cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d116      	bne.n	80012cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x152>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e1c7      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4937      	ldr	r1, [pc, #220]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	e03a      	b.n	8001342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d020      	beq.n	8001316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_RCC_OscConfig+0x244>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012da:	f7ff fc75 	bl	8000bc8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fc71 	bl	8000bc8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1a8      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4925      	ldr	r1, [pc, #148]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
 8001314:	e015      	b.n	8001342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x244>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fc54 	bl	8000bc8 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fc50 	bl	8000bc8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e187      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d036      	beq.n	80013bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d016      	beq.n	8001384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_RCC_OscConfig+0x248>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fc34 	bl	8000bc8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff fc30 	bl	8000bc8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e167      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_RCC_OscConfig+0x240>)
 8001378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x200>
 8001382:	e01b      	b.n	80013bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_OscConfig+0x248>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fc1d 	bl	8000bc8 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	e00e      	b.n	80013b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001392:	f7ff fc19 	bl	8000bc8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d907      	bls.n	80013b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e150      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
 80013a4:	40023800 	.word	0x40023800
 80013a8:	42470000 	.word	0x42470000
 80013ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ea      	bne.n	8001392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8097 	beq.w	80014f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10f      	bne.n	80013fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b7d      	ldr	r3, [pc, #500]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a7c      	ldr	r2, [pc, #496]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b7a      	ldr	r3, [pc, #488]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b77      	ldr	r3, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x474>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d118      	bne.n	8001438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	4b74      	ldr	r3, [pc, #464]	; (80015d8 <HAL_RCC_OscConfig+0x474>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a73      	ldr	r2, [pc, #460]	; (80015d8 <HAL_RCC_OscConfig+0x474>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbd9 	bl	8000bc8 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff fbd5 	bl	8000bc8 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e10c      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	4b6a      	ldr	r3, [pc, #424]	; (80015d8 <HAL_RCC_OscConfig+0x474>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x2ea>
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	4a63      	ldr	r2, [pc, #396]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6713      	str	r3, [r2, #112]	; 0x70
 800144c:	e01c      	b.n	8001488 <HAL_RCC_OscConfig+0x324>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x30c>
 8001456:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a5e      	ldr	r2, [pc, #376]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6713      	str	r3, [r2, #112]	; 0x70
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a5b      	ldr	r2, [pc, #364]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
 800146e:	e00b      	b.n	8001488 <HAL_RCC_OscConfig+0x324>
 8001470:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a57      	ldr	r2, [pc, #348]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a54      	ldr	r2, [pc, #336]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 0304 	bic.w	r3, r3, #4
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d015      	beq.n	80014bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff fb9a 	bl	8000bc8 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001496:	e00a      	b.n	80014ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001498:	f7ff fb96 	bl	8000bc8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0cb      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ae:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0ee      	beq.n	8001498 <HAL_RCC_OscConfig+0x334>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fb84 	bl	8000bc8 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c4:	f7ff fb80 	bl	8000bc8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0b5      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014da:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1ee      	bne.n	80014c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a38      	ldr	r2, [pc, #224]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80014f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80a1 	beq.w	8001644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001502:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b08      	cmp	r3, #8
 800150c:	d05c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d141      	bne.n	800159a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <HAL_RCC_OscConfig+0x478>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fb54 	bl	8000bc8 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001524:	f7ff fb50 	bl	8000bc8 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e087      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69da      	ldr	r2, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	3b01      	subs	r3, #1
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	491b      	ldr	r1, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x478>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001572:	f7ff fb29 	bl	8000bc8 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7ff fb25 	bl	8000bc8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e05c      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x416>
 8001598:	e054      	b.n	8001644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x478>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb12 	bl	8000bc8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff fb0e 	bl	8000bc8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e045      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x444>
 80015c6:	e03d      	b.n	8001644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e038      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000
 80015dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x4ec>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d028      	beq.n	8001640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d121      	bne.n	8001640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d11a      	bne.n	8001640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001610:	4013      	ands	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001618:	4293      	cmp	r3, r2
 800161a:	d111      	bne.n	8001640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	3b01      	subs	r3, #1
 800162a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d107      	bne.n	8001640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0cc      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d90c      	bls.n	8001690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b65      	ldr	r3, [pc, #404]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0b8      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	494d      	ldr	r1, [pc, #308]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d044      	beq.n	8001774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d119      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e07f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d003      	beq.n	8001712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	2b03      	cmp	r3, #3
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e067      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001732:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f023 0203 	bic.w	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4934      	ldr	r1, [pc, #208]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001744:	f7ff fa40 	bl	8000bc8 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	e00a      	b.n	8001762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	f7ff fa3c 	bl	8000bc8 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e04f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 020c 	and.w	r2, r3, #12
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	429a      	cmp	r2, r3
 8001772:	d1eb      	bne.n	800174c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d20c      	bcs.n	800179c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e032      	b.n	8001802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017da:	f000 f821 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	490a      	ldr	r1, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	5ccb      	ldrb	r3, [r1, r3]
 80017ee:	fa22 f303 	lsr.w	r3, r2, r3
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f9a0 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00
 8001810:	40023800 	.word	0x40023800
 8001814:	08003258 	.word	0x08003258
 8001818:	20000004 	.word	0x20000004
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001824:	b090      	sub	sp, #64	; 0x40
 8001826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
 800182c:	2300      	movs	r3, #0
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001830:	2300      	movs	r3, #0
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d00d      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x40>
 8001844:	2b08      	cmp	r3, #8
 8001846:	f200 80a1 	bhi.w	800198c <HAL_RCC_GetSysClockFreq+0x16c>
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x34>
 800184e:	2b04      	cmp	r3, #4
 8001850:	d003      	beq.n	800185a <HAL_RCC_GetSysClockFreq+0x3a>
 8001852:	e09b      	b.n	800198c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001858:	e09b      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185a:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800185e:	e098      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186a:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d028      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	2200      	movs	r2, #0
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	627a      	str	r2, [r7, #36]	; 0x24
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001888:	2100      	movs	r1, #0
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800188c:	fb03 f201 	mul.w	r2, r3, r1
 8001890:	2300      	movs	r3, #0
 8001892:	fb00 f303 	mul.w	r3, r0, r3
 8001896:	4413      	add	r3, r2
 8001898:	4a43      	ldr	r2, [pc, #268]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800189a:	fba0 1202 	umull	r1, r2, r0, r2
 800189e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018a0:	460a      	mov	r2, r1
 80018a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a6:	4413      	add	r3, r2
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	2200      	movs	r2, #0
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	61fa      	str	r2, [r7, #28]
 80018b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ba:	f7fe fce1 	bl	8000280 <__aeabi_uldivmod>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4613      	mov	r3, r2
 80018c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c6:	e053      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	2200      	movs	r2, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	617a      	str	r2, [r7, #20]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018da:	f04f 0b00 	mov.w	fp, #0
 80018de:	4652      	mov	r2, sl
 80018e0:	465b      	mov	r3, fp
 80018e2:	f04f 0000 	mov.w	r0, #0
 80018e6:	f04f 0100 	mov.w	r1, #0
 80018ea:	0159      	lsls	r1, r3, #5
 80018ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f0:	0150      	lsls	r0, r2, #5
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	ebb2 080a 	subs.w	r8, r2, sl
 80018fa:	eb63 090b 	sbc.w	r9, r3, fp
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800190a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800190e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001912:	ebb2 0408 	subs.w	r4, r2, r8
 8001916:	eb63 0509 	sbc.w	r5, r3, r9
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	00eb      	lsls	r3, r5, #3
 8001924:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001928:	00e2      	lsls	r2, r4, #3
 800192a:	4614      	mov	r4, r2
 800192c:	461d      	mov	r5, r3
 800192e:	eb14 030a 	adds.w	r3, r4, sl
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	eb45 030b 	adc.w	r3, r5, fp
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001946:	4629      	mov	r1, r5
 8001948:	028b      	lsls	r3, r1, #10
 800194a:	4621      	mov	r1, r4
 800194c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001950:	4621      	mov	r1, r4
 8001952:	028a      	lsls	r2, r1, #10
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195a:	2200      	movs	r2, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	60fa      	str	r2, [r7, #12]
 8001960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001964:	f7fe fc8c 	bl	8000280 <__aeabi_uldivmod>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4613      	mov	r3, r2
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	0c1b      	lsrs	r3, r3, #16
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	3301      	adds	r3, #1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001984:	fbb2 f3f3 	udiv	r3, r2, r3
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800198a:	e002      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001994:	4618      	mov	r0, r3
 8001996:	3740      	adds	r7, #64	; 0x40
 8001998:	46bd      	mov	sp, r7
 800199a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	017d7840 	.word	0x017d7840

080019ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019c8:	f7ff fff0 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	0a9b      	lsrs	r3, r3, #10
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	4903      	ldr	r1, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08003268 	.word	0x08003268

080019ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f0:	f7ff ffdc 	bl	80019ac <HAL_RCC_GetHCLKFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0b5b      	lsrs	r3, r3, #13
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4903      	ldr	r1, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a02:	5ccb      	ldrb	r3, [r1, r3]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	08003268 	.word	0x08003268

08001a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03f      	b.n	8001aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe ffec 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f929 	bl	8001cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b08a      	sub	sp, #40	; 0x28
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d17c      	bne.n	8001bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_UART_Transmit+0x2c>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e075      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_UART_Transmit+0x3e>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e06e      	b.n	8001bca <HAL_UART_Transmit+0x11c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2221      	movs	r2, #33	; 0x21
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b02:	f7ff f861 	bl	8000bc8 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b1c:	d108      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	e003      	b.n	8001b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b40:	e02a      	b.n	8001b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f840 	bl	8001bd2 <UART_WaitOnFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e036      	b.n	8001bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	3302      	adds	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e007      	b.n	8001b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1cf      	bne.n	8001b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f810 	bl	8001bd2 <UART_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e006      	b.n	8001bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b090      	sub	sp, #64	; 0x40
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be2:	e050      	b.n	8001c86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bea:	d04c      	beq.n	8001c86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bf2:	f7fe ffe9 	bl	8000bc8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d241      	bcs.n	8001c86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	330c      	adds	r3, #12
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	e853 3f00 	ldrex	r3, [r3]
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	330c      	adds	r3, #12
 8001c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c22:	637a      	str	r2, [r7, #52]	; 0x34
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c2a:	e841 2300 	strex	r3, r2, [r1]
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e5      	bne.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3314      	adds	r3, #20
 8001c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	e853 3f00 	ldrex	r3, [r3]
 8001c44:	613b      	str	r3, [r7, #16]
   return(result);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3314      	adds	r3, #20
 8001c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c56:	623a      	str	r2, [r7, #32]
 8001c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c5a:	69f9      	ldr	r1, [r7, #28]
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	e841 2300 	strex	r3, r2, [r1]
 8001c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e5      	bne.n	8001c36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e00f      	b.n	8001ca6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	bf0c      	ite	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	2300      	movne	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d09f      	beq.n	8001be4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3740      	adds	r7, #64	; 0x40
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b0c0      	sub	sp, #256	; 0x100
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ccc:	68d9      	ldr	r1, [r3, #12]
 8001cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	ea40 0301 	orr.w	r3, r0, r1
 8001cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d08:	f021 010c 	bic.w	r1, r1, #12
 8001d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d16:	430b      	orrs	r3, r1
 8001d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2a:	6999      	ldr	r1, [r3, #24]
 8001d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	ea40 0301 	orr.w	r3, r0, r1
 8001d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b8f      	ldr	r3, [pc, #572]	; (8001f7c <UART_SetConfig+0x2cc>)
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d005      	beq.n	8001d50 <UART_SetConfig+0xa0>
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b8d      	ldr	r3, [pc, #564]	; (8001f80 <UART_SetConfig+0x2d0>)
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d104      	bne.n	8001d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d50:	f7ff fe4c 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
 8001d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d58:	e003      	b.n	8001d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d5a:	f7ff fe33 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 8001d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6c:	f040 810c 	bne.w	8001f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d74:	2200      	movs	r2, #0
 8001d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d82:	4622      	mov	r2, r4
 8001d84:	462b      	mov	r3, r5
 8001d86:	1891      	adds	r1, r2, r2
 8001d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d8a:	415b      	adcs	r3, r3
 8001d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d92:	4621      	mov	r1, r4
 8001d94:	eb12 0801 	adds.w	r8, r2, r1
 8001d98:	4629      	mov	r1, r5
 8001d9a:	eb43 0901 	adc.w	r9, r3, r1
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001db2:	4690      	mov	r8, r2
 8001db4:	4699      	mov	r9, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	eb18 0303 	adds.w	r3, r8, r3
 8001dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	eb49 0303 	adc.w	r3, r9, r3
 8001dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001dde:	460b      	mov	r3, r1
 8001de0:	18db      	adds	r3, r3, r3
 8001de2:	653b      	str	r3, [r7, #80]	; 0x50
 8001de4:	4613      	mov	r3, r2
 8001de6:	eb42 0303 	adc.w	r3, r2, r3
 8001dea:	657b      	str	r3, [r7, #84]	; 0x54
 8001dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001df4:	f7fe fa44 	bl	8000280 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <UART_SetConfig+0x2d4>)
 8001dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	011c      	lsls	r4, r3, #4
 8001e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e18:	4642      	mov	r2, r8
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	1891      	adds	r1, r2, r2
 8001e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e20:	415b      	adcs	r3, r3
 8001e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e28:	4641      	mov	r1, r8
 8001e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8001e2e:	4649      	mov	r1, r9
 8001e30:	eb43 0b01 	adc.w	fp, r3, r1
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e48:	4692      	mov	sl, r2
 8001e4a:	469b      	mov	fp, r3
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8001e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e56:	464b      	mov	r3, r9
 8001e58:	eb4b 0303 	adc.w	r3, fp, r3
 8001e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e74:	460b      	mov	r3, r1
 8001e76:	18db      	adds	r3, r3, r3
 8001e78:	643b      	str	r3, [r7, #64]	; 0x40
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	eb42 0303 	adc.w	r3, r2, r3
 8001e80:	647b      	str	r3, [r7, #68]	; 0x44
 8001e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e8a:	f7fe f9f9 	bl	8000280 <__aeabi_uldivmod>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <UART_SetConfig+0x2d4>)
 8001e96:	fba3 2301 	umull	r2, r3, r3, r1
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2264      	movs	r2, #100	; 0x64
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	1acb      	subs	r3, r1, r3
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <UART_SetConfig+0x2d4>)
 8001eac:	fba3 2302 	umull	r2, r3, r3, r2
 8001eb0:	095b      	lsrs	r3, r3, #5
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001eb8:	441c      	add	r4, r3
 8001eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001ecc:	4642      	mov	r2, r8
 8001ece:	464b      	mov	r3, r9
 8001ed0:	1891      	adds	r1, r2, r2
 8001ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ed4:	415b      	adcs	r3, r3
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001edc:	4641      	mov	r1, r8
 8001ede:	1851      	adds	r1, r2, r1
 8001ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8001ee2:	4649      	mov	r1, r9
 8001ee4:	414b      	adcs	r3, r1
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	00cb      	lsls	r3, r1, #3
 8001ef8:	4651      	mov	r1, sl
 8001efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001efe:	4651      	mov	r1, sl
 8001f00:	00ca      	lsls	r2, r1, #3
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	4642      	mov	r2, r8
 8001f0a:	189b      	adds	r3, r3, r2
 8001f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f10:	464b      	mov	r3, r9
 8001f12:	460a      	mov	r2, r1
 8001f14:	eb42 0303 	adc.w	r3, r2, r3
 8001f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f30:	460b      	mov	r3, r1
 8001f32:	18db      	adds	r3, r3, r3
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	4613      	mov	r3, r2
 8001f38:	eb42 0303 	adc.w	r3, r2, r3
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f46:	f7fe f99b 	bl	8000280 <__aeabi_uldivmod>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <UART_SetConfig+0x2d4>)
 8001f50:	fba3 1302 	umull	r1, r3, r3, r2
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	2164      	movs	r1, #100	; 0x64
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	3332      	adds	r3, #50	; 0x32
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <UART_SetConfig+0x2d4>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	f003 0207 	and.w	r2, r3, #7
 8001f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4422      	add	r2, r4
 8001f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f78:	e105      	b.n	8002186 <UART_SetConfig+0x4d6>
 8001f7a:	bf00      	nop
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	40011400 	.word	0x40011400
 8001f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f9a:	4642      	mov	r2, r8
 8001f9c:	464b      	mov	r3, r9
 8001f9e:	1891      	adds	r1, r2, r2
 8001fa0:	6239      	str	r1, [r7, #32]
 8001fa2:	415b      	adcs	r3, r3
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001faa:	4641      	mov	r1, r8
 8001fac:	1854      	adds	r4, r2, r1
 8001fae:	4649      	mov	r1, r9
 8001fb0:	eb43 0501 	adc.w	r5, r3, r1
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	00eb      	lsls	r3, r5, #3
 8001fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fc2:	00e2      	lsls	r2, r4, #3
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	4643      	mov	r3, r8
 8001fca:	18e3      	adds	r3, r4, r3
 8001fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fd0:	464b      	mov	r3, r9
 8001fd2:	eb45 0303 	adc.w	r3, r5, r3
 8001fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	008b      	lsls	r3, r1, #2
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002000:	4621      	mov	r1, r4
 8002002:	008a      	lsls	r2, r1, #2
 8002004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002008:	f7fe f93a 	bl	8000280 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4b60      	ldr	r3, [pc, #384]	; (8002194 <UART_SetConfig+0x4e4>)
 8002012:	fba3 2302 	umull	r2, r3, r3, r2
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	011c      	lsls	r4, r3, #4
 800201a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800201e:	2200      	movs	r2, #0
 8002020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	1891      	adds	r1, r2, r2
 8002032:	61b9      	str	r1, [r7, #24]
 8002034:	415b      	adcs	r3, r3
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800203c:	4641      	mov	r1, r8
 800203e:	1851      	adds	r1, r2, r1
 8002040:	6139      	str	r1, [r7, #16]
 8002042:	4649      	mov	r1, r9
 8002044:	414b      	adcs	r3, r1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002054:	4659      	mov	r1, fp
 8002056:	00cb      	lsls	r3, r1, #3
 8002058:	4651      	mov	r1, sl
 800205a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800205e:	4651      	mov	r1, sl
 8002060:	00ca      	lsls	r2, r1, #3
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	4603      	mov	r3, r0
 8002068:	4642      	mov	r2, r8
 800206a:	189b      	adds	r3, r3, r2
 800206c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002070:	464b      	mov	r3, r9
 8002072:	460a      	mov	r2, r1
 8002074:	eb42 0303 	adc.w	r3, r2, r3
 8002078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800207c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	67bb      	str	r3, [r7, #120]	; 0x78
 8002086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002094:	4649      	mov	r1, r9
 8002096:	008b      	lsls	r3, r1, #2
 8002098:	4641      	mov	r1, r8
 800209a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800209e:	4641      	mov	r1, r8
 80020a0:	008a      	lsls	r2, r1, #2
 80020a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020a6:	f7fe f8eb 	bl	8000280 <__aeabi_uldivmod>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4b39      	ldr	r3, [pc, #228]	; (8002194 <UART_SetConfig+0x4e4>)
 80020b0:	fba3 1302 	umull	r1, r3, r3, r2
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	2164      	movs	r1, #100	; 0x64
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	3332      	adds	r3, #50	; 0x32
 80020c2:	4a34      	ldr	r2, [pc, #208]	; (8002194 <UART_SetConfig+0x4e4>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ce:	441c      	add	r4, r3
 80020d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020d4:	2200      	movs	r2, #0
 80020d6:	673b      	str	r3, [r7, #112]	; 0x70
 80020d8:	677a      	str	r2, [r7, #116]	; 0x74
 80020da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80020de:	4642      	mov	r2, r8
 80020e0:	464b      	mov	r3, r9
 80020e2:	1891      	adds	r1, r2, r2
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	415b      	adcs	r3, r3
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ee:	4641      	mov	r1, r8
 80020f0:	1851      	adds	r1, r2, r1
 80020f2:	6039      	str	r1, [r7, #0]
 80020f4:	4649      	mov	r1, r9
 80020f6:	414b      	adcs	r3, r1
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002106:	4659      	mov	r1, fp
 8002108:	00cb      	lsls	r3, r1, #3
 800210a:	4651      	mov	r1, sl
 800210c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002110:	4651      	mov	r1, sl
 8002112:	00ca      	lsls	r2, r1, #3
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	4603      	mov	r3, r0
 800211a:	4642      	mov	r2, r8
 800211c:	189b      	adds	r3, r3, r2
 800211e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002120:	464b      	mov	r3, r9
 8002122:	460a      	mov	r2, r1
 8002124:	eb42 0303 	adc.w	r3, r2, r3
 8002128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	663b      	str	r3, [r7, #96]	; 0x60
 8002134:	667a      	str	r2, [r7, #100]	; 0x64
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002142:	4649      	mov	r1, r9
 8002144:	008b      	lsls	r3, r1, #2
 8002146:	4641      	mov	r1, r8
 8002148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800214c:	4641      	mov	r1, r8
 800214e:	008a      	lsls	r2, r1, #2
 8002150:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002154:	f7fe f894 	bl	8000280 <__aeabi_uldivmod>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <UART_SetConfig+0x4e4>)
 800215e:	fba3 1302 	umull	r1, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2164      	movs	r1, #100	; 0x64
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	3332      	adds	r3, #50	; 0x32
 8002170:	4a08      	ldr	r2, [pc, #32]	; (8002194 <UART_SetConfig+0x4e4>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4422      	add	r2, r4
 8002184:	609a      	str	r2, [r3, #8]
}
 8002186:	bf00      	nop
 8002188:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800218c:	46bd      	mov	sp, r7
 800218e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002192:	bf00      	nop
 8002194:	51eb851f 	.word	0x51eb851f

08002198 <__errno>:
 8002198:	4b01      	ldr	r3, [pc, #4]	; (80021a0 <__errno+0x8>)
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000010 	.word	0x20000010

080021a4 <__libc_init_array>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	4d0d      	ldr	r5, [pc, #52]	; (80021dc <__libc_init_array+0x38>)
 80021a8:	4c0d      	ldr	r4, [pc, #52]	; (80021e0 <__libc_init_array+0x3c>)
 80021aa:	1b64      	subs	r4, r4, r5
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	2600      	movs	r6, #0
 80021b0:	42a6      	cmp	r6, r4
 80021b2:	d109      	bne.n	80021c8 <__libc_init_array+0x24>
 80021b4:	4d0b      	ldr	r5, [pc, #44]	; (80021e4 <__libc_init_array+0x40>)
 80021b6:	4c0c      	ldr	r4, [pc, #48]	; (80021e8 <__libc_init_array+0x44>)
 80021b8:	f001 f824 	bl	8003204 <_init>
 80021bc:	1b64      	subs	r4, r4, r5
 80021be:	10a4      	asrs	r4, r4, #2
 80021c0:	2600      	movs	r6, #0
 80021c2:	42a6      	cmp	r6, r4
 80021c4:	d105      	bne.n	80021d2 <__libc_init_array+0x2e>
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
 80021c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021cc:	4798      	blx	r3
 80021ce:	3601      	adds	r6, #1
 80021d0:	e7ee      	b.n	80021b0 <__libc_init_array+0xc>
 80021d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d6:	4798      	blx	r3
 80021d8:	3601      	adds	r6, #1
 80021da:	e7f2      	b.n	80021c2 <__libc_init_array+0x1e>
 80021dc:	08003310 	.word	0x08003310
 80021e0:	08003310 	.word	0x08003310
 80021e4:	08003310 	.word	0x08003310
 80021e8:	08003314 	.word	0x08003314

080021ec <memset>:
 80021ec:	4402      	add	r2, r0
 80021ee:	4603      	mov	r3, r0
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d100      	bne.n	80021f6 <memset+0xa>
 80021f4:	4770      	bx	lr
 80021f6:	f803 1b01 	strb.w	r1, [r3], #1
 80021fa:	e7f9      	b.n	80021f0 <memset+0x4>

080021fc <iprintf>:
 80021fc:	b40f      	push	{r0, r1, r2, r3}
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <iprintf+0x2c>)
 8002200:	b513      	push	{r0, r1, r4, lr}
 8002202:	681c      	ldr	r4, [r3, #0]
 8002204:	b124      	cbz	r4, 8002210 <iprintf+0x14>
 8002206:	69a3      	ldr	r3, [r4, #24]
 8002208:	b913      	cbnz	r3, 8002210 <iprintf+0x14>
 800220a:	4620      	mov	r0, r4
 800220c:	f000 fa5e 	bl	80026cc <__sinit>
 8002210:	ab05      	add	r3, sp, #20
 8002212:	9a04      	ldr	r2, [sp, #16]
 8002214:	68a1      	ldr	r1, [r4, #8]
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	4620      	mov	r0, r4
 800221a:	f000 fc67 	bl	8002aec <_vfiprintf_r>
 800221e:	b002      	add	sp, #8
 8002220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002224:	b004      	add	sp, #16
 8002226:	4770      	bx	lr
 8002228:	20000010 	.word	0x20000010

0800222c <_puts_r>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	460e      	mov	r6, r1
 8002230:	4605      	mov	r5, r0
 8002232:	b118      	cbz	r0, 800223c <_puts_r+0x10>
 8002234:	6983      	ldr	r3, [r0, #24]
 8002236:	b90b      	cbnz	r3, 800223c <_puts_r+0x10>
 8002238:	f000 fa48 	bl	80026cc <__sinit>
 800223c:	69ab      	ldr	r3, [r5, #24]
 800223e:	68ac      	ldr	r4, [r5, #8]
 8002240:	b913      	cbnz	r3, 8002248 <_puts_r+0x1c>
 8002242:	4628      	mov	r0, r5
 8002244:	f000 fa42 	bl	80026cc <__sinit>
 8002248:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <_puts_r+0xd0>)
 800224a:	429c      	cmp	r4, r3
 800224c:	d120      	bne.n	8002290 <_puts_r+0x64>
 800224e:	686c      	ldr	r4, [r5, #4]
 8002250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002252:	07db      	lsls	r3, r3, #31
 8002254:	d405      	bmi.n	8002262 <_puts_r+0x36>
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	0598      	lsls	r0, r3, #22
 800225a:	d402      	bmi.n	8002262 <_puts_r+0x36>
 800225c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800225e:	f000 fad3 	bl	8002808 <__retarget_lock_acquire_recursive>
 8002262:	89a3      	ldrh	r3, [r4, #12]
 8002264:	0719      	lsls	r1, r3, #28
 8002266:	d51d      	bpl.n	80022a4 <_puts_r+0x78>
 8002268:	6923      	ldr	r3, [r4, #16]
 800226a:	b1db      	cbz	r3, 80022a4 <_puts_r+0x78>
 800226c:	3e01      	subs	r6, #1
 800226e:	68a3      	ldr	r3, [r4, #8]
 8002270:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002274:	3b01      	subs	r3, #1
 8002276:	60a3      	str	r3, [r4, #8]
 8002278:	bb39      	cbnz	r1, 80022ca <_puts_r+0x9e>
 800227a:	2b00      	cmp	r3, #0
 800227c:	da38      	bge.n	80022f0 <_puts_r+0xc4>
 800227e:	4622      	mov	r2, r4
 8002280:	210a      	movs	r1, #10
 8002282:	4628      	mov	r0, r5
 8002284:	f000 f848 	bl	8002318 <__swbuf_r>
 8002288:	3001      	adds	r0, #1
 800228a:	d011      	beq.n	80022b0 <_puts_r+0x84>
 800228c:	250a      	movs	r5, #10
 800228e:	e011      	b.n	80022b4 <_puts_r+0x88>
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <_puts_r+0xd4>)
 8002292:	429c      	cmp	r4, r3
 8002294:	d101      	bne.n	800229a <_puts_r+0x6e>
 8002296:	68ac      	ldr	r4, [r5, #8]
 8002298:	e7da      	b.n	8002250 <_puts_r+0x24>
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <_puts_r+0xd8>)
 800229c:	429c      	cmp	r4, r3
 800229e:	bf08      	it	eq
 80022a0:	68ec      	ldreq	r4, [r5, #12]
 80022a2:	e7d5      	b.n	8002250 <_puts_r+0x24>
 80022a4:	4621      	mov	r1, r4
 80022a6:	4628      	mov	r0, r5
 80022a8:	f000 f888 	bl	80023bc <__swsetup_r>
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d0dd      	beq.n	800226c <_puts_r+0x40>
 80022b0:	f04f 35ff 	mov.w	r5, #4294967295
 80022b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022b6:	07da      	lsls	r2, r3, #31
 80022b8:	d405      	bmi.n	80022c6 <_puts_r+0x9a>
 80022ba:	89a3      	ldrh	r3, [r4, #12]
 80022bc:	059b      	lsls	r3, r3, #22
 80022be:	d402      	bmi.n	80022c6 <_puts_r+0x9a>
 80022c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022c2:	f000 faa2 	bl	800280a <__retarget_lock_release_recursive>
 80022c6:	4628      	mov	r0, r5
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da04      	bge.n	80022d8 <_puts_r+0xac>
 80022ce:	69a2      	ldr	r2, [r4, #24]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dc06      	bgt.n	80022e2 <_puts_r+0xb6>
 80022d4:	290a      	cmp	r1, #10
 80022d6:	d004      	beq.n	80022e2 <_puts_r+0xb6>
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	6022      	str	r2, [r4, #0]
 80022de:	7019      	strb	r1, [r3, #0]
 80022e0:	e7c5      	b.n	800226e <_puts_r+0x42>
 80022e2:	4622      	mov	r2, r4
 80022e4:	4628      	mov	r0, r5
 80022e6:	f000 f817 	bl	8002318 <__swbuf_r>
 80022ea:	3001      	adds	r0, #1
 80022ec:	d1bf      	bne.n	800226e <_puts_r+0x42>
 80022ee:	e7df      	b.n	80022b0 <_puts_r+0x84>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	250a      	movs	r5, #10
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	6022      	str	r2, [r4, #0]
 80022f8:	701d      	strb	r5, [r3, #0]
 80022fa:	e7db      	b.n	80022b4 <_puts_r+0x88>
 80022fc:	08003294 	.word	0x08003294
 8002300:	080032b4 	.word	0x080032b4
 8002304:	08003274 	.word	0x08003274

08002308 <puts>:
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <puts+0xc>)
 800230a:	4601      	mov	r1, r0
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	f7ff bf8d 	b.w	800222c <_puts_r>
 8002312:	bf00      	nop
 8002314:	20000010 	.word	0x20000010

08002318 <__swbuf_r>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	460e      	mov	r6, r1
 800231c:	4614      	mov	r4, r2
 800231e:	4605      	mov	r5, r0
 8002320:	b118      	cbz	r0, 800232a <__swbuf_r+0x12>
 8002322:	6983      	ldr	r3, [r0, #24]
 8002324:	b90b      	cbnz	r3, 800232a <__swbuf_r+0x12>
 8002326:	f000 f9d1 	bl	80026cc <__sinit>
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <__swbuf_r+0x98>)
 800232c:	429c      	cmp	r4, r3
 800232e:	d12b      	bne.n	8002388 <__swbuf_r+0x70>
 8002330:	686c      	ldr	r4, [r5, #4]
 8002332:	69a3      	ldr	r3, [r4, #24]
 8002334:	60a3      	str	r3, [r4, #8]
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	071a      	lsls	r2, r3, #28
 800233a:	d52f      	bpl.n	800239c <__swbuf_r+0x84>
 800233c:	6923      	ldr	r3, [r4, #16]
 800233e:	b36b      	cbz	r3, 800239c <__swbuf_r+0x84>
 8002340:	6923      	ldr	r3, [r4, #16]
 8002342:	6820      	ldr	r0, [r4, #0]
 8002344:	1ac0      	subs	r0, r0, r3
 8002346:	6963      	ldr	r3, [r4, #20]
 8002348:	b2f6      	uxtb	r6, r6
 800234a:	4283      	cmp	r3, r0
 800234c:	4637      	mov	r7, r6
 800234e:	dc04      	bgt.n	800235a <__swbuf_r+0x42>
 8002350:	4621      	mov	r1, r4
 8002352:	4628      	mov	r0, r5
 8002354:	f000 f926 	bl	80025a4 <_fflush_r>
 8002358:	bb30      	cbnz	r0, 80023a8 <__swbuf_r+0x90>
 800235a:	68a3      	ldr	r3, [r4, #8]
 800235c:	3b01      	subs	r3, #1
 800235e:	60a3      	str	r3, [r4, #8]
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	6022      	str	r2, [r4, #0]
 8002366:	701e      	strb	r6, [r3, #0]
 8002368:	6963      	ldr	r3, [r4, #20]
 800236a:	3001      	adds	r0, #1
 800236c:	4283      	cmp	r3, r0
 800236e:	d004      	beq.n	800237a <__swbuf_r+0x62>
 8002370:	89a3      	ldrh	r3, [r4, #12]
 8002372:	07db      	lsls	r3, r3, #31
 8002374:	d506      	bpl.n	8002384 <__swbuf_r+0x6c>
 8002376:	2e0a      	cmp	r6, #10
 8002378:	d104      	bne.n	8002384 <__swbuf_r+0x6c>
 800237a:	4621      	mov	r1, r4
 800237c:	4628      	mov	r0, r5
 800237e:	f000 f911 	bl	80025a4 <_fflush_r>
 8002382:	b988      	cbnz	r0, 80023a8 <__swbuf_r+0x90>
 8002384:	4638      	mov	r0, r7
 8002386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <__swbuf_r+0x9c>)
 800238a:	429c      	cmp	r4, r3
 800238c:	d101      	bne.n	8002392 <__swbuf_r+0x7a>
 800238e:	68ac      	ldr	r4, [r5, #8]
 8002390:	e7cf      	b.n	8002332 <__swbuf_r+0x1a>
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <__swbuf_r+0xa0>)
 8002394:	429c      	cmp	r4, r3
 8002396:	bf08      	it	eq
 8002398:	68ec      	ldreq	r4, [r5, #12]
 800239a:	e7ca      	b.n	8002332 <__swbuf_r+0x1a>
 800239c:	4621      	mov	r1, r4
 800239e:	4628      	mov	r0, r5
 80023a0:	f000 f80c 	bl	80023bc <__swsetup_r>
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d0cb      	beq.n	8002340 <__swbuf_r+0x28>
 80023a8:	f04f 37ff 	mov.w	r7, #4294967295
 80023ac:	e7ea      	b.n	8002384 <__swbuf_r+0x6c>
 80023ae:	bf00      	nop
 80023b0:	08003294 	.word	0x08003294
 80023b4:	080032b4 	.word	0x080032b4
 80023b8:	08003274 	.word	0x08003274

080023bc <__swsetup_r>:
 80023bc:	4b32      	ldr	r3, [pc, #200]	; (8002488 <__swsetup_r+0xcc>)
 80023be:	b570      	push	{r4, r5, r6, lr}
 80023c0:	681d      	ldr	r5, [r3, #0]
 80023c2:	4606      	mov	r6, r0
 80023c4:	460c      	mov	r4, r1
 80023c6:	b125      	cbz	r5, 80023d2 <__swsetup_r+0x16>
 80023c8:	69ab      	ldr	r3, [r5, #24]
 80023ca:	b913      	cbnz	r3, 80023d2 <__swsetup_r+0x16>
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 f97d 	bl	80026cc <__sinit>
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <__swsetup_r+0xd0>)
 80023d4:	429c      	cmp	r4, r3
 80023d6:	d10f      	bne.n	80023f8 <__swsetup_r+0x3c>
 80023d8:	686c      	ldr	r4, [r5, #4]
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023e0:	0719      	lsls	r1, r3, #28
 80023e2:	d42c      	bmi.n	800243e <__swsetup_r+0x82>
 80023e4:	06dd      	lsls	r5, r3, #27
 80023e6:	d411      	bmi.n	800240c <__swsetup_r+0x50>
 80023e8:	2309      	movs	r3, #9
 80023ea:	6033      	str	r3, [r6, #0]
 80023ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80023f0:	81a3      	strh	r3, [r4, #12]
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	e03e      	b.n	8002476 <__swsetup_r+0xba>
 80023f8:	4b25      	ldr	r3, [pc, #148]	; (8002490 <__swsetup_r+0xd4>)
 80023fa:	429c      	cmp	r4, r3
 80023fc:	d101      	bne.n	8002402 <__swsetup_r+0x46>
 80023fe:	68ac      	ldr	r4, [r5, #8]
 8002400:	e7eb      	b.n	80023da <__swsetup_r+0x1e>
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <__swsetup_r+0xd8>)
 8002404:	429c      	cmp	r4, r3
 8002406:	bf08      	it	eq
 8002408:	68ec      	ldreq	r4, [r5, #12]
 800240a:	e7e6      	b.n	80023da <__swsetup_r+0x1e>
 800240c:	0758      	lsls	r0, r3, #29
 800240e:	d512      	bpl.n	8002436 <__swsetup_r+0x7a>
 8002410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002412:	b141      	cbz	r1, 8002426 <__swsetup_r+0x6a>
 8002414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002418:	4299      	cmp	r1, r3
 800241a:	d002      	beq.n	8002422 <__swsetup_r+0x66>
 800241c:	4630      	mov	r0, r6
 800241e:	f000 fa5b 	bl	80028d8 <_free_r>
 8002422:	2300      	movs	r3, #0
 8002424:	6363      	str	r3, [r4, #52]	; 0x34
 8002426:	89a3      	ldrh	r3, [r4, #12]
 8002428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800242c:	81a3      	strh	r3, [r4, #12]
 800242e:	2300      	movs	r3, #0
 8002430:	6063      	str	r3, [r4, #4]
 8002432:	6923      	ldr	r3, [r4, #16]
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	89a3      	ldrh	r3, [r4, #12]
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	81a3      	strh	r3, [r4, #12]
 800243e:	6923      	ldr	r3, [r4, #16]
 8002440:	b94b      	cbnz	r3, 8002456 <__swsetup_r+0x9a>
 8002442:	89a3      	ldrh	r3, [r4, #12]
 8002444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244c:	d003      	beq.n	8002456 <__swsetup_r+0x9a>
 800244e:	4621      	mov	r1, r4
 8002450:	4630      	mov	r0, r6
 8002452:	f000 fa01 	bl	8002858 <__smakebuf_r>
 8002456:	89a0      	ldrh	r0, [r4, #12]
 8002458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800245c:	f010 0301 	ands.w	r3, r0, #1
 8002460:	d00a      	beq.n	8002478 <__swsetup_r+0xbc>
 8002462:	2300      	movs	r3, #0
 8002464:	60a3      	str	r3, [r4, #8]
 8002466:	6963      	ldr	r3, [r4, #20]
 8002468:	425b      	negs	r3, r3
 800246a:	61a3      	str	r3, [r4, #24]
 800246c:	6923      	ldr	r3, [r4, #16]
 800246e:	b943      	cbnz	r3, 8002482 <__swsetup_r+0xc6>
 8002470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002474:	d1ba      	bne.n	80023ec <__swsetup_r+0x30>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	0781      	lsls	r1, r0, #30
 800247a:	bf58      	it	pl
 800247c:	6963      	ldrpl	r3, [r4, #20]
 800247e:	60a3      	str	r3, [r4, #8]
 8002480:	e7f4      	b.n	800246c <__swsetup_r+0xb0>
 8002482:	2000      	movs	r0, #0
 8002484:	e7f7      	b.n	8002476 <__swsetup_r+0xba>
 8002486:	bf00      	nop
 8002488:	20000010 	.word	0x20000010
 800248c:	08003294 	.word	0x08003294
 8002490:	080032b4 	.word	0x080032b4
 8002494:	08003274 	.word	0x08003274

08002498 <__sflush_r>:
 8002498:	898a      	ldrh	r2, [r1, #12]
 800249a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249e:	4605      	mov	r5, r0
 80024a0:	0710      	lsls	r0, r2, #28
 80024a2:	460c      	mov	r4, r1
 80024a4:	d458      	bmi.n	8002558 <__sflush_r+0xc0>
 80024a6:	684b      	ldr	r3, [r1, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	dc05      	bgt.n	80024b8 <__sflush_r+0x20>
 80024ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	dc02      	bgt.n	80024b8 <__sflush_r+0x20>
 80024b2:	2000      	movs	r0, #0
 80024b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d0f9      	beq.n	80024b2 <__sflush_r+0x1a>
 80024be:	2300      	movs	r3, #0
 80024c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024c4:	682f      	ldr	r7, [r5, #0]
 80024c6:	602b      	str	r3, [r5, #0]
 80024c8:	d032      	beq.n	8002530 <__sflush_r+0x98>
 80024ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024cc:	89a3      	ldrh	r3, [r4, #12]
 80024ce:	075a      	lsls	r2, r3, #29
 80024d0:	d505      	bpl.n	80024de <__sflush_r+0x46>
 80024d2:	6863      	ldr	r3, [r4, #4]
 80024d4:	1ac0      	subs	r0, r0, r3
 80024d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024d8:	b10b      	cbz	r3, 80024de <__sflush_r+0x46>
 80024da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024dc:	1ac0      	subs	r0, r0, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	4602      	mov	r2, r0
 80024e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024e4:	6a21      	ldr	r1, [r4, #32]
 80024e6:	4628      	mov	r0, r5
 80024e8:	47b0      	blx	r6
 80024ea:	1c43      	adds	r3, r0, #1
 80024ec:	89a3      	ldrh	r3, [r4, #12]
 80024ee:	d106      	bne.n	80024fe <__sflush_r+0x66>
 80024f0:	6829      	ldr	r1, [r5, #0]
 80024f2:	291d      	cmp	r1, #29
 80024f4:	d82c      	bhi.n	8002550 <__sflush_r+0xb8>
 80024f6:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <__sflush_r+0x108>)
 80024f8:	40ca      	lsrs	r2, r1
 80024fa:	07d6      	lsls	r6, r2, #31
 80024fc:	d528      	bpl.n	8002550 <__sflush_r+0xb8>
 80024fe:	2200      	movs	r2, #0
 8002500:	6062      	str	r2, [r4, #4]
 8002502:	04d9      	lsls	r1, r3, #19
 8002504:	6922      	ldr	r2, [r4, #16]
 8002506:	6022      	str	r2, [r4, #0]
 8002508:	d504      	bpl.n	8002514 <__sflush_r+0x7c>
 800250a:	1c42      	adds	r2, r0, #1
 800250c:	d101      	bne.n	8002512 <__sflush_r+0x7a>
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	b903      	cbnz	r3, 8002514 <__sflush_r+0x7c>
 8002512:	6560      	str	r0, [r4, #84]	; 0x54
 8002514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002516:	602f      	str	r7, [r5, #0]
 8002518:	2900      	cmp	r1, #0
 800251a:	d0ca      	beq.n	80024b2 <__sflush_r+0x1a>
 800251c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002520:	4299      	cmp	r1, r3
 8002522:	d002      	beq.n	800252a <__sflush_r+0x92>
 8002524:	4628      	mov	r0, r5
 8002526:	f000 f9d7 	bl	80028d8 <_free_r>
 800252a:	2000      	movs	r0, #0
 800252c:	6360      	str	r0, [r4, #52]	; 0x34
 800252e:	e7c1      	b.n	80024b4 <__sflush_r+0x1c>
 8002530:	6a21      	ldr	r1, [r4, #32]
 8002532:	2301      	movs	r3, #1
 8002534:	4628      	mov	r0, r5
 8002536:	47b0      	blx	r6
 8002538:	1c41      	adds	r1, r0, #1
 800253a:	d1c7      	bne.n	80024cc <__sflush_r+0x34>
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0c4      	beq.n	80024cc <__sflush_r+0x34>
 8002542:	2b1d      	cmp	r3, #29
 8002544:	d001      	beq.n	800254a <__sflush_r+0xb2>
 8002546:	2b16      	cmp	r3, #22
 8002548:	d101      	bne.n	800254e <__sflush_r+0xb6>
 800254a:	602f      	str	r7, [r5, #0]
 800254c:	e7b1      	b.n	80024b2 <__sflush_r+0x1a>
 800254e:	89a3      	ldrh	r3, [r4, #12]
 8002550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002554:	81a3      	strh	r3, [r4, #12]
 8002556:	e7ad      	b.n	80024b4 <__sflush_r+0x1c>
 8002558:	690f      	ldr	r7, [r1, #16]
 800255a:	2f00      	cmp	r7, #0
 800255c:	d0a9      	beq.n	80024b2 <__sflush_r+0x1a>
 800255e:	0793      	lsls	r3, r2, #30
 8002560:	680e      	ldr	r6, [r1, #0]
 8002562:	bf08      	it	eq
 8002564:	694b      	ldreq	r3, [r1, #20]
 8002566:	600f      	str	r7, [r1, #0]
 8002568:	bf18      	it	ne
 800256a:	2300      	movne	r3, #0
 800256c:	eba6 0807 	sub.w	r8, r6, r7
 8002570:	608b      	str	r3, [r1, #8]
 8002572:	f1b8 0f00 	cmp.w	r8, #0
 8002576:	dd9c      	ble.n	80024b2 <__sflush_r+0x1a>
 8002578:	6a21      	ldr	r1, [r4, #32]
 800257a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800257c:	4643      	mov	r3, r8
 800257e:	463a      	mov	r2, r7
 8002580:	4628      	mov	r0, r5
 8002582:	47b0      	blx	r6
 8002584:	2800      	cmp	r0, #0
 8002586:	dc06      	bgt.n	8002596 <__sflush_r+0xfe>
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258e:	81a3      	strh	r3, [r4, #12]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	e78e      	b.n	80024b4 <__sflush_r+0x1c>
 8002596:	4407      	add	r7, r0
 8002598:	eba8 0800 	sub.w	r8, r8, r0
 800259c:	e7e9      	b.n	8002572 <__sflush_r+0xda>
 800259e:	bf00      	nop
 80025a0:	20400001 	.word	0x20400001

080025a4 <_fflush_r>:
 80025a4:	b538      	push	{r3, r4, r5, lr}
 80025a6:	690b      	ldr	r3, [r1, #16]
 80025a8:	4605      	mov	r5, r0
 80025aa:	460c      	mov	r4, r1
 80025ac:	b913      	cbnz	r3, 80025b4 <_fflush_r+0x10>
 80025ae:	2500      	movs	r5, #0
 80025b0:	4628      	mov	r0, r5
 80025b2:	bd38      	pop	{r3, r4, r5, pc}
 80025b4:	b118      	cbz	r0, 80025be <_fflush_r+0x1a>
 80025b6:	6983      	ldr	r3, [r0, #24]
 80025b8:	b90b      	cbnz	r3, 80025be <_fflush_r+0x1a>
 80025ba:	f000 f887 	bl	80026cc <__sinit>
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <_fflush_r+0x6c>)
 80025c0:	429c      	cmp	r4, r3
 80025c2:	d11b      	bne.n	80025fc <_fflush_r+0x58>
 80025c4:	686c      	ldr	r4, [r5, #4]
 80025c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ef      	beq.n	80025ae <_fflush_r+0xa>
 80025ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025d0:	07d0      	lsls	r0, r2, #31
 80025d2:	d404      	bmi.n	80025de <_fflush_r+0x3a>
 80025d4:	0599      	lsls	r1, r3, #22
 80025d6:	d402      	bmi.n	80025de <_fflush_r+0x3a>
 80025d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025da:	f000 f915 	bl	8002808 <__retarget_lock_acquire_recursive>
 80025de:	4628      	mov	r0, r5
 80025e0:	4621      	mov	r1, r4
 80025e2:	f7ff ff59 	bl	8002498 <__sflush_r>
 80025e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025e8:	07da      	lsls	r2, r3, #31
 80025ea:	4605      	mov	r5, r0
 80025ec:	d4e0      	bmi.n	80025b0 <_fflush_r+0xc>
 80025ee:	89a3      	ldrh	r3, [r4, #12]
 80025f0:	059b      	lsls	r3, r3, #22
 80025f2:	d4dd      	bmi.n	80025b0 <_fflush_r+0xc>
 80025f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025f6:	f000 f908 	bl	800280a <__retarget_lock_release_recursive>
 80025fa:	e7d9      	b.n	80025b0 <_fflush_r+0xc>
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <_fflush_r+0x70>)
 80025fe:	429c      	cmp	r4, r3
 8002600:	d101      	bne.n	8002606 <_fflush_r+0x62>
 8002602:	68ac      	ldr	r4, [r5, #8]
 8002604:	e7df      	b.n	80025c6 <_fflush_r+0x22>
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <_fflush_r+0x74>)
 8002608:	429c      	cmp	r4, r3
 800260a:	bf08      	it	eq
 800260c:	68ec      	ldreq	r4, [r5, #12]
 800260e:	e7da      	b.n	80025c6 <_fflush_r+0x22>
 8002610:	08003294 	.word	0x08003294
 8002614:	080032b4 	.word	0x080032b4
 8002618:	08003274 	.word	0x08003274

0800261c <std>:
 800261c:	2300      	movs	r3, #0
 800261e:	b510      	push	{r4, lr}
 8002620:	4604      	mov	r4, r0
 8002622:	e9c0 3300 	strd	r3, r3, [r0]
 8002626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800262a:	6083      	str	r3, [r0, #8]
 800262c:	8181      	strh	r1, [r0, #12]
 800262e:	6643      	str	r3, [r0, #100]	; 0x64
 8002630:	81c2      	strh	r2, [r0, #14]
 8002632:	6183      	str	r3, [r0, #24]
 8002634:	4619      	mov	r1, r3
 8002636:	2208      	movs	r2, #8
 8002638:	305c      	adds	r0, #92	; 0x5c
 800263a:	f7ff fdd7 	bl	80021ec <memset>
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <std+0x38>)
 8002640:	6263      	str	r3, [r4, #36]	; 0x24
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <std+0x3c>)
 8002644:	62a3      	str	r3, [r4, #40]	; 0x28
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <std+0x40>)
 8002648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <std+0x44>)
 800264c:	6224      	str	r4, [r4, #32]
 800264e:	6323      	str	r3, [r4, #48]	; 0x30
 8002650:	bd10      	pop	{r4, pc}
 8002652:	bf00      	nop
 8002654:	08003095 	.word	0x08003095
 8002658:	080030b7 	.word	0x080030b7
 800265c:	080030ef 	.word	0x080030ef
 8002660:	08003113 	.word	0x08003113

08002664 <_cleanup_r>:
 8002664:	4901      	ldr	r1, [pc, #4]	; (800266c <_cleanup_r+0x8>)
 8002666:	f000 b8af 	b.w	80027c8 <_fwalk_reent>
 800266a:	bf00      	nop
 800266c:	080025a5 	.word	0x080025a5

08002670 <__sfmoreglue>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	2268      	movs	r2, #104	; 0x68
 8002674:	1e4d      	subs	r5, r1, #1
 8002676:	4355      	muls	r5, r2
 8002678:	460e      	mov	r6, r1
 800267a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800267e:	f000 f997 	bl	80029b0 <_malloc_r>
 8002682:	4604      	mov	r4, r0
 8002684:	b140      	cbz	r0, 8002698 <__sfmoreglue+0x28>
 8002686:	2100      	movs	r1, #0
 8002688:	e9c0 1600 	strd	r1, r6, [r0]
 800268c:	300c      	adds	r0, #12
 800268e:	60a0      	str	r0, [r4, #8]
 8002690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002694:	f7ff fdaa 	bl	80021ec <memset>
 8002698:	4620      	mov	r0, r4
 800269a:	bd70      	pop	{r4, r5, r6, pc}

0800269c <__sfp_lock_acquire>:
 800269c:	4801      	ldr	r0, [pc, #4]	; (80026a4 <__sfp_lock_acquire+0x8>)
 800269e:	f000 b8b3 	b.w	8002808 <__retarget_lock_acquire_recursive>
 80026a2:	bf00      	nop
 80026a4:	200000dd 	.word	0x200000dd

080026a8 <__sfp_lock_release>:
 80026a8:	4801      	ldr	r0, [pc, #4]	; (80026b0 <__sfp_lock_release+0x8>)
 80026aa:	f000 b8ae 	b.w	800280a <__retarget_lock_release_recursive>
 80026ae:	bf00      	nop
 80026b0:	200000dd 	.word	0x200000dd

080026b4 <__sinit_lock_acquire>:
 80026b4:	4801      	ldr	r0, [pc, #4]	; (80026bc <__sinit_lock_acquire+0x8>)
 80026b6:	f000 b8a7 	b.w	8002808 <__retarget_lock_acquire_recursive>
 80026ba:	bf00      	nop
 80026bc:	200000de 	.word	0x200000de

080026c0 <__sinit_lock_release>:
 80026c0:	4801      	ldr	r0, [pc, #4]	; (80026c8 <__sinit_lock_release+0x8>)
 80026c2:	f000 b8a2 	b.w	800280a <__retarget_lock_release_recursive>
 80026c6:	bf00      	nop
 80026c8:	200000de 	.word	0x200000de

080026cc <__sinit>:
 80026cc:	b510      	push	{r4, lr}
 80026ce:	4604      	mov	r4, r0
 80026d0:	f7ff fff0 	bl	80026b4 <__sinit_lock_acquire>
 80026d4:	69a3      	ldr	r3, [r4, #24]
 80026d6:	b11b      	cbz	r3, 80026e0 <__sinit+0x14>
 80026d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026dc:	f7ff bff0 	b.w	80026c0 <__sinit_lock_release>
 80026e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80026e4:	6523      	str	r3, [r4, #80]	; 0x50
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <__sinit+0x68>)
 80026e8:	4a13      	ldr	r2, [pc, #76]	; (8002738 <__sinit+0x6c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80026ee:	42a3      	cmp	r3, r4
 80026f0:	bf04      	itt	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	61a3      	streq	r3, [r4, #24]
 80026f6:	4620      	mov	r0, r4
 80026f8:	f000 f820 	bl	800273c <__sfp>
 80026fc:	6060      	str	r0, [r4, #4]
 80026fe:	4620      	mov	r0, r4
 8002700:	f000 f81c 	bl	800273c <__sfp>
 8002704:	60a0      	str	r0, [r4, #8]
 8002706:	4620      	mov	r0, r4
 8002708:	f000 f818 	bl	800273c <__sfp>
 800270c:	2200      	movs	r2, #0
 800270e:	60e0      	str	r0, [r4, #12]
 8002710:	2104      	movs	r1, #4
 8002712:	6860      	ldr	r0, [r4, #4]
 8002714:	f7ff ff82 	bl	800261c <std>
 8002718:	68a0      	ldr	r0, [r4, #8]
 800271a:	2201      	movs	r2, #1
 800271c:	2109      	movs	r1, #9
 800271e:	f7ff ff7d 	bl	800261c <std>
 8002722:	68e0      	ldr	r0, [r4, #12]
 8002724:	2202      	movs	r2, #2
 8002726:	2112      	movs	r1, #18
 8002728:	f7ff ff78 	bl	800261c <std>
 800272c:	2301      	movs	r3, #1
 800272e:	61a3      	str	r3, [r4, #24]
 8002730:	e7d2      	b.n	80026d8 <__sinit+0xc>
 8002732:	bf00      	nop
 8002734:	08003270 	.word	0x08003270
 8002738:	08002665 	.word	0x08002665

0800273c <__sfp>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	4607      	mov	r7, r0
 8002740:	f7ff ffac 	bl	800269c <__sfp_lock_acquire>
 8002744:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <__sfp+0x84>)
 8002746:	681e      	ldr	r6, [r3, #0]
 8002748:	69b3      	ldr	r3, [r6, #24]
 800274a:	b913      	cbnz	r3, 8002752 <__sfp+0x16>
 800274c:	4630      	mov	r0, r6
 800274e:	f7ff ffbd 	bl	80026cc <__sinit>
 8002752:	3648      	adds	r6, #72	; 0x48
 8002754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002758:	3b01      	subs	r3, #1
 800275a:	d503      	bpl.n	8002764 <__sfp+0x28>
 800275c:	6833      	ldr	r3, [r6, #0]
 800275e:	b30b      	cbz	r3, 80027a4 <__sfp+0x68>
 8002760:	6836      	ldr	r6, [r6, #0]
 8002762:	e7f7      	b.n	8002754 <__sfp+0x18>
 8002764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002768:	b9d5      	cbnz	r5, 80027a0 <__sfp+0x64>
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <__sfp+0x88>)
 800276c:	60e3      	str	r3, [r4, #12]
 800276e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002772:	6665      	str	r5, [r4, #100]	; 0x64
 8002774:	f000 f847 	bl	8002806 <__retarget_lock_init_recursive>
 8002778:	f7ff ff96 	bl	80026a8 <__sfp_lock_release>
 800277c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002784:	6025      	str	r5, [r4, #0]
 8002786:	61a5      	str	r5, [r4, #24]
 8002788:	2208      	movs	r2, #8
 800278a:	4629      	mov	r1, r5
 800278c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002790:	f7ff fd2c 	bl	80021ec <memset>
 8002794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800279c:	4620      	mov	r0, r4
 800279e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a0:	3468      	adds	r4, #104	; 0x68
 80027a2:	e7d9      	b.n	8002758 <__sfp+0x1c>
 80027a4:	2104      	movs	r1, #4
 80027a6:	4638      	mov	r0, r7
 80027a8:	f7ff ff62 	bl	8002670 <__sfmoreglue>
 80027ac:	4604      	mov	r4, r0
 80027ae:	6030      	str	r0, [r6, #0]
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d1d5      	bne.n	8002760 <__sfp+0x24>
 80027b4:	f7ff ff78 	bl	80026a8 <__sfp_lock_release>
 80027b8:	230c      	movs	r3, #12
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	e7ee      	b.n	800279c <__sfp+0x60>
 80027be:	bf00      	nop
 80027c0:	08003270 	.word	0x08003270
 80027c4:	ffff0001 	.word	0xffff0001

080027c8 <_fwalk_reent>:
 80027c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027cc:	4606      	mov	r6, r0
 80027ce:	4688      	mov	r8, r1
 80027d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027d4:	2700      	movs	r7, #0
 80027d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027da:	f1b9 0901 	subs.w	r9, r9, #1
 80027de:	d505      	bpl.n	80027ec <_fwalk_reent+0x24>
 80027e0:	6824      	ldr	r4, [r4, #0]
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d1f7      	bne.n	80027d6 <_fwalk_reent+0xe>
 80027e6:	4638      	mov	r0, r7
 80027e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ec:	89ab      	ldrh	r3, [r5, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d907      	bls.n	8002802 <_fwalk_reent+0x3a>
 80027f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027f6:	3301      	adds	r3, #1
 80027f8:	d003      	beq.n	8002802 <_fwalk_reent+0x3a>
 80027fa:	4629      	mov	r1, r5
 80027fc:	4630      	mov	r0, r6
 80027fe:	47c0      	blx	r8
 8002800:	4307      	orrs	r7, r0
 8002802:	3568      	adds	r5, #104	; 0x68
 8002804:	e7e9      	b.n	80027da <_fwalk_reent+0x12>

08002806 <__retarget_lock_init_recursive>:
 8002806:	4770      	bx	lr

08002808 <__retarget_lock_acquire_recursive>:
 8002808:	4770      	bx	lr

0800280a <__retarget_lock_release_recursive>:
 800280a:	4770      	bx	lr

0800280c <__swhatbuf_r>:
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	460e      	mov	r6, r1
 8002810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002814:	2900      	cmp	r1, #0
 8002816:	b096      	sub	sp, #88	; 0x58
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
 800281c:	da08      	bge.n	8002830 <__swhatbuf_r+0x24>
 800281e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	602a      	str	r2, [r5, #0]
 8002826:	061a      	lsls	r2, r3, #24
 8002828:	d410      	bmi.n	800284c <__swhatbuf_r+0x40>
 800282a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282e:	e00e      	b.n	800284e <__swhatbuf_r+0x42>
 8002830:	466a      	mov	r2, sp
 8002832:	f000 fc95 	bl	8003160 <_fstat_r>
 8002836:	2800      	cmp	r0, #0
 8002838:	dbf1      	blt.n	800281e <__swhatbuf_r+0x12>
 800283a:	9a01      	ldr	r2, [sp, #4]
 800283c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002840:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002844:	425a      	negs	r2, r3
 8002846:	415a      	adcs	r2, r3
 8002848:	602a      	str	r2, [r5, #0]
 800284a:	e7ee      	b.n	800282a <__swhatbuf_r+0x1e>
 800284c:	2340      	movs	r3, #64	; 0x40
 800284e:	2000      	movs	r0, #0
 8002850:	6023      	str	r3, [r4, #0]
 8002852:	b016      	add	sp, #88	; 0x58
 8002854:	bd70      	pop	{r4, r5, r6, pc}
	...

08002858 <__smakebuf_r>:
 8002858:	898b      	ldrh	r3, [r1, #12]
 800285a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800285c:	079d      	lsls	r5, r3, #30
 800285e:	4606      	mov	r6, r0
 8002860:	460c      	mov	r4, r1
 8002862:	d507      	bpl.n	8002874 <__smakebuf_r+0x1c>
 8002864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	6123      	str	r3, [r4, #16]
 800286c:	2301      	movs	r3, #1
 800286e:	6163      	str	r3, [r4, #20]
 8002870:	b002      	add	sp, #8
 8002872:	bd70      	pop	{r4, r5, r6, pc}
 8002874:	ab01      	add	r3, sp, #4
 8002876:	466a      	mov	r2, sp
 8002878:	f7ff ffc8 	bl	800280c <__swhatbuf_r>
 800287c:	9900      	ldr	r1, [sp, #0]
 800287e:	4605      	mov	r5, r0
 8002880:	4630      	mov	r0, r6
 8002882:	f000 f895 	bl	80029b0 <_malloc_r>
 8002886:	b948      	cbnz	r0, 800289c <__smakebuf_r+0x44>
 8002888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800288c:	059a      	lsls	r2, r3, #22
 800288e:	d4ef      	bmi.n	8002870 <__smakebuf_r+0x18>
 8002890:	f023 0303 	bic.w	r3, r3, #3
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	81a3      	strh	r3, [r4, #12]
 800289a:	e7e3      	b.n	8002864 <__smakebuf_r+0xc>
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <__smakebuf_r+0x7c>)
 800289e:	62b3      	str	r3, [r6, #40]	; 0x28
 80028a0:	89a3      	ldrh	r3, [r4, #12]
 80028a2:	6020      	str	r0, [r4, #0]
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	81a3      	strh	r3, [r4, #12]
 80028aa:	9b00      	ldr	r3, [sp, #0]
 80028ac:	6163      	str	r3, [r4, #20]
 80028ae:	9b01      	ldr	r3, [sp, #4]
 80028b0:	6120      	str	r0, [r4, #16]
 80028b2:	b15b      	cbz	r3, 80028cc <__smakebuf_r+0x74>
 80028b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028b8:	4630      	mov	r0, r6
 80028ba:	f000 fc63 	bl	8003184 <_isatty_r>
 80028be:	b128      	cbz	r0, 80028cc <__smakebuf_r+0x74>
 80028c0:	89a3      	ldrh	r3, [r4, #12]
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	81a3      	strh	r3, [r4, #12]
 80028cc:	89a0      	ldrh	r0, [r4, #12]
 80028ce:	4305      	orrs	r5, r0
 80028d0:	81a5      	strh	r5, [r4, #12]
 80028d2:	e7cd      	b.n	8002870 <__smakebuf_r+0x18>
 80028d4:	08002665 	.word	0x08002665

080028d8 <_free_r>:
 80028d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028da:	2900      	cmp	r1, #0
 80028dc:	d044      	beq.n	8002968 <_free_r+0x90>
 80028de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028e2:	9001      	str	r0, [sp, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f1a1 0404 	sub.w	r4, r1, #4
 80028ea:	bfb8      	it	lt
 80028ec:	18e4      	addlt	r4, r4, r3
 80028ee:	f000 fc6b 	bl	80031c8 <__malloc_lock>
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <_free_r+0x94>)
 80028f4:	9801      	ldr	r0, [sp, #4]
 80028f6:	6813      	ldr	r3, [r2, #0]
 80028f8:	b933      	cbnz	r3, 8002908 <_free_r+0x30>
 80028fa:	6063      	str	r3, [r4, #4]
 80028fc:	6014      	str	r4, [r2, #0]
 80028fe:	b003      	add	sp, #12
 8002900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002904:	f000 bc66 	b.w	80031d4 <__malloc_unlock>
 8002908:	42a3      	cmp	r3, r4
 800290a:	d908      	bls.n	800291e <_free_r+0x46>
 800290c:	6825      	ldr	r5, [r4, #0]
 800290e:	1961      	adds	r1, r4, r5
 8002910:	428b      	cmp	r3, r1
 8002912:	bf01      	itttt	eq
 8002914:	6819      	ldreq	r1, [r3, #0]
 8002916:	685b      	ldreq	r3, [r3, #4]
 8002918:	1949      	addeq	r1, r1, r5
 800291a:	6021      	streq	r1, [r4, #0]
 800291c:	e7ed      	b.n	80028fa <_free_r+0x22>
 800291e:	461a      	mov	r2, r3
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	b10b      	cbz	r3, 8002928 <_free_r+0x50>
 8002924:	42a3      	cmp	r3, r4
 8002926:	d9fa      	bls.n	800291e <_free_r+0x46>
 8002928:	6811      	ldr	r1, [r2, #0]
 800292a:	1855      	adds	r5, r2, r1
 800292c:	42a5      	cmp	r5, r4
 800292e:	d10b      	bne.n	8002948 <_free_r+0x70>
 8002930:	6824      	ldr	r4, [r4, #0]
 8002932:	4421      	add	r1, r4
 8002934:	1854      	adds	r4, r2, r1
 8002936:	42a3      	cmp	r3, r4
 8002938:	6011      	str	r1, [r2, #0]
 800293a:	d1e0      	bne.n	80028fe <_free_r+0x26>
 800293c:	681c      	ldr	r4, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	6053      	str	r3, [r2, #4]
 8002942:	4421      	add	r1, r4
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	e7da      	b.n	80028fe <_free_r+0x26>
 8002948:	d902      	bls.n	8002950 <_free_r+0x78>
 800294a:	230c      	movs	r3, #12
 800294c:	6003      	str	r3, [r0, #0]
 800294e:	e7d6      	b.n	80028fe <_free_r+0x26>
 8002950:	6825      	ldr	r5, [r4, #0]
 8002952:	1961      	adds	r1, r4, r5
 8002954:	428b      	cmp	r3, r1
 8002956:	bf04      	itt	eq
 8002958:	6819      	ldreq	r1, [r3, #0]
 800295a:	685b      	ldreq	r3, [r3, #4]
 800295c:	6063      	str	r3, [r4, #4]
 800295e:	bf04      	itt	eq
 8002960:	1949      	addeq	r1, r1, r5
 8002962:	6021      	streq	r1, [r4, #0]
 8002964:	6054      	str	r4, [r2, #4]
 8002966:	e7ca      	b.n	80028fe <_free_r+0x26>
 8002968:	b003      	add	sp, #12
 800296a:	bd30      	pop	{r4, r5, pc}
 800296c:	200000e0 	.word	0x200000e0

08002970 <sbrk_aligned>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4e0e      	ldr	r6, [pc, #56]	; (80029ac <sbrk_aligned+0x3c>)
 8002974:	460c      	mov	r4, r1
 8002976:	6831      	ldr	r1, [r6, #0]
 8002978:	4605      	mov	r5, r0
 800297a:	b911      	cbnz	r1, 8002982 <sbrk_aligned+0x12>
 800297c:	f000 fb7a 	bl	8003074 <_sbrk_r>
 8002980:	6030      	str	r0, [r6, #0]
 8002982:	4621      	mov	r1, r4
 8002984:	4628      	mov	r0, r5
 8002986:	f000 fb75 	bl	8003074 <_sbrk_r>
 800298a:	1c43      	adds	r3, r0, #1
 800298c:	d00a      	beq.n	80029a4 <sbrk_aligned+0x34>
 800298e:	1cc4      	adds	r4, r0, #3
 8002990:	f024 0403 	bic.w	r4, r4, #3
 8002994:	42a0      	cmp	r0, r4
 8002996:	d007      	beq.n	80029a8 <sbrk_aligned+0x38>
 8002998:	1a21      	subs	r1, r4, r0
 800299a:	4628      	mov	r0, r5
 800299c:	f000 fb6a 	bl	8003074 <_sbrk_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d101      	bne.n	80029a8 <sbrk_aligned+0x38>
 80029a4:	f04f 34ff 	mov.w	r4, #4294967295
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	200000e4 	.word	0x200000e4

080029b0 <_malloc_r>:
 80029b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b4:	1ccd      	adds	r5, r1, #3
 80029b6:	f025 0503 	bic.w	r5, r5, #3
 80029ba:	3508      	adds	r5, #8
 80029bc:	2d0c      	cmp	r5, #12
 80029be:	bf38      	it	cc
 80029c0:	250c      	movcc	r5, #12
 80029c2:	2d00      	cmp	r5, #0
 80029c4:	4607      	mov	r7, r0
 80029c6:	db01      	blt.n	80029cc <_malloc_r+0x1c>
 80029c8:	42a9      	cmp	r1, r5
 80029ca:	d905      	bls.n	80029d8 <_malloc_r+0x28>
 80029cc:	230c      	movs	r3, #12
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	2600      	movs	r6, #0
 80029d2:	4630      	mov	r0, r6
 80029d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d8:	4e2e      	ldr	r6, [pc, #184]	; (8002a94 <_malloc_r+0xe4>)
 80029da:	f000 fbf5 	bl	80031c8 <__malloc_lock>
 80029de:	6833      	ldr	r3, [r6, #0]
 80029e0:	461c      	mov	r4, r3
 80029e2:	bb34      	cbnz	r4, 8002a32 <_malloc_r+0x82>
 80029e4:	4629      	mov	r1, r5
 80029e6:	4638      	mov	r0, r7
 80029e8:	f7ff ffc2 	bl	8002970 <sbrk_aligned>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	4604      	mov	r4, r0
 80029f0:	d14d      	bne.n	8002a8e <_malloc_r+0xde>
 80029f2:	6834      	ldr	r4, [r6, #0]
 80029f4:	4626      	mov	r6, r4
 80029f6:	2e00      	cmp	r6, #0
 80029f8:	d140      	bne.n	8002a7c <_malloc_r+0xcc>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	4631      	mov	r1, r6
 80029fe:	4638      	mov	r0, r7
 8002a00:	eb04 0803 	add.w	r8, r4, r3
 8002a04:	f000 fb36 	bl	8003074 <_sbrk_r>
 8002a08:	4580      	cmp	r8, r0
 8002a0a:	d13a      	bne.n	8002a82 <_malloc_r+0xd2>
 8002a0c:	6821      	ldr	r1, [r4, #0]
 8002a0e:	3503      	adds	r5, #3
 8002a10:	1a6d      	subs	r5, r5, r1
 8002a12:	f025 0503 	bic.w	r5, r5, #3
 8002a16:	3508      	adds	r5, #8
 8002a18:	2d0c      	cmp	r5, #12
 8002a1a:	bf38      	it	cc
 8002a1c:	250c      	movcc	r5, #12
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4638      	mov	r0, r7
 8002a22:	f7ff ffa5 	bl	8002970 <sbrk_aligned>
 8002a26:	3001      	adds	r0, #1
 8002a28:	d02b      	beq.n	8002a82 <_malloc_r+0xd2>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	442b      	add	r3, r5
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	e00e      	b.n	8002a50 <_malloc_r+0xa0>
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	1b52      	subs	r2, r2, r5
 8002a36:	d41e      	bmi.n	8002a76 <_malloc_r+0xc6>
 8002a38:	2a0b      	cmp	r2, #11
 8002a3a:	d916      	bls.n	8002a6a <_malloc_r+0xba>
 8002a3c:	1961      	adds	r1, r4, r5
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	6025      	str	r5, [r4, #0]
 8002a42:	bf18      	it	ne
 8002a44:	6059      	strne	r1, [r3, #4]
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	bf08      	it	eq
 8002a4a:	6031      	streq	r1, [r6, #0]
 8002a4c:	5162      	str	r2, [r4, r5]
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	4638      	mov	r0, r7
 8002a52:	f104 060b 	add.w	r6, r4, #11
 8002a56:	f000 fbbd 	bl	80031d4 <__malloc_unlock>
 8002a5a:	f026 0607 	bic.w	r6, r6, #7
 8002a5e:	1d23      	adds	r3, r4, #4
 8002a60:	1af2      	subs	r2, r6, r3
 8002a62:	d0b6      	beq.n	80029d2 <_malloc_r+0x22>
 8002a64:	1b9b      	subs	r3, r3, r6
 8002a66:	50a3      	str	r3, [r4, r2]
 8002a68:	e7b3      	b.n	80029d2 <_malloc_r+0x22>
 8002a6a:	6862      	ldr	r2, [r4, #4]
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	bf0c      	ite	eq
 8002a70:	6032      	streq	r2, [r6, #0]
 8002a72:	605a      	strne	r2, [r3, #4]
 8002a74:	e7ec      	b.n	8002a50 <_malloc_r+0xa0>
 8002a76:	4623      	mov	r3, r4
 8002a78:	6864      	ldr	r4, [r4, #4]
 8002a7a:	e7b2      	b.n	80029e2 <_malloc_r+0x32>
 8002a7c:	4634      	mov	r4, r6
 8002a7e:	6876      	ldr	r6, [r6, #4]
 8002a80:	e7b9      	b.n	80029f6 <_malloc_r+0x46>
 8002a82:	230c      	movs	r3, #12
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4638      	mov	r0, r7
 8002a88:	f000 fba4 	bl	80031d4 <__malloc_unlock>
 8002a8c:	e7a1      	b.n	80029d2 <_malloc_r+0x22>
 8002a8e:	6025      	str	r5, [r4, #0]
 8002a90:	e7de      	b.n	8002a50 <_malloc_r+0xa0>
 8002a92:	bf00      	nop
 8002a94:	200000e0 	.word	0x200000e0

08002a98 <__sfputc_r>:
 8002a98:	6893      	ldr	r3, [r2, #8]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	b410      	push	{r4}
 8002aa0:	6093      	str	r3, [r2, #8]
 8002aa2:	da08      	bge.n	8002ab6 <__sfputc_r+0x1e>
 8002aa4:	6994      	ldr	r4, [r2, #24]
 8002aa6:	42a3      	cmp	r3, r4
 8002aa8:	db01      	blt.n	8002aae <__sfputc_r+0x16>
 8002aaa:	290a      	cmp	r1, #10
 8002aac:	d103      	bne.n	8002ab6 <__sfputc_r+0x1e>
 8002aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ab2:	f7ff bc31 	b.w	8002318 <__swbuf_r>
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	1c58      	adds	r0, r3, #1
 8002aba:	6010      	str	r0, [r2, #0]
 8002abc:	7019      	strb	r1, [r3, #0]
 8002abe:	4608      	mov	r0, r1
 8002ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <__sfputs_r>:
 8002ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac8:	4606      	mov	r6, r0
 8002aca:	460f      	mov	r7, r1
 8002acc:	4614      	mov	r4, r2
 8002ace:	18d5      	adds	r5, r2, r3
 8002ad0:	42ac      	cmp	r4, r5
 8002ad2:	d101      	bne.n	8002ad8 <__sfputs_r+0x12>
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	e007      	b.n	8002ae8 <__sfputs_r+0x22>
 8002ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002adc:	463a      	mov	r2, r7
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f7ff ffda 	bl	8002a98 <__sfputc_r>
 8002ae4:	1c43      	adds	r3, r0, #1
 8002ae6:	d1f3      	bne.n	8002ad0 <__sfputs_r+0xa>
 8002ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002aec <_vfiprintf_r>:
 8002aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af0:	460d      	mov	r5, r1
 8002af2:	b09d      	sub	sp, #116	; 0x74
 8002af4:	4614      	mov	r4, r2
 8002af6:	4698      	mov	r8, r3
 8002af8:	4606      	mov	r6, r0
 8002afa:	b118      	cbz	r0, 8002b04 <_vfiprintf_r+0x18>
 8002afc:	6983      	ldr	r3, [r0, #24]
 8002afe:	b90b      	cbnz	r3, 8002b04 <_vfiprintf_r+0x18>
 8002b00:	f7ff fde4 	bl	80026cc <__sinit>
 8002b04:	4b89      	ldr	r3, [pc, #548]	; (8002d2c <_vfiprintf_r+0x240>)
 8002b06:	429d      	cmp	r5, r3
 8002b08:	d11b      	bne.n	8002b42 <_vfiprintf_r+0x56>
 8002b0a:	6875      	ldr	r5, [r6, #4]
 8002b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b0e:	07d9      	lsls	r1, r3, #31
 8002b10:	d405      	bmi.n	8002b1e <_vfiprintf_r+0x32>
 8002b12:	89ab      	ldrh	r3, [r5, #12]
 8002b14:	059a      	lsls	r2, r3, #22
 8002b16:	d402      	bmi.n	8002b1e <_vfiprintf_r+0x32>
 8002b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b1a:	f7ff fe75 	bl	8002808 <__retarget_lock_acquire_recursive>
 8002b1e:	89ab      	ldrh	r3, [r5, #12]
 8002b20:	071b      	lsls	r3, r3, #28
 8002b22:	d501      	bpl.n	8002b28 <_vfiprintf_r+0x3c>
 8002b24:	692b      	ldr	r3, [r5, #16]
 8002b26:	b9eb      	cbnz	r3, 8002b64 <_vfiprintf_r+0x78>
 8002b28:	4629      	mov	r1, r5
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	f7ff fc46 	bl	80023bc <__swsetup_r>
 8002b30:	b1c0      	cbz	r0, 8002b64 <_vfiprintf_r+0x78>
 8002b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b34:	07dc      	lsls	r4, r3, #31
 8002b36:	d50e      	bpl.n	8002b56 <_vfiprintf_r+0x6a>
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	b01d      	add	sp, #116	; 0x74
 8002b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b42:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <_vfiprintf_r+0x244>)
 8002b44:	429d      	cmp	r5, r3
 8002b46:	d101      	bne.n	8002b4c <_vfiprintf_r+0x60>
 8002b48:	68b5      	ldr	r5, [r6, #8]
 8002b4a:	e7df      	b.n	8002b0c <_vfiprintf_r+0x20>
 8002b4c:	4b79      	ldr	r3, [pc, #484]	; (8002d34 <_vfiprintf_r+0x248>)
 8002b4e:	429d      	cmp	r5, r3
 8002b50:	bf08      	it	eq
 8002b52:	68f5      	ldreq	r5, [r6, #12]
 8002b54:	e7da      	b.n	8002b0c <_vfiprintf_r+0x20>
 8002b56:	89ab      	ldrh	r3, [r5, #12]
 8002b58:	0598      	lsls	r0, r3, #22
 8002b5a:	d4ed      	bmi.n	8002b38 <_vfiprintf_r+0x4c>
 8002b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b5e:	f7ff fe54 	bl	800280a <__retarget_lock_release_recursive>
 8002b62:	e7e9      	b.n	8002b38 <_vfiprintf_r+0x4c>
 8002b64:	2300      	movs	r3, #0
 8002b66:	9309      	str	r3, [sp, #36]	; 0x24
 8002b68:	2320      	movs	r3, #32
 8002b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b72:	2330      	movs	r3, #48	; 0x30
 8002b74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002d38 <_vfiprintf_r+0x24c>
 8002b78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b7c:	f04f 0901 	mov.w	r9, #1
 8002b80:	4623      	mov	r3, r4
 8002b82:	469a      	mov	sl, r3
 8002b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b88:	b10a      	cbz	r2, 8002b8e <_vfiprintf_r+0xa2>
 8002b8a:	2a25      	cmp	r2, #37	; 0x25
 8002b8c:	d1f9      	bne.n	8002b82 <_vfiprintf_r+0x96>
 8002b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8002b92:	d00b      	beq.n	8002bac <_vfiprintf_r+0xc0>
 8002b94:	465b      	mov	r3, fp
 8002b96:	4622      	mov	r2, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	f7ff ff93 	bl	8002ac6 <__sfputs_r>
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	f000 80aa 	beq.w	8002cfa <_vfiprintf_r+0x20e>
 8002ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ba8:	445a      	add	r2, fp
 8002baa:	9209      	str	r2, [sp, #36]	; 0x24
 8002bac:	f89a 3000 	ldrb.w	r3, [sl]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a2 	beq.w	8002cfa <_vfiprintf_r+0x20e>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bc0:	f10a 0a01 	add.w	sl, sl, #1
 8002bc4:	9304      	str	r3, [sp, #16]
 8002bc6:	9307      	str	r3, [sp, #28]
 8002bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8002bce:	4654      	mov	r4, sl
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd6:	4858      	ldr	r0, [pc, #352]	; (8002d38 <_vfiprintf_r+0x24c>)
 8002bd8:	f7fd fb02 	bl	80001e0 <memchr>
 8002bdc:	9a04      	ldr	r2, [sp, #16]
 8002bde:	b9d8      	cbnz	r0, 8002c18 <_vfiprintf_r+0x12c>
 8002be0:	06d1      	lsls	r1, r2, #27
 8002be2:	bf44      	itt	mi
 8002be4:	2320      	movmi	r3, #32
 8002be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bea:	0713      	lsls	r3, r2, #28
 8002bec:	bf44      	itt	mi
 8002bee:	232b      	movmi	r3, #43	; 0x2b
 8002bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8002bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bfa:	d015      	beq.n	8002c28 <_vfiprintf_r+0x13c>
 8002bfc:	9a07      	ldr	r2, [sp, #28]
 8002bfe:	4654      	mov	r4, sl
 8002c00:	2000      	movs	r0, #0
 8002c02:	f04f 0c0a 	mov.w	ip, #10
 8002c06:	4621      	mov	r1, r4
 8002c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c0c:	3b30      	subs	r3, #48	; 0x30
 8002c0e:	2b09      	cmp	r3, #9
 8002c10:	d94e      	bls.n	8002cb0 <_vfiprintf_r+0x1c4>
 8002c12:	b1b0      	cbz	r0, 8002c42 <_vfiprintf_r+0x156>
 8002c14:	9207      	str	r2, [sp, #28]
 8002c16:	e014      	b.n	8002c42 <_vfiprintf_r+0x156>
 8002c18:	eba0 0308 	sub.w	r3, r0, r8
 8002c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	9304      	str	r3, [sp, #16]
 8002c24:	46a2      	mov	sl, r4
 8002c26:	e7d2      	b.n	8002bce <_vfiprintf_r+0xe2>
 8002c28:	9b03      	ldr	r3, [sp, #12]
 8002c2a:	1d19      	adds	r1, r3, #4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	9103      	str	r1, [sp, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bfbb      	ittet	lt
 8002c34:	425b      	neglt	r3, r3
 8002c36:	f042 0202 	orrlt.w	r2, r2, #2
 8002c3a:	9307      	strge	r3, [sp, #28]
 8002c3c:	9307      	strlt	r3, [sp, #28]
 8002c3e:	bfb8      	it	lt
 8002c40:	9204      	strlt	r2, [sp, #16]
 8002c42:	7823      	ldrb	r3, [r4, #0]
 8002c44:	2b2e      	cmp	r3, #46	; 0x2e
 8002c46:	d10c      	bne.n	8002c62 <_vfiprintf_r+0x176>
 8002c48:	7863      	ldrb	r3, [r4, #1]
 8002c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c4c:	d135      	bne.n	8002cba <_vfiprintf_r+0x1ce>
 8002c4e:	9b03      	ldr	r3, [sp, #12]
 8002c50:	1d1a      	adds	r2, r3, #4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	9203      	str	r2, [sp, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bfb8      	it	lt
 8002c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c5e:	3402      	adds	r4, #2
 8002c60:	9305      	str	r3, [sp, #20]
 8002c62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002d48 <_vfiprintf_r+0x25c>
 8002c66:	7821      	ldrb	r1, [r4, #0]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4650      	mov	r0, sl
 8002c6c:	f7fd fab8 	bl	80001e0 <memchr>
 8002c70:	b140      	cbz	r0, 8002c84 <_vfiprintf_r+0x198>
 8002c72:	2340      	movs	r3, #64	; 0x40
 8002c74:	eba0 000a 	sub.w	r0, r0, sl
 8002c78:	fa03 f000 	lsl.w	r0, r3, r0
 8002c7c:	9b04      	ldr	r3, [sp, #16]
 8002c7e:	4303      	orrs	r3, r0
 8002c80:	3401      	adds	r4, #1
 8002c82:	9304      	str	r3, [sp, #16]
 8002c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c88:	482c      	ldr	r0, [pc, #176]	; (8002d3c <_vfiprintf_r+0x250>)
 8002c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c8e:	2206      	movs	r2, #6
 8002c90:	f7fd faa6 	bl	80001e0 <memchr>
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d03f      	beq.n	8002d18 <_vfiprintf_r+0x22c>
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <_vfiprintf_r+0x254>)
 8002c9a:	bb1b      	cbnz	r3, 8002ce4 <_vfiprintf_r+0x1f8>
 8002c9c:	9b03      	ldr	r3, [sp, #12]
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	f023 0307 	bic.w	r3, r3, #7
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002caa:	443b      	add	r3, r7
 8002cac:	9309      	str	r3, [sp, #36]	; 0x24
 8002cae:	e767      	b.n	8002b80 <_vfiprintf_r+0x94>
 8002cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	e7a5      	b.n	8002c06 <_vfiprintf_r+0x11a>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	3401      	adds	r4, #1
 8002cbe:	9305      	str	r3, [sp, #20]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f04f 0c0a 	mov.w	ip, #10
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ccc:	3a30      	subs	r2, #48	; 0x30
 8002cce:	2a09      	cmp	r2, #9
 8002cd0:	d903      	bls.n	8002cda <_vfiprintf_r+0x1ee>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0c5      	beq.n	8002c62 <_vfiprintf_r+0x176>
 8002cd6:	9105      	str	r1, [sp, #20]
 8002cd8:	e7c3      	b.n	8002c62 <_vfiprintf_r+0x176>
 8002cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cde:	4604      	mov	r4, r0
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e7f0      	b.n	8002cc6 <_vfiprintf_r+0x1da>
 8002ce4:	ab03      	add	r3, sp, #12
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	462a      	mov	r2, r5
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_vfiprintf_r+0x258>)
 8002cec:	a904      	add	r1, sp, #16
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f3af 8000 	nop.w
 8002cf4:	4607      	mov	r7, r0
 8002cf6:	1c78      	adds	r0, r7, #1
 8002cf8:	d1d6      	bne.n	8002ca8 <_vfiprintf_r+0x1bc>
 8002cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cfc:	07d9      	lsls	r1, r3, #31
 8002cfe:	d405      	bmi.n	8002d0c <_vfiprintf_r+0x220>
 8002d00:	89ab      	ldrh	r3, [r5, #12]
 8002d02:	059a      	lsls	r2, r3, #22
 8002d04:	d402      	bmi.n	8002d0c <_vfiprintf_r+0x220>
 8002d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d08:	f7ff fd7f 	bl	800280a <__retarget_lock_release_recursive>
 8002d0c:	89ab      	ldrh	r3, [r5, #12]
 8002d0e:	065b      	lsls	r3, r3, #25
 8002d10:	f53f af12 	bmi.w	8002b38 <_vfiprintf_r+0x4c>
 8002d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d16:	e711      	b.n	8002b3c <_vfiprintf_r+0x50>
 8002d18:	ab03      	add	r3, sp, #12
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	462a      	mov	r2, r5
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <_vfiprintf_r+0x258>)
 8002d20:	a904      	add	r1, sp, #16
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 f880 	bl	8002e28 <_printf_i>
 8002d28:	e7e4      	b.n	8002cf4 <_vfiprintf_r+0x208>
 8002d2a:	bf00      	nop
 8002d2c:	08003294 	.word	0x08003294
 8002d30:	080032b4 	.word	0x080032b4
 8002d34:	08003274 	.word	0x08003274
 8002d38:	080032d4 	.word	0x080032d4
 8002d3c:	080032de 	.word	0x080032de
 8002d40:	00000000 	.word	0x00000000
 8002d44:	08002ac7 	.word	0x08002ac7
 8002d48:	080032da 	.word	0x080032da

08002d4c <_printf_common>:
 8002d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d50:	4616      	mov	r6, r2
 8002d52:	4699      	mov	r9, r3
 8002d54:	688a      	ldr	r2, [r1, #8]
 8002d56:	690b      	ldr	r3, [r1, #16]
 8002d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	bfb8      	it	lt
 8002d60:	4613      	movlt	r3, r2
 8002d62:	6033      	str	r3, [r6, #0]
 8002d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d68:	4607      	mov	r7, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	b10a      	cbz	r2, 8002d72 <_printf_common+0x26>
 8002d6e:	3301      	adds	r3, #1
 8002d70:	6033      	str	r3, [r6, #0]
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	0699      	lsls	r1, r3, #26
 8002d76:	bf42      	ittt	mi
 8002d78:	6833      	ldrmi	r3, [r6, #0]
 8002d7a:	3302      	addmi	r3, #2
 8002d7c:	6033      	strmi	r3, [r6, #0]
 8002d7e:	6825      	ldr	r5, [r4, #0]
 8002d80:	f015 0506 	ands.w	r5, r5, #6
 8002d84:	d106      	bne.n	8002d94 <_printf_common+0x48>
 8002d86:	f104 0a19 	add.w	sl, r4, #25
 8002d8a:	68e3      	ldr	r3, [r4, #12]
 8002d8c:	6832      	ldr	r2, [r6, #0]
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	42ab      	cmp	r3, r5
 8002d92:	dc26      	bgt.n	8002de2 <_printf_common+0x96>
 8002d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d98:	1e13      	subs	r3, r2, #0
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	bf18      	it	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	0692      	lsls	r2, r2, #26
 8002da2:	d42b      	bmi.n	8002dfc <_printf_common+0xb0>
 8002da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002da8:	4649      	mov	r1, r9
 8002daa:	4638      	mov	r0, r7
 8002dac:	47c0      	blx	r8
 8002dae:	3001      	adds	r0, #1
 8002db0:	d01e      	beq.n	8002df0 <_printf_common+0xa4>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	68e5      	ldr	r5, [r4, #12]
 8002db6:	6832      	ldr	r2, [r6, #0]
 8002db8:	f003 0306 	and.w	r3, r3, #6
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	bf08      	it	eq
 8002dc0:	1aad      	subeq	r5, r5, r2
 8002dc2:	68a3      	ldr	r3, [r4, #8]
 8002dc4:	6922      	ldr	r2, [r4, #16]
 8002dc6:	bf0c      	ite	eq
 8002dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dcc:	2500      	movne	r5, #0
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	bfc4      	itt	gt
 8002dd2:	1a9b      	subgt	r3, r3, r2
 8002dd4:	18ed      	addgt	r5, r5, r3
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	341a      	adds	r4, #26
 8002dda:	42b5      	cmp	r5, r6
 8002ddc:	d11a      	bne.n	8002e14 <_printf_common+0xc8>
 8002dde:	2000      	movs	r0, #0
 8002de0:	e008      	b.n	8002df4 <_printf_common+0xa8>
 8002de2:	2301      	movs	r3, #1
 8002de4:	4652      	mov	r2, sl
 8002de6:	4649      	mov	r1, r9
 8002de8:	4638      	mov	r0, r7
 8002dea:	47c0      	blx	r8
 8002dec:	3001      	adds	r0, #1
 8002dee:	d103      	bne.n	8002df8 <_printf_common+0xac>
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df8:	3501      	adds	r5, #1
 8002dfa:	e7c6      	b.n	8002d8a <_printf_common+0x3e>
 8002dfc:	18e1      	adds	r1, r4, r3
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	2030      	movs	r0, #48	; 0x30
 8002e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e06:	4422      	add	r2, r4
 8002e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e10:	3302      	adds	r3, #2
 8002e12:	e7c7      	b.n	8002da4 <_printf_common+0x58>
 8002e14:	2301      	movs	r3, #1
 8002e16:	4622      	mov	r2, r4
 8002e18:	4649      	mov	r1, r9
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	47c0      	blx	r8
 8002e1e:	3001      	adds	r0, #1
 8002e20:	d0e6      	beq.n	8002df0 <_printf_common+0xa4>
 8002e22:	3601      	adds	r6, #1
 8002e24:	e7d9      	b.n	8002dda <_printf_common+0x8e>
	...

08002e28 <_printf_i>:
 8002e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e2c:	7e0f      	ldrb	r7, [r1, #24]
 8002e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e30:	2f78      	cmp	r7, #120	; 0x78
 8002e32:	4691      	mov	r9, r2
 8002e34:	4680      	mov	r8, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	469a      	mov	sl, r3
 8002e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e3e:	d807      	bhi.n	8002e50 <_printf_i+0x28>
 8002e40:	2f62      	cmp	r7, #98	; 0x62
 8002e42:	d80a      	bhi.n	8002e5a <_printf_i+0x32>
 8002e44:	2f00      	cmp	r7, #0
 8002e46:	f000 80d8 	beq.w	8002ffa <_printf_i+0x1d2>
 8002e4a:	2f58      	cmp	r7, #88	; 0x58
 8002e4c:	f000 80a3 	beq.w	8002f96 <_printf_i+0x16e>
 8002e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e58:	e03a      	b.n	8002ed0 <_printf_i+0xa8>
 8002e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e5e:	2b15      	cmp	r3, #21
 8002e60:	d8f6      	bhi.n	8002e50 <_printf_i+0x28>
 8002e62:	a101      	add	r1, pc, #4	; (adr r1, 8002e68 <_printf_i+0x40>)
 8002e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e68:	08002ec1 	.word	0x08002ec1
 8002e6c:	08002ed5 	.word	0x08002ed5
 8002e70:	08002e51 	.word	0x08002e51
 8002e74:	08002e51 	.word	0x08002e51
 8002e78:	08002e51 	.word	0x08002e51
 8002e7c:	08002e51 	.word	0x08002e51
 8002e80:	08002ed5 	.word	0x08002ed5
 8002e84:	08002e51 	.word	0x08002e51
 8002e88:	08002e51 	.word	0x08002e51
 8002e8c:	08002e51 	.word	0x08002e51
 8002e90:	08002e51 	.word	0x08002e51
 8002e94:	08002fe1 	.word	0x08002fe1
 8002e98:	08002f05 	.word	0x08002f05
 8002e9c:	08002fc3 	.word	0x08002fc3
 8002ea0:	08002e51 	.word	0x08002e51
 8002ea4:	08002e51 	.word	0x08002e51
 8002ea8:	08003003 	.word	0x08003003
 8002eac:	08002e51 	.word	0x08002e51
 8002eb0:	08002f05 	.word	0x08002f05
 8002eb4:	08002e51 	.word	0x08002e51
 8002eb8:	08002e51 	.word	0x08002e51
 8002ebc:	08002fcb 	.word	0x08002fcb
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	1d1a      	adds	r2, r3, #4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	602a      	str	r2, [r5, #0]
 8002ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0a3      	b.n	800301c <_printf_i+0x1f4>
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	6829      	ldr	r1, [r5, #0]
 8002ed8:	0606      	lsls	r6, r0, #24
 8002eda:	f101 0304 	add.w	r3, r1, #4
 8002ede:	d50a      	bpl.n	8002ef6 <_printf_i+0xce>
 8002ee0:	680e      	ldr	r6, [r1, #0]
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	2e00      	cmp	r6, #0
 8002ee6:	da03      	bge.n	8002ef0 <_printf_i+0xc8>
 8002ee8:	232d      	movs	r3, #45	; 0x2d
 8002eea:	4276      	negs	r6, r6
 8002eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef0:	485e      	ldr	r0, [pc, #376]	; (800306c <_printf_i+0x244>)
 8002ef2:	230a      	movs	r3, #10
 8002ef4:	e019      	b.n	8002f2a <_printf_i+0x102>
 8002ef6:	680e      	ldr	r6, [r1, #0]
 8002ef8:	602b      	str	r3, [r5, #0]
 8002efa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002efe:	bf18      	it	ne
 8002f00:	b236      	sxthne	r6, r6
 8002f02:	e7ef      	b.n	8002ee4 <_printf_i+0xbc>
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	6820      	ldr	r0, [r4, #0]
 8002f08:	1d19      	adds	r1, r3, #4
 8002f0a:	6029      	str	r1, [r5, #0]
 8002f0c:	0601      	lsls	r1, r0, #24
 8002f0e:	d501      	bpl.n	8002f14 <_printf_i+0xec>
 8002f10:	681e      	ldr	r6, [r3, #0]
 8002f12:	e002      	b.n	8002f1a <_printf_i+0xf2>
 8002f14:	0646      	lsls	r6, r0, #25
 8002f16:	d5fb      	bpl.n	8002f10 <_printf_i+0xe8>
 8002f18:	881e      	ldrh	r6, [r3, #0]
 8002f1a:	4854      	ldr	r0, [pc, #336]	; (800306c <_printf_i+0x244>)
 8002f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8002f1e:	bf0c      	ite	eq
 8002f20:	2308      	moveq	r3, #8
 8002f22:	230a      	movne	r3, #10
 8002f24:	2100      	movs	r1, #0
 8002f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f2a:	6865      	ldr	r5, [r4, #4]
 8002f2c:	60a5      	str	r5, [r4, #8]
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	bfa2      	ittt	ge
 8002f32:	6821      	ldrge	r1, [r4, #0]
 8002f34:	f021 0104 	bicge.w	r1, r1, #4
 8002f38:	6021      	strge	r1, [r4, #0]
 8002f3a:	b90e      	cbnz	r6, 8002f40 <_printf_i+0x118>
 8002f3c:	2d00      	cmp	r5, #0
 8002f3e:	d04d      	beq.n	8002fdc <_printf_i+0x1b4>
 8002f40:	4615      	mov	r5, r2
 8002f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f46:	fb03 6711 	mls	r7, r3, r1, r6
 8002f4a:	5dc7      	ldrb	r7, [r0, r7]
 8002f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f50:	4637      	mov	r7, r6
 8002f52:	42bb      	cmp	r3, r7
 8002f54:	460e      	mov	r6, r1
 8002f56:	d9f4      	bls.n	8002f42 <_printf_i+0x11a>
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d10b      	bne.n	8002f74 <_printf_i+0x14c>
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	07de      	lsls	r6, r3, #31
 8002f60:	d508      	bpl.n	8002f74 <_printf_i+0x14c>
 8002f62:	6923      	ldr	r3, [r4, #16]
 8002f64:	6861      	ldr	r1, [r4, #4]
 8002f66:	4299      	cmp	r1, r3
 8002f68:	bfde      	ittt	le
 8002f6a:	2330      	movle	r3, #48	; 0x30
 8002f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f74:	1b52      	subs	r2, r2, r5
 8002f76:	6122      	str	r2, [r4, #16]
 8002f78:	f8cd a000 	str.w	sl, [sp]
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	aa03      	add	r2, sp, #12
 8002f80:	4621      	mov	r1, r4
 8002f82:	4640      	mov	r0, r8
 8002f84:	f7ff fee2 	bl	8002d4c <_printf_common>
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d14c      	bne.n	8003026 <_printf_i+0x1fe>
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	b004      	add	sp, #16
 8002f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f96:	4835      	ldr	r0, [pc, #212]	; (800306c <_printf_i+0x244>)
 8002f98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f9c:	6829      	ldr	r1, [r5, #0]
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fa4:	6029      	str	r1, [r5, #0]
 8002fa6:	061d      	lsls	r5, r3, #24
 8002fa8:	d514      	bpl.n	8002fd4 <_printf_i+0x1ac>
 8002faa:	07df      	lsls	r7, r3, #31
 8002fac:	bf44      	itt	mi
 8002fae:	f043 0320 	orrmi.w	r3, r3, #32
 8002fb2:	6023      	strmi	r3, [r4, #0]
 8002fb4:	b91e      	cbnz	r6, 8002fbe <_printf_i+0x196>
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	f023 0320 	bic.w	r3, r3, #32
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	e7b0      	b.n	8002f24 <_printf_i+0xfc>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f043 0320 	orr.w	r3, r3, #32
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	2378      	movs	r3, #120	; 0x78
 8002fcc:	4828      	ldr	r0, [pc, #160]	; (8003070 <_printf_i+0x248>)
 8002fce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fd2:	e7e3      	b.n	8002f9c <_printf_i+0x174>
 8002fd4:	0659      	lsls	r1, r3, #25
 8002fd6:	bf48      	it	mi
 8002fd8:	b2b6      	uxthmi	r6, r6
 8002fda:	e7e6      	b.n	8002faa <_printf_i+0x182>
 8002fdc:	4615      	mov	r5, r2
 8002fde:	e7bb      	b.n	8002f58 <_printf_i+0x130>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	6826      	ldr	r6, [r4, #0]
 8002fe4:	6961      	ldr	r1, [r4, #20]
 8002fe6:	1d18      	adds	r0, r3, #4
 8002fe8:	6028      	str	r0, [r5, #0]
 8002fea:	0635      	lsls	r5, r6, #24
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	d501      	bpl.n	8002ff4 <_printf_i+0x1cc>
 8002ff0:	6019      	str	r1, [r3, #0]
 8002ff2:	e002      	b.n	8002ffa <_printf_i+0x1d2>
 8002ff4:	0670      	lsls	r0, r6, #25
 8002ff6:	d5fb      	bpl.n	8002ff0 <_printf_i+0x1c8>
 8002ff8:	8019      	strh	r1, [r3, #0]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6123      	str	r3, [r4, #16]
 8002ffe:	4615      	mov	r5, r2
 8003000:	e7ba      	b.n	8002f78 <_printf_i+0x150>
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	1d1a      	adds	r2, r3, #4
 8003006:	602a      	str	r2, [r5, #0]
 8003008:	681d      	ldr	r5, [r3, #0]
 800300a:	6862      	ldr	r2, [r4, #4]
 800300c:	2100      	movs	r1, #0
 800300e:	4628      	mov	r0, r5
 8003010:	f7fd f8e6 	bl	80001e0 <memchr>
 8003014:	b108      	cbz	r0, 800301a <_printf_i+0x1f2>
 8003016:	1b40      	subs	r0, r0, r5
 8003018:	6060      	str	r0, [r4, #4]
 800301a:	6863      	ldr	r3, [r4, #4]
 800301c:	6123      	str	r3, [r4, #16]
 800301e:	2300      	movs	r3, #0
 8003020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003024:	e7a8      	b.n	8002f78 <_printf_i+0x150>
 8003026:	6923      	ldr	r3, [r4, #16]
 8003028:	462a      	mov	r2, r5
 800302a:	4649      	mov	r1, r9
 800302c:	4640      	mov	r0, r8
 800302e:	47d0      	blx	sl
 8003030:	3001      	adds	r0, #1
 8003032:	d0ab      	beq.n	8002f8c <_printf_i+0x164>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	079b      	lsls	r3, r3, #30
 8003038:	d413      	bmi.n	8003062 <_printf_i+0x23a>
 800303a:	68e0      	ldr	r0, [r4, #12]
 800303c:	9b03      	ldr	r3, [sp, #12]
 800303e:	4298      	cmp	r0, r3
 8003040:	bfb8      	it	lt
 8003042:	4618      	movlt	r0, r3
 8003044:	e7a4      	b.n	8002f90 <_printf_i+0x168>
 8003046:	2301      	movs	r3, #1
 8003048:	4632      	mov	r2, r6
 800304a:	4649      	mov	r1, r9
 800304c:	4640      	mov	r0, r8
 800304e:	47d0      	blx	sl
 8003050:	3001      	adds	r0, #1
 8003052:	d09b      	beq.n	8002f8c <_printf_i+0x164>
 8003054:	3501      	adds	r5, #1
 8003056:	68e3      	ldr	r3, [r4, #12]
 8003058:	9903      	ldr	r1, [sp, #12]
 800305a:	1a5b      	subs	r3, r3, r1
 800305c:	42ab      	cmp	r3, r5
 800305e:	dcf2      	bgt.n	8003046 <_printf_i+0x21e>
 8003060:	e7eb      	b.n	800303a <_printf_i+0x212>
 8003062:	2500      	movs	r5, #0
 8003064:	f104 0619 	add.w	r6, r4, #25
 8003068:	e7f5      	b.n	8003056 <_printf_i+0x22e>
 800306a:	bf00      	nop
 800306c:	080032e5 	.word	0x080032e5
 8003070:	080032f6 	.word	0x080032f6

08003074 <_sbrk_r>:
 8003074:	b538      	push	{r3, r4, r5, lr}
 8003076:	4d06      	ldr	r5, [pc, #24]	; (8003090 <_sbrk_r+0x1c>)
 8003078:	2300      	movs	r3, #0
 800307a:	4604      	mov	r4, r0
 800307c:	4608      	mov	r0, r1
 800307e:	602b      	str	r3, [r5, #0]
 8003080:	f7fd fc58 	bl	8000934 <_sbrk>
 8003084:	1c43      	adds	r3, r0, #1
 8003086:	d102      	bne.n	800308e <_sbrk_r+0x1a>
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	b103      	cbz	r3, 800308e <_sbrk_r+0x1a>
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	bd38      	pop	{r3, r4, r5, pc}
 8003090:	200000e8 	.word	0x200000e8

08003094 <__sread>:
 8003094:	b510      	push	{r4, lr}
 8003096:	460c      	mov	r4, r1
 8003098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800309c:	f000 f8a0 	bl	80031e0 <_read_r>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	bfab      	itete	ge
 80030a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030a6:	89a3      	ldrhlt	r3, [r4, #12]
 80030a8:	181b      	addge	r3, r3, r0
 80030aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030ae:	bfac      	ite	ge
 80030b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80030b2:	81a3      	strhlt	r3, [r4, #12]
 80030b4:	bd10      	pop	{r4, pc}

080030b6 <__swrite>:
 80030b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ba:	461f      	mov	r7, r3
 80030bc:	898b      	ldrh	r3, [r1, #12]
 80030be:	05db      	lsls	r3, r3, #23
 80030c0:	4605      	mov	r5, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	4616      	mov	r6, r2
 80030c6:	d505      	bpl.n	80030d4 <__swrite+0x1e>
 80030c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030cc:	2302      	movs	r3, #2
 80030ce:	2200      	movs	r2, #0
 80030d0:	f000 f868 	bl	80031a4 <_lseek_r>
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030de:	81a3      	strh	r3, [r4, #12]
 80030e0:	4632      	mov	r2, r6
 80030e2:	463b      	mov	r3, r7
 80030e4:	4628      	mov	r0, r5
 80030e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030ea:	f000 b817 	b.w	800311c <_write_r>

080030ee <__sseek>:
 80030ee:	b510      	push	{r4, lr}
 80030f0:	460c      	mov	r4, r1
 80030f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f6:	f000 f855 	bl	80031a4 <_lseek_r>
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	bf15      	itete	ne
 8003100:	6560      	strne	r0, [r4, #84]	; 0x54
 8003102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800310a:	81a3      	strheq	r3, [r4, #12]
 800310c:	bf18      	it	ne
 800310e:	81a3      	strhne	r3, [r4, #12]
 8003110:	bd10      	pop	{r4, pc}

08003112 <__sclose>:
 8003112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003116:	f000 b813 	b.w	8003140 <_close_r>
	...

0800311c <_write_r>:
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	4d07      	ldr	r5, [pc, #28]	; (800313c <_write_r+0x20>)
 8003120:	4604      	mov	r4, r0
 8003122:	4608      	mov	r0, r1
 8003124:	4611      	mov	r1, r2
 8003126:	2200      	movs	r2, #0
 8003128:	602a      	str	r2, [r5, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	f7fd fbb1 	bl	8000892 <_write>
 8003130:	1c43      	adds	r3, r0, #1
 8003132:	d102      	bne.n	800313a <_write_r+0x1e>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	b103      	cbz	r3, 800313a <_write_r+0x1e>
 8003138:	6023      	str	r3, [r4, #0]
 800313a:	bd38      	pop	{r3, r4, r5, pc}
 800313c:	200000e8 	.word	0x200000e8

08003140 <_close_r>:
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	4d06      	ldr	r5, [pc, #24]	; (800315c <_close_r+0x1c>)
 8003144:	2300      	movs	r3, #0
 8003146:	4604      	mov	r4, r0
 8003148:	4608      	mov	r0, r1
 800314a:	602b      	str	r3, [r5, #0]
 800314c:	f7fd fbbd 	bl	80008ca <_close>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d102      	bne.n	800315a <_close_r+0x1a>
 8003154:	682b      	ldr	r3, [r5, #0]
 8003156:	b103      	cbz	r3, 800315a <_close_r+0x1a>
 8003158:	6023      	str	r3, [r4, #0]
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	200000e8 	.word	0x200000e8

08003160 <_fstat_r>:
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	4d07      	ldr	r5, [pc, #28]	; (8003180 <_fstat_r+0x20>)
 8003164:	2300      	movs	r3, #0
 8003166:	4604      	mov	r4, r0
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	602b      	str	r3, [r5, #0]
 800316e:	f7fd fbb8 	bl	80008e2 <_fstat>
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	d102      	bne.n	800317c <_fstat_r+0x1c>
 8003176:	682b      	ldr	r3, [r5, #0]
 8003178:	b103      	cbz	r3, 800317c <_fstat_r+0x1c>
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	bd38      	pop	{r3, r4, r5, pc}
 800317e:	bf00      	nop
 8003180:	200000e8 	.word	0x200000e8

08003184 <_isatty_r>:
 8003184:	b538      	push	{r3, r4, r5, lr}
 8003186:	4d06      	ldr	r5, [pc, #24]	; (80031a0 <_isatty_r+0x1c>)
 8003188:	2300      	movs	r3, #0
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	602b      	str	r3, [r5, #0]
 8003190:	f7fd fbb7 	bl	8000902 <_isatty>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_isatty_r+0x1a>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_isatty_r+0x1a>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	200000e8 	.word	0x200000e8

080031a4 <_lseek_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4d07      	ldr	r5, [pc, #28]	; (80031c4 <_lseek_r+0x20>)
 80031a8:	4604      	mov	r4, r0
 80031aa:	4608      	mov	r0, r1
 80031ac:	4611      	mov	r1, r2
 80031ae:	2200      	movs	r2, #0
 80031b0:	602a      	str	r2, [r5, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f7fd fbb0 	bl	8000918 <_lseek>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	d102      	bne.n	80031c2 <_lseek_r+0x1e>
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	b103      	cbz	r3, 80031c2 <_lseek_r+0x1e>
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
 80031c4:	200000e8 	.word	0x200000e8

080031c8 <__malloc_lock>:
 80031c8:	4801      	ldr	r0, [pc, #4]	; (80031d0 <__malloc_lock+0x8>)
 80031ca:	f7ff bb1d 	b.w	8002808 <__retarget_lock_acquire_recursive>
 80031ce:	bf00      	nop
 80031d0:	200000dc 	.word	0x200000dc

080031d4 <__malloc_unlock>:
 80031d4:	4801      	ldr	r0, [pc, #4]	; (80031dc <__malloc_unlock+0x8>)
 80031d6:	f7ff bb18 	b.w	800280a <__retarget_lock_release_recursive>
 80031da:	bf00      	nop
 80031dc:	200000dc 	.word	0x200000dc

080031e0 <_read_r>:
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	4d07      	ldr	r5, [pc, #28]	; (8003200 <_read_r+0x20>)
 80031e4:	4604      	mov	r4, r0
 80031e6:	4608      	mov	r0, r1
 80031e8:	4611      	mov	r1, r2
 80031ea:	2200      	movs	r2, #0
 80031ec:	602a      	str	r2, [r5, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f7fd fb32 	bl	8000858 <_read>
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d102      	bne.n	80031fe <_read_r+0x1e>
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	b103      	cbz	r3, 80031fe <_read_r+0x1e>
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	bd38      	pop	{r3, r4, r5, pc}
 8003200:	200000e8 	.word	0x200000e8

08003204 <_init>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	bf00      	nop
 8003208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320a:	bc08      	pop	{r3}
 800320c:	469e      	mov	lr, r3
 800320e:	4770      	bx	lr

08003210 <_fini>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr
