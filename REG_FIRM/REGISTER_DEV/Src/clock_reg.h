#ifndef _CLOCK_REG_H_
#define _CLOCK_REG_H_

#include <stdint.h>

#define PERIPH_BASE_ADDR		0x40000000UL

#define APB1PERIPH_BASE_ADDR	PERIPH_BASE_ADDR
#define AHB1PERIPH_BASE_ADDR 	(PERIPH_BASE_ADDR + 0x20000UL)

#define RCC_BASE_ADDR			(AHB1PERIPH_BASE_ADDR + 0x3800UL)

#define RCC_CR_ADDR_OFFSET		0x00UL
#define RCC_CR_ADDR				(RCC_BASE_ADDR + RCC_CR_ADDR_OFFSET)

#define RCC_PLL_ADDR_OFFSET		0x04UL
#define RCC_PLL_ADDR			(RCC_BASE_ADDR + RCC_PLL_ADDR_OFFSET)

#define RCC_CFGR_ADDR_OFFSET	0x08UL
#define RCC_CFGR_ADDR 			(RCC_BASE_ADDR + RCC_CFGR_ADDR_OFFSET)

#define RCC_AHB1ENR_ADDR_OFFSET	0x30UL
#define RCC_AHB1ENR_ADDR		(RCC_BASE_ADDR + RCC_AHB1ENR_ADDR_OFFSET)

#define RCC_AHB2ENR_ADDR_OFFSET	0x34UL
#define RCC_AHB2ENR_ADDR		(RCC_BASE_ADDR + RCC_AHB2ENR_ADDR_OFFSET)

#define RCC_APB1ENR_ADDR_OFFSET	0x40UL
#define RCC_APB1ENR_ADDR		(RCC_BASE_ADDR + RCC_APB1ENR_ADDR_OFFSET)

#define RCC_APB2ENR_ADDR_OFFSET	0x44UL
#define RCC_APB2ENR_ADDR		(RCC_BASE_ADDR + RCC_APB2ENR_ADDR_OFFSET)

typedef struct
{
	volatile uint32_t CR;
	uint32_t RV1[11];
	volatile uint32_t AHB1;
	volatile uint32_t AHB2;
	uint32_t RV2[2];
	volatile uint32_t APB1;
	volatile uint32_t APB2;
}RCC_OFF;


#define RCC		((RCC_OFF *) RCC_BASE_ADDR)

void Clock_init(void);
void Delay_ms(uint32_t);


#endif
